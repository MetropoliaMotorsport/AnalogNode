
motorsport_AnalogNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080044c8  080044c8  000144c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e8  080044e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080044e8  080044e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044e8  080044e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e8  080044e8  000144e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  080044fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080044fc  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012495  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f56  00000000  00000000  000324d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012b0  00000000  00000000  00034428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b8  00000000  00000000  000356d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f8a5  00000000  00000000  00036890  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf73  00000000  00000000  00056135  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6c6d  00000000  00000000  000620a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138d15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005124  00000000  00000000  00138d90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080044b0 	.word	0x080044b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080044b0 	.word	0x080044b0

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f001 f9e6 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f003 fff5 	bl	8004228 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f001 f9f2 	bl	800165a <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f001 f9be 	bl	800160a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000008 	.word	0x20000008
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	20000028 	.word	0x20000028
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000028 	.word	0x20000028

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	431a      	orrs	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	431a      	orrs	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	609a      	str	r2, [r3, #8]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000398:	4618      	mov	r0, r3
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80003a4:	b490      	push	{r4, r7}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	3360      	adds	r3, #96	; 0x60
 80003b6:	461a      	mov	r2, r3
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4413      	add	r3, r2
 80003be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80003c0:	6822      	ldr	r2, [r4, #0]
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <LL_ADC_SetOffset+0x40>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	430a      	orrs	r2, r1
 80003d0:	4313      	orrs	r3, r2
 80003d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003d6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc90      	pop	{r4, r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	03fff000 	.word	0x03fff000

080003e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80003e8:	b490      	push	{r4, r7}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3360      	adds	r3, #96	; 0x60
 80003f6:	461a      	mov	r2, r3
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000400:	6823      	ldr	r3, [r4, #0]
 8000402:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bc90      	pop	{r4, r7}
 800040e:	4770      	bx	lr

08000410 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000410:	b490      	push	{r4, r7}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	3360      	adds	r3, #96	; 0x60
 8000420:	461a      	mov	r2, r3
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800042a:	6823      	ldr	r3, [r4, #0]
 800042c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4313      	orrs	r3, r2
 8000434:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bc90      	pop	{r4, r7}
 800043e:	4770      	bx	lr

08000440 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000440:	b490      	push	{r4, r7}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3360      	adds	r3, #96	; 0x60
 8000450:	461a      	mov	r2, r3
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800045a:	6823      	ldr	r3, [r4, #0]
 800045c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4313      	orrs	r3, r2
 8000464:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bc90      	pop	{r4, r7}
 800046e:	4770      	bx	lr

08000470 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000470:	b490      	push	{r4, r7}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3360      	adds	r3, #96	; 0x60
 8000480:	461a      	mov	r2, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4413      	add	r3, r2
 8000488:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800048a:	6823      	ldr	r3, [r4, #0]
 800048c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bc90      	pop	{r4, r7}
 800049e:	4770      	bx	lr

080004a0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	615a      	str	r2, [r3, #20]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004c6:	b490      	push	{r4, r7}
 80004c8:	b084      	sub	sp, #16
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	60f8      	str	r0, [r7, #12]
 80004ce:	60b9      	str	r1, [r7, #8]
 80004d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3330      	adds	r3, #48	; 0x30
 80004d6:	461a      	mov	r2, r3
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	0a1b      	lsrs	r3, r3, #8
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	f003 030c 	and.w	r3, r3, #12
 80004e2:	4413      	add	r3, r2
 80004e4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80004e6:	6822      	ldr	r2, [r4, #0]
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	f003 031f 	and.w	r3, r3, #31
 80004ee:	211f      	movs	r1, #31
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
 80004f4:	43db      	mvns	r3, r3
 80004f6:	401a      	ands	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	0e9b      	lsrs	r3, r3, #26
 80004fc:	f003 011f 	and.w	r1, r3, #31
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	f003 031f 	and.w	r3, r3, #31
 8000506:	fa01 f303 	lsl.w	r3, r1, r3
 800050a:	4313      	orrs	r3, r2
 800050c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bc90      	pop	{r4, r7}
 8000516:	4770      	bx	lr

08000518 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000518:	b490      	push	{r4, r7}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	3314      	adds	r3, #20
 8000528:	461a      	mov	r2, r3
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	0e5b      	lsrs	r3, r3, #25
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	4413      	add	r3, r2
 8000536:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000538:	6822      	ldr	r2, [r4, #0]
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	0d1b      	lsrs	r3, r3, #20
 800053e:	f003 031f 	and.w	r3, r3, #31
 8000542:	2107      	movs	r1, #7
 8000544:	fa01 f303 	lsl.w	r3, r1, r3
 8000548:	43db      	mvns	r3, r3
 800054a:	401a      	ands	r2, r3
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	0d1b      	lsrs	r3, r3, #20
 8000550:	f003 031f 	and.w	r3, r3, #31
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	fa01 f303 	lsl.w	r3, r1, r3
 800055a:	4313      	orrs	r3, r2
 800055c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bc90      	pop	{r4, r7}
 8000566:	4770      	bx	lr

08000568 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000580:	43db      	mvns	r3, r3
 8000582:	401a      	ands	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f003 0318 	and.w	r3, r3, #24
 800058a:	4908      	ldr	r1, [pc, #32]	; (80005ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800058c:	40d9      	lsrs	r1, r3
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	400b      	ands	r3, r1
 8000592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000596:	431a      	orrs	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	0007ffff 	.word	0x0007ffff

080005b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80005c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	6093      	str	r3, [r2, #8]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005e8:	d101      	bne.n	80005ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80005ea:	2301      	movs	r3, #1
 80005ec:	e000      	b.n	80005f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800060c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000610:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000638:	d101      	bne.n	800063e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800063a:	2301      	movs	r3, #1
 800063c:	e000      	b.n	8000640 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800065c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000660:	f043 0202 	orr.w	r2, r3, #2
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	2b01      	cmp	r3, #1
 8000686:	d101      	bne.n	800068c <LL_ADC_IsEnabled+0x18>
 8000688:	2301      	movs	r3, #1
 800068a:	e000      	b.n	800068e <LL_ADC_IsEnabled+0x1a>
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d101      	bne.n	80006b2 <LL_ADC_IsDisableOngoing+0x18>
 80006ae:	2301      	movs	r3, #1
 80006b0:	e000      	b.n	80006b4 <LL_ADC_IsDisableOngoing+0x1a>
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d101      	bne.n	80006d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80006d4:	2301      	movs	r3, #1
 80006d6:	e000      	b.n	80006da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b08      	cmp	r3, #8
 80006f8:	d101      	bne.n	80006fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80006fa:	2301      	movs	r3, #1
 80006fc:	e000      	b.n	8000700 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000714:	2300      	movs	r3, #0
 8000716:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d101      	bne.n	8000726 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
 8000724:	e16b      	b.n	80009fe <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000730:	2b00      	cmp	r3, #0
 8000732:	d109      	bne.n	8000748 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f000 f971 	bl	8000a1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff41 	bl	80005d4 <LL_ADC_IsDeepPowerDownEnabled>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d004      	beq.n	8000762 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff27 	bl	80005b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff5c 	bl	8000624 <LL_ADC_IsInternalRegulatorEnabled>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d113      	bne.n	800079a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff40 	bl	80005fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800077c:	4ba2      	ldr	r3, [pc, #648]	; (8000a08 <HAL_ADC_Init+0x2fc>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	099b      	lsrs	r3, r3, #6
 8000782:	4aa2      	ldr	r2, [pc, #648]	; (8000a0c <HAL_ADC_Init+0x300>)
 8000784:	fba2 2303 	umull	r2, r3, r2, r3
 8000788:	099b      	lsrs	r3, r3, #6
 800078a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800078c:	e002      	b.n	8000794 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	3b01      	subs	r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f9      	bne.n	800078e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff40 	bl	8000624 <LL_ADC_IsInternalRegulatorEnabled>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d10d      	bne.n	80007c6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007ae:	f043 0210 	orr.w	r2, r3, #16
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ba:	f043 0201 	orr.w	r2, r3, #1
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff78 	bl	80006c0 <LL_ADC_REG_IsConversionOngoing>
 80007d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	2b00      	cmp	r3, #0
 80007dc:	f040 8106 	bne.w	80009ec <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f040 8102 	bne.w	80009ec <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80007f0:	f043 0202 	orr.w	r2, r3, #2
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff39 	bl	8000674 <LL_ADC_IsEnabled>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d111      	bne.n	800082c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000808:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800080c:	f7ff ff32 	bl	8000674 <LL_ADC_IsEnabled>
 8000810:	4604      	mov	r4, r0
 8000812:	487f      	ldr	r0, [pc, #508]	; (8000a10 <HAL_ADC_Init+0x304>)
 8000814:	f7ff ff2e 	bl	8000674 <LL_ADC_IsEnabled>
 8000818:	4603      	mov	r3, r0
 800081a:	4323      	orrs	r3, r4
 800081c:	2b00      	cmp	r3, #0
 800081e:	d105      	bne.n	800082c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	4619      	mov	r1, r3
 8000826:	487b      	ldr	r0, [pc, #492]	; (8000a14 <HAL_ADC_Init+0x308>)
 8000828:	f7ff fd88 	bl	800033c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7f5b      	ldrb	r3, [r3, #29]
 8000830:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000836:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800083c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000842:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800084a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800084c:	4313      	orrs	r3, r2
 800084e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000856:	2b01      	cmp	r3, #1
 8000858:	d106      	bne.n	8000868 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085e:	3b01      	subs	r3, #1
 8000860:	045b      	lsls	r3, r3, #17
 8000862:	69ba      	ldr	r2, [r7, #24]
 8000864:	4313      	orrs	r3, r2
 8000866:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086c:	2b00      	cmp	r3, #0
 800086e:	d009      	beq.n	8000884 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000874:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	4313      	orrs	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	68da      	ldr	r2, [r3, #12]
 800088a:	4b63      	ldr	r3, [pc, #396]	; (8000a18 <HAL_ADC_Init+0x30c>)
 800088c:	4013      	ands	r3, r2
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	6812      	ldr	r2, [r2, #0]
 8000892:	69b9      	ldr	r1, [r7, #24]
 8000894:	430b      	orrs	r3, r1
 8000896:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	691b      	ldr	r3, [r3, #16]
 800089e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	430a      	orrs	r2, r1
 80008ac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff04 	bl	80006c0 <LL_ADC_REG_IsConversionOngoing>
 80008b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff11 	bl	80006e6 <LL_ADC_INJ_IsConversionOngoing>
 80008c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d16d      	bne.n	80009a8 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d16a      	bne.n	80009a8 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80008d6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008de:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80008e0:	4313      	orrs	r3, r2
 80008e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008ee:	f023 0302 	bic.w	r3, r3, #2
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	6812      	ldr	r2, [r2, #0]
 80008f6:	69b9      	ldr	r1, [r7, #24]
 80008f8:	430b      	orrs	r3, r1
 80008fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	691b      	ldr	r3, [r3, #16]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d017      	beq.n	8000934 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	691a      	ldr	r2, [r3, #16]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000912:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800091c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	6911      	ldr	r1, [r2, #16]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	6812      	ldr	r2, [r2, #0]
 800092c:	430b      	orrs	r3, r1
 800092e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8000932:	e013      	b.n	800095c <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	691a      	ldr	r2, [r3, #16]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000942:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000954:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000958:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000962:	2b01      	cmp	r3, #1
 8000964:	d118      	bne.n	8000998 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	691b      	ldr	r3, [r3, #16]
 800096c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000970:	f023 0304 	bic.w	r3, r3, #4
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800097c:	4311      	orrs	r1, r2
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000982:	4311      	orrs	r1, r2
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000988:	430a      	orrs	r2, r1
 800098a:	431a      	orrs	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f042 0201 	orr.w	r2, r2, #1
 8000994:	611a      	str	r2, [r3, #16]
 8000996:	e007      	b.n	80009a8 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	691a      	ldr	r2, [r3, #16]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f022 0201 	bic.w	r2, r2, #1
 80009a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d10c      	bne.n	80009ca <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f023 010f 	bic.w	r1, r3, #15
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6a1b      	ldr	r3, [r3, #32]
 80009be:	1e5a      	subs	r2, r3, #1
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	430a      	orrs	r2, r1
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
 80009c8:	e007      	b.n	80009da <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f022 020f 	bic.w	r2, r2, #15
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009de:	f023 0303 	bic.w	r3, r3, #3
 80009e2:	f043 0201 	orr.w	r2, r3, #1
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80009ea:	e007      	b.n	80009fc <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009f0:	f043 0210 	orr.w	r2, r3, #16
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80009fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd90      	pop	{r4, r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	053e2d63 	.word	0x053e2d63
 8000a10:	50000100 	.word	0x50000100
 8000a14:	50000300 	.word	0x50000300
 8000a18:	fff04007 	.word	0xfff04007

08000a1c <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0a6      	sub	sp, #152	; 0x98
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d101      	bne.n	8000a52 <HAL_ADC_ConfigChannel+0x22>
 8000a4e:	2302      	movs	r3, #2
 8000a50:	e348      	b.n	80010e4 <HAL_ADC_ConfigChannel+0x6b4>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2201      	movs	r2, #1
 8000a56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fe2e 	bl	80006c0 <LL_ADC_REG_IsConversionOngoing>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f040 832d 	bne.w	80010c6 <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	6859      	ldr	r1, [r3, #4]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	f7ff fd24 	bl	80004c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fe1c 	bl	80006c0 <LL_ADC_REG_IsConversionOngoing>
 8000a88:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fe28 	bl	80006e6 <LL_ADC_INJ_IsConversionOngoing>
 8000a96:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000a9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f040 817b 	bne.w	8000d9a <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f040 8176 	bne.w	8000d9a <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ab6:	d10f      	bne.n	8000ad8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6818      	ldr	r0, [r3, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f7ff fd28 	bl	8000518 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fce5 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>
 8000ad6:	e00e      	b.n	8000af6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	6819      	ldr	r1, [r3, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	f7ff fd17 	bl	8000518 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fcd5 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	695a      	ldr	r2, [r3, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	08db      	lsrs	r3, r3, #3
 8000b02:	f003 0303 	and.w	r3, r3, #3
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	691b      	ldr	r3, [r3, #16]
 8000b14:	2b04      	cmp	r3, #4
 8000b16:	d022      	beq.n	8000b5e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	6919      	ldr	r1, [r3, #16]
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b28:	f7ff fc3c 	bl	80003a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6818      	ldr	r0, [r3, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	6919      	ldr	r1, [r3, #16]
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	f7ff fc81 	bl	8000440 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	6919      	ldr	r1, [r3, #16]
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	7f1b      	ldrb	r3, [r3, #28]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d102      	bne.n	8000b54 <HAL_ADC_ConfigChannel+0x124>
 8000b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b52:	e000      	b.n	8000b56 <HAL_ADC_ConfigChannel+0x126>
 8000b54:	2300      	movs	r3, #0
 8000b56:	461a      	mov	r2, r3
 8000b58:	f7ff fc8a 	bl	8000470 <LL_ADC_SetOffsetSaturation>
 8000b5c:	e11d      	b.n	8000d9a <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fc3f 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d10a      	bne.n	8000b8a <HAL_ADC_ConfigChannel+0x15a>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fc34 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	0e9b      	lsrs	r3, r3, #26
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	e012      	b.n	8000bb0 <HAL_ADC_ConfigChannel+0x180>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fc29 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ba0:	fa93 f3a3 	rbit	r3, r3
 8000ba4:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ba6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ba8:	fab3 f383 	clz	r3, r3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d105      	bne.n	8000bc8 <HAL_ADC_ConfigChannel+0x198>
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	0e9b      	lsrs	r3, r3, #26
 8000bc2:	f003 031f 	and.w	r3, r3, #31
 8000bc6:	e00a      	b.n	8000bde <HAL_ADC_ConfigChannel+0x1ae>
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bd0:	fa93 f3a3 	rbit	r3, r3
 8000bd4:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bd8:	fab3 f383 	clz	r3, r3
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d106      	bne.n	8000bf0 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fc10 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fbf6 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10a      	bne.n	8000c1c <HAL_ADC_ConfigChannel+0x1ec>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fbeb 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	0e9b      	lsrs	r3, r3, #26
 8000c16:	f003 021f 	and.w	r2, r3, #31
 8000c1a:	e010      	b.n	8000c3e <HAL_ADC_ConfigChannel+0x20e>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2101      	movs	r1, #1
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fbe0 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c2e:	fa93 f3a3 	rbit	r3, r3
 8000c32:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c36:	fab3 f383 	clz	r3, r3
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d105      	bne.n	8000c56 <HAL_ADC_ConfigChannel+0x226>
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	0e9b      	lsrs	r3, r3, #26
 8000c50:	f003 031f 	and.w	r3, r3, #31
 8000c54:	e00a      	b.n	8000c6c <HAL_ADC_ConfigChannel+0x23c>
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c5e:	fa93 f3a3 	rbit	r3, r3
 8000c62:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c66:	fab3 f383 	clz	r3, r3
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d106      	bne.n	8000c7e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2200      	movs	r2, #0
 8000c76:	2101      	movs	r1, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fbc9 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2102      	movs	r1, #2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fbaf 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10a      	bne.n	8000caa <HAL_ADC_ConfigChannel+0x27a>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2102      	movs	r1, #2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fba4 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	0e9b      	lsrs	r3, r3, #26
 8000ca4:	f003 021f 	and.w	r2, r3, #31
 8000ca8:	e010      	b.n	8000ccc <HAL_ADC_ConfigChannel+0x29c>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2102      	movs	r1, #2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fb99 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cbc:	fa93 f3a3 	rbit	r3, r3
 8000cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cc4:	fab3 f383 	clz	r3, r3
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	461a      	mov	r2, r3
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d105      	bne.n	8000ce4 <HAL_ADC_ConfigChannel+0x2b4>
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	0e9b      	lsrs	r3, r3, #26
 8000cde:	f003 031f 	and.w	r3, r3, #31
 8000ce2:	e00a      	b.n	8000cfa <HAL_ADC_ConfigChannel+0x2ca>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cec:	fa93 f3a3 	rbit	r3, r3
 8000cf0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cf4:	fab3 f383 	clz	r3, r3
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d106      	bne.n	8000d0c <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2200      	movs	r2, #0
 8000d04:	2102      	movs	r1, #2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fb82 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2103      	movs	r1, #3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fb68 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10a      	bne.n	8000d38 <HAL_ADC_ConfigChannel+0x308>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2103      	movs	r1, #3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fb5d 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	0e9b      	lsrs	r3, r3, #26
 8000d32:	f003 021f 	and.w	r2, r3, #31
 8000d36:	e010      	b.n	8000d5a <HAL_ADC_ConfigChannel+0x32a>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fb52 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d44:	4603      	mov	r3, r0
 8000d46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d4a:	fa93 f3a3 	rbit	r3, r3
 8000d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d52:	fab3 f383 	clz	r3, r3
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d105      	bne.n	8000d72 <HAL_ADC_ConfigChannel+0x342>
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	0e9b      	lsrs	r3, r3, #26
 8000d6c:	f003 031f 	and.w	r3, r3, #31
 8000d70:	e00a      	b.n	8000d88 <HAL_ADC_ConfigChannel+0x358>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d7a:	fa93 f3a3 	rbit	r3, r3
 8000d7e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d82:	fab3 f383 	clz	r3, r3
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d106      	bne.n	8000d9a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2200      	movs	r2, #0
 8000d92:	2103      	movs	r1, #3
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fb3b 	bl	8000410 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fc68 	bl	8000674 <LL_ADC_IsEnabled>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 810c 	bne.w	8000fc4 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	6819      	ldr	r1, [r3, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	461a      	mov	r2, r3
 8000dba:	f7ff fbd5 	bl	8000568 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	4aab      	ldr	r2, [pc, #684]	; (8001070 <HAL_ADC_ConfigChannel+0x640>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	f040 80fd 	bne.w	8000fc4 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10b      	bne.n	8000df2 <HAL_ADC_ConfigChannel+0x3c2>
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	0e9b      	lsrs	r3, r3, #26
 8000de0:	3301      	adds	r3, #1
 8000de2:	f003 031f 	and.w	r3, r3, #31
 8000de6:	2b09      	cmp	r3, #9
 8000de8:	bf94      	ite	ls
 8000dea:	2301      	movls	r3, #1
 8000dec:	2300      	movhi	r3, #0
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	e012      	b.n	8000e18 <HAL_ADC_ConfigChannel+0x3e8>
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dfa:	fa93 f3a3 	rbit	r3, r3
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e02:	fab3 f383 	clz	r3, r3
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	3301      	adds	r3, #1
 8000e0a:	f003 031f 	and.w	r3, r3, #31
 8000e0e:	2b09      	cmp	r3, #9
 8000e10:	bf94      	ite	ls
 8000e12:	2301      	movls	r3, #1
 8000e14:	2300      	movhi	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d064      	beq.n	8000ee6 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d107      	bne.n	8000e38 <HAL_ADC_ConfigChannel+0x408>
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	0e9b      	lsrs	r3, r3, #26
 8000e2e:	3301      	adds	r3, #1
 8000e30:	069b      	lsls	r3, r3, #26
 8000e32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e36:	e00e      	b.n	8000e56 <HAL_ADC_ConfigChannel+0x426>
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e40:	fa93 f3a3 	rbit	r3, r3
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e48:	fab3 f383 	clz	r3, r3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	3301      	adds	r3, #1
 8000e50:	069b      	lsls	r3, r3, #26
 8000e52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d109      	bne.n	8000e76 <HAL_ADC_ConfigChannel+0x446>
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	0e9b      	lsrs	r3, r3, #26
 8000e68:	3301      	adds	r3, #1
 8000e6a:	f003 031f 	and.w	r3, r3, #31
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	e010      	b.n	8000e98 <HAL_ADC_ConfigChannel+0x468>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7e:	fa93 f3a3 	rbit	r3, r3
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e86:	fab3 f383 	clz	r3, r3
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	f003 031f 	and.w	r3, r3, #31
 8000e92:	2101      	movs	r1, #1
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	ea42 0103 	orr.w	r1, r2, r3
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10a      	bne.n	8000ebe <HAL_ADC_ConfigChannel+0x48e>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	0e9b      	lsrs	r3, r3, #26
 8000eae:	3301      	adds	r3, #1
 8000eb0:	f003 021f 	and.w	r2, r3, #31
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	051b      	lsls	r3, r3, #20
 8000ebc:	e011      	b.n	8000ee2 <HAL_ADC_ConfigChannel+0x4b2>
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	fab3 f383 	clz	r3, r3
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f003 021f 	and.w	r2, r3, #31
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000ee2:	430b      	orrs	r3, r1
 8000ee4:	e069      	b.n	8000fba <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d107      	bne.n	8000f02 <HAL_ADC_ConfigChannel+0x4d2>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	0e9b      	lsrs	r3, r3, #26
 8000ef8:	3301      	adds	r3, #1
 8000efa:	069b      	lsls	r3, r3, #26
 8000efc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f00:	e00e      	b.n	8000f20 <HAL_ADC_ConfigChannel+0x4f0>
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f08:	6a3b      	ldr	r3, [r7, #32]
 8000f0a:	fa93 f3a3 	rbit	r3, r3
 8000f0e:	61fb      	str	r3, [r7, #28]
  return result;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	fab3 f383 	clz	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	3301      	adds	r3, #1
 8000f1a:	069b      	lsls	r3, r3, #26
 8000f1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d109      	bne.n	8000f40 <HAL_ADC_ConfigChannel+0x510>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	0e9b      	lsrs	r3, r3, #26
 8000f32:	3301      	adds	r3, #1
 8000f34:	f003 031f 	and.w	r3, r3, #31
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	e010      	b.n	8000f62 <HAL_ADC_ConfigChannel+0x532>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	fa93 f3a3 	rbit	r3, r3
 8000f4c:	617b      	str	r3, [r7, #20]
  return result;
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	fab3 f383 	clz	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	3301      	adds	r3, #1
 8000f58:	f003 031f 	and.w	r3, r3, #31
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	ea42 0103 	orr.w	r1, r2, r3
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10d      	bne.n	8000f8e <HAL_ADC_ConfigChannel+0x55e>
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	0e9b      	lsrs	r3, r3, #26
 8000f78:	3301      	adds	r3, #1
 8000f7a:	f003 021f 	and.w	r2, r3, #31
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	3b1e      	subs	r3, #30
 8000f86:	051b      	lsls	r3, r3, #20
 8000f88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f8c:	e014      	b.n	8000fb8 <HAL_ADC_ConfigChannel+0x588>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	60fb      	str	r3, [r7, #12]
  return result;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	fab3 f383 	clz	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	f003 021f 	and.w	r2, r3, #31
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	3b1e      	subs	r3, #30
 8000fb2:	051b      	lsls	r3, r3, #20
 8000fb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	6892      	ldr	r2, [r2, #8]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f7ff faaa 	bl	8000518 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <HAL_ADC_ConfigChannel+0x644>)
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 8083 	beq.w	80010d8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000fd2:	4829      	ldr	r0, [pc, #164]	; (8001078 <HAL_ADC_ConfigChannel+0x648>)
 8000fd4:	f7ff f9d8 	bl	8000388 <LL_ADC_GetCommonPathInternalCh>
 8000fd8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a26      	ldr	r2, [pc, #152]	; (800107c <HAL_ADC_ConfigChannel+0x64c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d004      	beq.n	8000ff0 <HAL_ADC_ConfigChannel+0x5c0>
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a25      	ldr	r2, [pc, #148]	; (8001080 <HAL_ADC_ConfigChannel+0x650>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d126      	bne.n	800103e <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ff4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d120      	bne.n	800103e <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001004:	d168      	bne.n	80010d8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001006:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800100a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800100e:	4619      	mov	r1, r3
 8001010:	4819      	ldr	r0, [pc, #100]	; (8001078 <HAL_ADC_ConfigChannel+0x648>)
 8001012:	f7ff f9a6 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <HAL_ADC_ConfigChannel+0x654>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	099b      	lsrs	r3, r3, #6
 800101c:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <HAL_ADC_ConfigChannel+0x658>)
 800101e:	fba2 2303 	umull	r2, r3, r2, r3
 8001022:	099a      	lsrs	r2, r3, #6
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800102e:	e002      	b.n	8001036 <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	3b01      	subs	r3, #1
 8001034:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1f9      	bne.n	8001030 <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800103c:	e04c      	b.n	80010d8 <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <HAL_ADC_ConfigChannel+0x65c>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d125      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x664>
 8001048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800104c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d11f      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_ADC_ConfigChannel+0x660>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d03c      	beq.n	80010d8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800105e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001066:	4619      	mov	r1, r3
 8001068:	4803      	ldr	r0, [pc, #12]	; (8001078 <HAL_ADC_ConfigChannel+0x648>)
 800106a:	f7ff f97a 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800106e:	e033      	b.n	80010d8 <HAL_ADC_ConfigChannel+0x6a8>
 8001070:	407f0000 	.word	0x407f0000
 8001074:	80080000 	.word	0x80080000
 8001078:	50000300 	.word	0x50000300
 800107c:	c3210000 	.word	0xc3210000
 8001080:	90c00010 	.word	0x90c00010
 8001084:	20000008 	.word	0x20000008
 8001088:	053e2d63 	.word	0x053e2d63
 800108c:	c7520000 	.word	0xc7520000
 8001090:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <HAL_ADC_ConfigChannel+0x6bc>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d11c      	bne.n	80010d8 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800109e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d116      	bne.n	80010d8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <HAL_ADC_ConfigChannel+0x6c0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d011      	beq.n	80010d8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010bc:	4619      	mov	r1, r3
 80010be:	480d      	ldr	r0, [pc, #52]	; (80010f4 <HAL_ADC_ConfigChannel+0x6c4>)
 80010c0:	f7ff f94f 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
 80010c4:	e008      	b.n	80010d8 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ca:	f043 0220 	orr.w	r2, r3, #32
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80010e0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3798      	adds	r7, #152	; 0x98
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	cb840000 	.word	0xcb840000
 80010f0:	50000100 	.word	0x50000100
 80010f4:	50000300 	.word	0x50000300

080010f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fac8 	bl	800069a <LL_ADC_IsDisableOngoing>
 800110a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff faaf 	bl	8000674 <LL_ADC_IsEnabled>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d040      	beq.n	800119e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d13d      	bne.n	800119e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 030d 	and.w	r3, r3, #13
 800112c:	2b01      	cmp	r3, #1
 800112e:	d10c      	bne.n	800114a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fa89 	bl	800064c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2203      	movs	r2, #3
 8001140:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001142:	f7ff f8cd 	bl	80002e0 <HAL_GetTick>
 8001146:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001148:	e022      	b.n	8001190 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114e:	f043 0210 	orr.w	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115a:	f043 0201 	orr.w	r2, r3, #1
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e01c      	b.n	80011a0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001166:	f7ff f8bb 	bl	80002e0 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d90d      	bls.n	8001190 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001178:	f043 0210 	orr.w	r2, r3, #16
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e007      	b.n	80011a0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1e3      	bne.n	8001166 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <LL_ADC_IsEnabled>:
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d101      	bne.n	80011c0 <LL_ADC_IsEnabled+0x18>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <LL_ADC_IsEnabled+0x1a>
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_ADC_StartCalibration>:
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80011e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80011ea:	4313      	orrs	r3, r2
 80011ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	609a      	str	r2, [r3, #8]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_ADC_IsCalibrationOnGoing>:
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001214:	d101      	bne.n	800121a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_ADC_REG_IsConversionOngoing>:
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b04      	cmp	r3, #4
 800123a:	d101      	bne.n	8001240 <LL_ADC_REG_IsConversionOngoing+0x18>
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001264:	2b01      	cmp	r3, #1
 8001266:	d101      	bne.n	800126c <HAL_ADCEx_Calibration_Start+0x1c>
 8001268:	2302      	movs	r3, #2
 800126a:	e04d      	b.n	8001308 <HAL_ADCEx_Calibration_Start+0xb8>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff3f 	bl	80010f8 <ADC_Disable>
 800127a:	4603      	mov	r3, r0
 800127c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d136      	bne.n	80012f2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001288:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800128c:	f023 0302 	bic.w	r3, r3, #2
 8001290:	f043 0202 	orr.w	r2, r3, #2
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6839      	ldr	r1, [r7, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff95 	bl	80011ce <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80012a4:	e014      	b.n	80012d0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	3301      	adds	r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4a18      	ldr	r2, [pc, #96]	; (8001310 <HAL_ADCEx_Calibration_Start+0xc0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d90d      	bls.n	80012d0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b8:	f023 0312 	bic.w	r3, r3, #18
 80012bc:	f043 0210 	orr.w	r2, r3, #16
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e01b      	b.n	8001308 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff93 	bl	8001200 <LL_ADC_IsCalibrationOnGoing>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1e2      	bne.n	80012a6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e4:	f023 0303 	bic.w	r3, r3, #3
 80012e8:	f043 0201 	orr.w	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80012f0:	e005      	b.n	80012fe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f6:	f043 0210 	orr.w	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	0004de01 	.word	0x0004de01

08001314 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b0a1      	sub	sp, #132	; 0x84
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800132e:	2302      	movs	r3, #2
 8001330:	e087      	b.n	8001442 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001342:	d102      	bne.n	800134a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001344:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	e001      	b.n	800134e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10b      	bne.n	800136c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001358:	f043 0220 	orr.w	r2, r3, #32
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e06a      	b.n	8001442 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff5a 	bl	8001228 <LL_ADC_REG_IsConversionOngoing>
 8001374:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff54 	bl	8001228 <LL_ADC_REG_IsConversionOngoing>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d14c      	bne.n	8001420 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001388:	2b00      	cmp	r3, #0
 800138a:	d149      	bne.n	8001420 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800138c:	4b30      	ldr	r3, [pc, #192]	; (8001450 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800138e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d028      	beq.n	80013ea <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	6859      	ldr	r1, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013aa:	035b      	lsls	r3, r3, #13
 80013ac:	430b      	orrs	r3, r1
 80013ae:	431a      	orrs	r2, r3
 80013b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80013b8:	f7ff fef6 	bl	80011a8 <LL_ADC_IsEnabled>
 80013bc:	4604      	mov	r4, r0
 80013be:	4823      	ldr	r0, [pc, #140]	; (800144c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80013c0:	f7ff fef2 	bl	80011a8 <LL_ADC_IsEnabled>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4323      	orrs	r3, r4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d133      	bne.n	8001434 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80013cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80013d4:	f023 030f 	bic.w	r3, r3, #15
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	6811      	ldr	r1, [r2, #0]
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	6892      	ldr	r2, [r2, #8]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	431a      	orrs	r2, r3
 80013e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013e6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80013e8:	e024      	b.n	8001434 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80013ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013f6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80013fa:	f7ff fed5 	bl	80011a8 <LL_ADC_IsEnabled>
 80013fe:	4604      	mov	r4, r0
 8001400:	4812      	ldr	r0, [pc, #72]	; (800144c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001402:	f7ff fed1 	bl	80011a8 <LL_ADC_IsEnabled>
 8001406:	4603      	mov	r3, r0
 8001408:	4323      	orrs	r3, r4
 800140a:	2b00      	cmp	r3, #0
 800140c:	d112      	bne.n	8001434 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800140e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001416:	f023 030f 	bic.w	r3, r3, #15
 800141a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800141c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800141e:	e009      	b.n	8001434 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001424:	f043 0220 	orr.w	r2, r3, #32
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001432:	e000      	b.n	8001436 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001434:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800143e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001442:	4618      	mov	r0, r3
 8001444:	3784      	adds	r7, #132	; 0x84
 8001446:	46bd      	mov	sp, r7
 8001448:	bd90      	pop	{r4, r7, pc}
 800144a:	bf00      	nop
 800144c:	50000100 	.word	0x50000100
 8001450:	50000300 	.word	0x50000300

08001454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001470:	4013      	ands	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800147c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60d3      	str	r3, [r2, #12]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <__NVIC_GetPriorityGrouping+0x18>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 0307 	and.w	r3, r3, #7
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db0b      	blt.n	80014e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f003 021f 	and.w	r2, r3, #31
 80014d0:	4907      	ldr	r1, [pc, #28]	; (80014f0 <__NVIC_EnableIRQ+0x38>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	2001      	movs	r0, #1
 80014da:	fa00 f202 	lsl.w	r2, r0, r2
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000e100 	.word	0xe000e100

080014f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db0a      	blt.n	800151e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	490c      	ldr	r1, [pc, #48]	; (8001540 <__NVIC_SetPriority+0x4c>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	440b      	add	r3, r1
 8001518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800151c:	e00a      	b.n	8001534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4908      	ldr	r1, [pc, #32]	; (8001544 <__NVIC_SetPriority+0x50>)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	3b04      	subs	r3, #4
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	440b      	add	r3, r1
 8001532:	761a      	strb	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f1c3 0307 	rsb	r3, r3, #7
 8001562:	2b04      	cmp	r3, #4
 8001564:	bf28      	it	cs
 8001566:	2304      	movcs	r3, #4
 8001568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3304      	adds	r3, #4
 800156e:	2b06      	cmp	r3, #6
 8001570:	d902      	bls.n	8001578 <NVIC_EncodePriority+0x30>
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3b03      	subs	r3, #3
 8001576:	e000      	b.n	800157a <NVIC_EncodePriority+0x32>
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	f04f 32ff 	mov.w	r2, #4294967295
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	401a      	ands	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	43d9      	mvns	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	4313      	orrs	r3, r2
         );
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	; 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c0:	d301      	bcc.n	80015c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00f      	b.n	80015e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <SysTick_Config+0x40>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ce:	210f      	movs	r1, #15
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f7ff ff8e 	bl	80014f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <SysTick_Config+0x40>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <SysTick_Config+0x40>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	e000e010 	.word	0xe000e010

080015f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff29 	bl	8001454 <__NVIC_SetPriorityGrouping>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001618:	f7ff ff40 	bl	800149c <__NVIC_GetPriorityGrouping>
 800161c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff ff90 	bl	8001548 <NVIC_EncodePriority>
 8001628:	4602      	mov	r2, r0
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff5f 	bl	80014f4 <__NVIC_SetPriority>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff33 	bl	80014b8 <__NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffa4 	bl	80015b0 <SysTick_Config>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e147      	b.n	8001916 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d106      	bne.n	80016a0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f002 fde8 	bl	8004270 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	699a      	ldr	r2, [r3, #24]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0210 	bic.w	r2, r2, #16
 80016ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b0:	f7fe fe16 	bl	80002e0 <HAL_GetTick>
 80016b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016b6:	e012      	b.n	80016de <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016b8:	f7fe fe12 	bl	80002e0 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b0a      	cmp	r3, #10
 80016c4:	d90b      	bls.n	80016de <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ca:	f043 0201 	orr.w	r2, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2203      	movs	r2, #3
 80016d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e11b      	b.n	8001916 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d0e5      	beq.n	80016b8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699a      	ldr	r2, [r3, #24]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016fc:	f7fe fdf0 	bl	80002e0 <HAL_GetTick>
 8001700:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001702:	e012      	b.n	800172a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001704:	f7fe fdec 	bl	80002e0 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b0a      	cmp	r3, #10
 8001710:	d90b      	bls.n	800172a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2203      	movs	r2, #3
 8001722:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e0f5      	b.n	8001916 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0e5      	beq.n	8001704 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	699a      	ldr	r2, [r3, #24]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0202 	orr.w	r2, r2, #2
 8001746:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a74      	ldr	r2, [pc, #464]	; (8001920 <HAL_FDCAN_Init+0x2ac>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d103      	bne.n	800175a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001752:	4a74      	ldr	r2, [pc, #464]	; (8001924 <HAL_FDCAN_Init+0x2b0>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7c1b      	ldrb	r3, [r3, #16]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d108      	bne.n	8001774 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	699a      	ldr	r2, [r3, #24]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001770:	619a      	str	r2, [r3, #24]
 8001772:	e007      	b.n	8001784 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	699a      	ldr	r2, [r3, #24]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001782:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7c5b      	ldrb	r3, [r3, #17]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d108      	bne.n	800179e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800179a:	619a      	str	r2, [r3, #24]
 800179c:	e007      	b.n	80017ae <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	699a      	ldr	r2, [r3, #24]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7c9b      	ldrb	r3, [r3, #18]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d108      	bne.n	80017c8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	699a      	ldr	r2, [r3, #24]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017c4:	619a      	str	r2, [r3, #24]
 80017c6:	e007      	b.n	80017d8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	699a      	ldr	r2, [r3, #24]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017d6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	699a      	ldr	r2, [r3, #24]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80017fc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0210 	bic.w	r2, r2, #16
 800180c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d108      	bne.n	8001828 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699a      	ldr	r2, [r3, #24]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0204 	orr.w	r2, r2, #4
 8001824:	619a      	str	r2, [r3, #24]
 8001826:	e02c      	b.n	8001882 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d028      	beq.n	8001882 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d01c      	beq.n	8001872 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001846:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0210 	orr.w	r2, r2, #16
 8001856:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b03      	cmp	r3, #3
 800185e:	d110      	bne.n	8001882 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699a      	ldr	r2, [r3, #24]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0220 	orr.w	r2, r2, #32
 800186e:	619a      	str	r2, [r3, #24]
 8001870:	e007      	b.n	8001882 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	699a      	ldr	r2, [r3, #24]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 0220 	orr.w	r2, r2, #32
 8001880:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	3b01      	subs	r3, #1
 8001888:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	3b01      	subs	r3, #1
 8001890:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001892:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800189a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80018aa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018ac:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018b6:	d115      	bne.n	80018e4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	3b01      	subs	r3, #1
 80018c4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018c6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	3b01      	subs	r3, #1
 80018ce:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80018d0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	3b01      	subs	r3, #1
 80018da:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80018e0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018e2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 fbea 	bl	80020d4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40006400 	.word	0x40006400
 8001924:	40006500 	.word	0x40006500

08001928 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001938:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d002      	beq.n	8001946 <HAL_FDCAN_ConfigFilter+0x1e>
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d13d      	bne.n	80019c2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d119      	bne.n	8001982 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800195a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001962:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e01d      	b.n	80019be <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	075a      	lsls	r2, r3, #29
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	079a      	lsls	r2, r3, #30
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	4313      	orrs	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4413      	add	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	3304      	adds	r3, #4
 80019b6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e006      	b.n	80019d0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c6:	f043 0202 	orr.w	r2, r3, #2
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
  }
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d116      	bne.n	8001a24 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019fe:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	011a      	lsls	r2, r3, #4
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	431a      	orrs	r2, r3
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                         (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                                         (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                                         (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	e006      	b.n	8001a32 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a28:	f043 0204 	orr.w	r2, r3, #4
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
  }
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d11f      	bne.n	8001a96 <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2b40      	cmp	r3, #64	; 0x40
 8001a5a:	d10d      	bne.n	8001a78 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a64:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	025a      	lsls	r2, r3, #9
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001a76:	e00c      	b.n	8001a92 <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a80:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	021a      	lsls	r2, r3, #8
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Return function status */
    return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e006      	b.n	8001aa4 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9a:	f043 0204 	orr.w	r2, r3, #4
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
  }
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d110      	bne.n	8001ae6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e006      	b.n	8001af4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aea:	f043 0204 	orr.w	r2, r3, #4
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
  }
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d12c      	bne.n	8001b72 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e023      	b.n	8001b80 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b40:	0c1b      	lsrs	r3, r3, #16
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fb16 	bl	8002180 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b60:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001b64:	2201      	movs	r2, #1
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e006      	b.n	8001b80 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b76:	f043 0208 	orr.w	r2, r3, #8
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
  }
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001bbe:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d003      	beq.n	8001bce <HAL_FDCAN_ActivateNotification+0x22>
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	f040 80c8 	bne.w	8001d5e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d004      	beq.n	8001bea <HAL_FDCAN_ActivateNotification+0x3e>
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d03b      	beq.n	8001c62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d004      	beq.n	8001bfe <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d031      	beq.n	8001c62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d004      	beq.n	8001c12 <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d027      	beq.n	8001c62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d004      	beq.n	8001c26 <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01d      	beq.n	8001c62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d013      	beq.n	8001c62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d004      	beq.n	8001c4e <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00c      	beq.n	8001c72 <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d107      	bne.n	8001c72 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0201 	orr.w	r2, r2, #1
 8001c70:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <HAL_FDCAN_ActivateNotification+0xda>
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d13b      	bne.n	8001cfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d131      	bne.n	8001cfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d004      	beq.n	8001cae <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d127      	bne.n	8001cfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d11d      	bne.n	8001cfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d004      	beq.n	8001cd6 <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d113      	bne.n	8001cfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d004      	beq.n	8001cea <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00c      	beq.n	8001d0e <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0202 	orr.w	r2, r2, #2
 8001d0c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d009      	beq.n	8001d2c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d009      	beq.n	8001d4a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e006      	b.n	8001d6c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d62:	f043 0202 	orr.w	r2, r3, #2
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
  }
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d86:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d94:	4013      	ands	r3, r2
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	6a3a      	ldr	r2, [r7, #32]
 8001dac:	4013      	ands	r3, r2
 8001dae:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dba:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dce:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001dd2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dea:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4013      	ands	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00d      	beq.n	8001e22 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2240      	movs	r2, #64	; 0x40
 8001e1a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f939 	bl	8002094 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d014      	beq.n	8001e68 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e46:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e5e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001e60:	6939      	ldr	r1, [r7, #16]
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f8f7 	bl	8002056 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e74:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001e76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f8b6 	bl	8001fea <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6a3a      	ldr	r2, [r7, #32]
 8001e8a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001e8c:	6a39      	ldr	r1, [r7, #32]
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f8b6 	bl	8002000 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001ea2:	69f9      	ldr	r1, [r7, #28]
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f8b6 	bl	8002016 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00e      	beq.n	8001ed6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ece:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f8ab 	bl	800202c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01a      	beq.n	8001f1a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d013      	beq.n	8001f1a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001efa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4013      	ands	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001f12:	68f9      	ldr	r1, [r7, #12]
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f893 	bl	8002040 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00e      	beq.n	8001f46 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f893 	bl	800206c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00e      	beq.n	8001f72 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d007      	beq.n	8001f72 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f6a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f887 	bl	8002080 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d011      	beq.n	8001fa4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001fb2:	6979      	ldr	r1, [r7, #20]
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f881 	bl	80020bc <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d009      	beq.n	8001fd4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f863 	bl	80020a8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	3728      	adds	r7, #40	; 0x28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80020de:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ee:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f6:	041a      	lsls	r2, r3, #16
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002114:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211c:	061a      	lsls	r2, r3, #24
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	e005      	b.n	8002162 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3304      	adds	r3, #4
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	429a      	cmp	r2, r3
 800216c:	d3f3      	bcc.n	8002156 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	4000a400 	.word	0x4000a400

08002180 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10a      	bne.n	80021ac <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800219e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	e00a      	b.n	80021c2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80021b4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80021ba:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80021bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021c0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80021cc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80021d2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80021d8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	440b      	add	r3, r1
 80021f2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	3304      	adds	r3, #4
 80021fe:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	3304      	adds	r3, #4
 800220a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	e020      	b.n	8002254 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3303      	adds	r3, #3
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3302      	adds	r3, #2
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	440b      	add	r3, r1
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800222a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3301      	adds	r3, #1
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	440b      	add	r3, r1
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002238:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	440a      	add	r2, r1
 8002240:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002242:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	3304      	adds	r3, #4
 800224c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3304      	adds	r3, #4
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0c1b      	lsrs	r3, r3, #16
 800225a:	4a06      	ldr	r2, [pc, #24]	; (8002274 <FDCAN_CopyMessageToRAM+0xf4>)
 800225c:	5cd3      	ldrb	r3, [r2, r3]
 800225e:	461a      	mov	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	4293      	cmp	r3, r2
 8002264:	d3d5      	bcc.n	8002212 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8002266:	bf00      	nop
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	080044c8 	.word	0x080044c8

08002278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002286:	e15a      	b.n	800253e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	2101      	movs	r1, #1
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	4013      	ands	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 814c 	beq.w	8002538 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x38>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b12      	cmp	r3, #18
 80022ae:	d123      	bne.n	80022f8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	08da      	lsrs	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	6939      	ldr	r1, [r7, #16]
 80022f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0203 	and.w	r2, r3, #3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d00b      	beq.n	800234c <HAL_GPIO_Init+0xd4>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d007      	beq.n	800234c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002340:	2b11      	cmp	r3, #17
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b12      	cmp	r3, #18
 800234a:	d130      	bne.n	80023ae <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002382:	2201      	movs	r2, #1
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f003 0201 	and.w	r2, r3, #1
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	2203      	movs	r2, #3
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 80a6 	beq.w	8002538 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ec:	4b5b      	ldr	r3, [pc, #364]	; (800255c <HAL_GPIO_Init+0x2e4>)
 80023ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f0:	4a5a      	ldr	r2, [pc, #360]	; (800255c <HAL_GPIO_Init+0x2e4>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6613      	str	r3, [r2, #96]	; 0x60
 80023f8:	4b58      	ldr	r3, [pc, #352]	; (800255c <HAL_GPIO_Init+0x2e4>)
 80023fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002404:	4a56      	ldr	r2, [pc, #344]	; (8002560 <HAL_GPIO_Init+0x2e8>)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	220f      	movs	r2, #15
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800242e:	d01f      	beq.n	8002470 <HAL_GPIO_Init+0x1f8>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a4c      	ldr	r2, [pc, #304]	; (8002564 <HAL_GPIO_Init+0x2ec>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d019      	beq.n	800246c <HAL_GPIO_Init+0x1f4>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a4b      	ldr	r2, [pc, #300]	; (8002568 <HAL_GPIO_Init+0x2f0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d013      	beq.n	8002468 <HAL_GPIO_Init+0x1f0>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a4a      	ldr	r2, [pc, #296]	; (800256c <HAL_GPIO_Init+0x2f4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00d      	beq.n	8002464 <HAL_GPIO_Init+0x1ec>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a49      	ldr	r2, [pc, #292]	; (8002570 <HAL_GPIO_Init+0x2f8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d007      	beq.n	8002460 <HAL_GPIO_Init+0x1e8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a48      	ldr	r2, [pc, #288]	; (8002574 <HAL_GPIO_Init+0x2fc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d101      	bne.n	800245c <HAL_GPIO_Init+0x1e4>
 8002458:	2305      	movs	r3, #5
 800245a:	e00a      	b.n	8002472 <HAL_GPIO_Init+0x1fa>
 800245c:	2306      	movs	r3, #6
 800245e:	e008      	b.n	8002472 <HAL_GPIO_Init+0x1fa>
 8002460:	2304      	movs	r3, #4
 8002462:	e006      	b.n	8002472 <HAL_GPIO_Init+0x1fa>
 8002464:	2303      	movs	r3, #3
 8002466:	e004      	b.n	8002472 <HAL_GPIO_Init+0x1fa>
 8002468:	2302      	movs	r3, #2
 800246a:	e002      	b.n	8002472 <HAL_GPIO_Init+0x1fa>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_GPIO_Init+0x1fa>
 8002470:	2300      	movs	r3, #0
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	f002 0203 	and.w	r2, r2, #3
 8002478:	0092      	lsls	r2, r2, #2
 800247a:	4093      	lsls	r3, r2
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002482:	4937      	ldr	r1, [pc, #220]	; (8002560 <HAL_GPIO_Init+0x2e8>)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002490:	4b39      	ldr	r3, [pc, #228]	; (8002578 <HAL_GPIO_Init+0x300>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024b4:	4a30      	ldr	r2, [pc, #192]	; (8002578 <HAL_GPIO_Init+0x300>)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024ba:	4b2f      	ldr	r3, [pc, #188]	; (8002578 <HAL_GPIO_Init+0x300>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024de:	4a26      	ldr	r2, [pc, #152]	; (8002578 <HAL_GPIO_Init+0x300>)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024e4:	4b24      	ldr	r3, [pc, #144]	; (8002578 <HAL_GPIO_Init+0x300>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002508:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <HAL_GPIO_Init+0x300>)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800250e:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <HAL_GPIO_Init+0x300>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002532:	4a11      	ldr	r2, [pc, #68]	; (8002578 <HAL_GPIO_Init+0x300>)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3301      	adds	r3, #1
 800253c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	f47f ae9d 	bne.w	8002288 <HAL_GPIO_Init+0x10>
  }
}
 800254e:	bf00      	nop
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	40010000 	.word	0x40010000
 8002564:	48000400 	.word	0x48000400
 8002568:	48000800 	.word	0x48000800
 800256c:	48000c00 	.word	0x48000c00
 8002570:	48001000 	.word	0x48001000
 8002574:	48001400 	.word	0x48001400
 8002578:	40010400 	.word	0x40010400

0800257c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
 8002588:	4613      	mov	r3, r2
 800258a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	887b      	ldrh	r3, [r7, #2]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025c4:	887a      	ldrh	r2, [r7, #2]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80025ca:	e002      	b.n	80025d2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025cc:	887a      	ldrh	r2, [r7, #2]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	619a      	str	r2, [r3, #24]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d141      	bne.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025ee:	4b4b      	ldr	r3, [pc, #300]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fa:	d131      	bne.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025fc:	4b47      	ldr	r3, [pc, #284]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002602:	4a46      	ldr	r2, [pc, #280]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002608:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800260c:	4b43      	ldr	r3, [pc, #268]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002614:	4a41      	ldr	r2, [pc, #260]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800261c:	4b40      	ldr	r3, [pc, #256]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2232      	movs	r2, #50	; 0x32
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	4a3f      	ldr	r2, [pc, #252]	; (8002724 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	0c9b      	lsrs	r3, r3, #18
 800262e:	3301      	adds	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002632:	e002      	b.n	800263a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3b01      	subs	r3, #1
 8002638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800263a:	4b38      	ldr	r3, [pc, #224]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002646:	d102      	bne.n	800264e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f2      	bne.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800264e:	4b33      	ldr	r3, [pc, #204]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265a:	d158      	bne.n	800270e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e057      	b.n	8002710 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002660:	4b2e      	ldr	r3, [pc, #184]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002666:	4a2d      	ldr	r2, [pc, #180]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800266c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002670:	e04d      	b.n	800270e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002678:	d141      	bne.n	80026fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800267a:	4b28      	ldr	r3, [pc, #160]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002686:	d131      	bne.n	80026ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002688:	4b24      	ldr	r3, [pc, #144]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800268e:	4a23      	ldr	r2, [pc, #140]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002694:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002698:	4b20      	ldr	r3, [pc, #128]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026a0:	4a1e      	ldr	r2, [pc, #120]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2232      	movs	r2, #50	; 0x32
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	0c9b      	lsrs	r3, r3, #18
 80026ba:	3301      	adds	r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026be:	e002      	b.n	80026c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d2:	d102      	bne.n	80026da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f2      	bne.n	80026c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e6:	d112      	bne.n	800270e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e011      	b.n	8002710 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026fc:	e007      	b.n	800270e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026fe:	4b07      	ldr	r3, [pc, #28]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002708:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800270c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40007000 	.word	0x40007000
 8002720:	20000008 	.word	0x20000008
 8002724:	431bde83 	.word	0x431bde83

08002728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e308      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d075      	beq.n	8002832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002746:	4ba3      	ldr	r3, [pc, #652]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002750:	4ba0      	ldr	r3, [pc, #640]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	2b0c      	cmp	r3, #12
 800275e:	d102      	bne.n	8002766 <HAL_RCC_OscConfig+0x3e>
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d002      	beq.n	800276c <HAL_RCC_OscConfig+0x44>
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b08      	cmp	r3, #8
 800276a:	d10b      	bne.n	8002784 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	4b99      	ldr	r3, [pc, #612]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d05b      	beq.n	8002830 <HAL_RCC_OscConfig+0x108>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d157      	bne.n	8002830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e2e3      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d106      	bne.n	800279c <HAL_RCC_OscConfig+0x74>
 800278e:	4b91      	ldr	r3, [pc, #580]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a90      	ldr	r2, [pc, #576]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e01d      	b.n	80027d8 <HAL_RCC_OscConfig+0xb0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x98>
 80027a6:	4b8b      	ldr	r3, [pc, #556]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a8a      	ldr	r2, [pc, #552]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b88      	ldr	r3, [pc, #544]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a87      	ldr	r2, [pc, #540]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0xb0>
 80027c0:	4b84      	ldr	r3, [pc, #528]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a83      	ldr	r2, [pc, #524]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b81      	ldr	r3, [pc, #516]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a80      	ldr	r2, [pc, #512]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fd fd7e 	bl	80002e0 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fd fd7a 	bl	80002e0 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e2a8      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027fa:	4b76      	ldr	r3, [pc, #472]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0xc0>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fd fd6a 	bl	80002e0 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002810:	f7fd fd66 	bl	80002e0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	; 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e294      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002822:	4b6c      	ldr	r3, [pc, #432]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0xe8>
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d075      	beq.n	800292a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800283e:	4b65      	ldr	r3, [pc, #404]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002848:	4b62      	ldr	r3, [pc, #392]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b0c      	cmp	r3, #12
 8002856:	d102      	bne.n	800285e <HAL_RCC_OscConfig+0x136>
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d002      	beq.n	8002864 <HAL_RCC_OscConfig+0x13c>
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b04      	cmp	r3, #4
 8002862:	d11f      	bne.n	80028a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002864:	4b5b      	ldr	r3, [pc, #364]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_OscConfig+0x154>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e267      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	4b55      	ldr	r3, [pc, #340]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	4952      	ldr	r1, [pc, #328]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002890:	4b51      	ldr	r3, [pc, #324]	; (80029d8 <HAL_RCC_OscConfig+0x2b0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7fd fcd7 	bl	8000248 <HAL_InitTick>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d043      	beq.n	8002928 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e253      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d023      	beq.n	80028f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ac:	4b49      	ldr	r3, [pc, #292]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a48      	ldr	r2, [pc, #288]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fd fd12 	bl	80002e0 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c0:	f7fd fd0e 	bl	80002e0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e23c      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028d2:	4b40      	ldr	r3, [pc, #256]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	061b      	lsls	r3, r3, #24
 80028ec:	4939      	ldr	r1, [pc, #228]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
 80028f2:	e01a      	b.n	800292a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f4:	4b37      	ldr	r3, [pc, #220]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a36      	ldr	r2, [pc, #216]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80028fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fd fcee 	bl	80002e0 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002908:	f7fd fcea 	bl	80002e0 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e218      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800291a:	4b2e      	ldr	r3, [pc, #184]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x1e0>
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002928:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d03c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d01c      	beq.n	8002978 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293e:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002944:	4a23      	ldr	r2, [pc, #140]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294e:	f7fd fcc7 	bl	80002e0 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002956:	f7fd fcc3 	bl	80002e0 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e1f1      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002968:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800296a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0ef      	beq.n	8002956 <HAL_RCC_OscConfig+0x22e>
 8002976:	e01b      	b.n	80029b0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002978:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 800297a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800297e:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fd fcaa 	bl	80002e0 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002990:	f7fd fca6 	bl	80002e0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1d4      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1ef      	bne.n	8002990 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80ab 	beq.w	8002b14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_RCC_OscConfig+0x2b4>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e005      	b.n	80029de <HAL_RCC_OscConfig+0x2b6>
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	20000000 	.word	0x20000000
 80029dc:	2300      	movs	r3, #0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00d      	beq.n	80029fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	4baf      	ldr	r3, [pc, #700]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	4aae      	ldr	r2, [pc, #696]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 80029e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ec:	6593      	str	r3, [r2, #88]	; 0x58
 80029ee:	4bac      	ldr	r3, [pc, #688]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029fa:	2301      	movs	r3, #1
 80029fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fe:	4ba9      	ldr	r3, [pc, #676]	; (8002ca4 <HAL_RCC_OscConfig+0x57c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d118      	bne.n	8002a3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a0a:	4ba6      	ldr	r3, [pc, #664]	; (8002ca4 <HAL_RCC_OscConfig+0x57c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4aa5      	ldr	r2, [pc, #660]	; (8002ca4 <HAL_RCC_OscConfig+0x57c>)
 8002a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a16:	f7fd fc63 	bl	80002e0 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1e:	f7fd fc5f 	bl	80002e0 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e18d      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a30:	4b9c      	ldr	r3, [pc, #624]	; (8002ca4 <HAL_RCC_OscConfig+0x57c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d108      	bne.n	8002a56 <HAL_RCC_OscConfig+0x32e>
 8002a44:	4b96      	ldr	r3, [pc, #600]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	4a95      	ldr	r2, [pc, #596]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a54:	e024      	b.n	8002aa0 <HAL_RCC_OscConfig+0x378>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d110      	bne.n	8002a80 <HAL_RCC_OscConfig+0x358>
 8002a5e:	4b90      	ldr	r3, [pc, #576]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a64:	4a8e      	ldr	r2, [pc, #568]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002a66:	f043 0304 	orr.w	r3, r3, #4
 8002a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a6e:	4b8c      	ldr	r3, [pc, #560]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a74:	4a8a      	ldr	r2, [pc, #552]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a7e:	e00f      	b.n	8002aa0 <HAL_RCC_OscConfig+0x378>
 8002a80:	4b87      	ldr	r3, [pc, #540]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	4a86      	ldr	r2, [pc, #536]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a90:	4b83      	ldr	r3, [pc, #524]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a96:	4a82      	ldr	r2, [pc, #520]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002a98:	f023 0304 	bic.w	r3, r3, #4
 8002a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d016      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7fd fc1a 	bl	80002e0 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab0:	f7fd fc16 	bl	80002e0 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e142      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ac6:	4b76      	ldr	r3, [pc, #472]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ed      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x388>
 8002ad4:	e015      	b.n	8002b02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad6:	f7fd fc03 	bl	80002e0 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7fd fbff 	bl	80002e0 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e12b      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002af4:	4b6a      	ldr	r3, [pc, #424]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1ed      	bne.n	8002ade <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b02:	7ffb      	ldrb	r3, [r7, #31]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d105      	bne.n	8002b14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b08:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0c:	4a64      	ldr	r2, [pc, #400]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d03c      	beq.n	8002b9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01c      	beq.n	8002b62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b28:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b2e:	4a5c      	ldr	r2, [pc, #368]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7fd fbd2 	bl	80002e0 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b40:	f7fd fbce 	bl	80002e0 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0fc      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b52:	4b53      	ldr	r3, [pc, #332]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ef      	beq.n	8002b40 <HAL_RCC_OscConfig+0x418>
 8002b60:	e01b      	b.n	8002b9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b62:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002b64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b68:	4a4d      	ldr	r2, [pc, #308]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
 8002b6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b72:	f7fd fbb5 	bl	80002e0 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b7a:	f7fd fbb1 	bl	80002e0 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e0df      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b8c:	4b44      	ldr	r3, [pc, #272]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1ef      	bne.n	8002b7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 80d3 	beq.w	8002d4a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ba4:	4b3e      	ldr	r3, [pc, #248]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b0c      	cmp	r3, #12
 8002bae:	f000 808d 	beq.w	8002ccc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d15a      	bne.n	8002c70 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a38      	ldr	r2, [pc, #224]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002bc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fd fb8b 	bl	80002e0 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bce:	f7fd fb87 	bl	80002e0 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e0b5      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be0:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f0      	bne.n	8002bce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bec:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <HAL_RCC_OscConfig+0x580>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6a11      	ldr	r1, [r2, #32]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bfc:	3a01      	subs	r2, #1
 8002bfe:	0112      	lsls	r2, r2, #4
 8002c00:	4311      	orrs	r1, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002c06:	0212      	lsls	r2, r2, #8
 8002c08:	4311      	orrs	r1, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c0e:	0852      	lsrs	r2, r2, #1
 8002c10:	3a01      	subs	r2, #1
 8002c12:	0552      	lsls	r2, r2, #21
 8002c14:	4311      	orrs	r1, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c1a:	0852      	lsrs	r2, r2, #1
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	0652      	lsls	r2, r2, #25
 8002c20:	4311      	orrs	r1, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c26:	06d2      	lsls	r2, r2, #27
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	491d      	ldr	r1, [pc, #116]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1a      	ldr	r2, [pc, #104]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c3c:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fd fb4a 	bl	80002e0 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c50:	f7fd fb46 	bl	80002e0 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e074      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x528>
 8002c6e:	e06c      	b.n	8002d4a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c7a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002c82:	f023 0303 	bic.w	r3, r3, #3
 8002c86:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <HAL_RCC_OscConfig+0x578>)
 8002c8e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fd fb22 	bl	80002e0 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9e:	e00e      	b.n	8002cbe <HAL_RCC_OscConfig+0x596>
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fd fb18 	bl	80002e0 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e046      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cbe:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <HAL_RCC_OscConfig+0x62c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x584>
 8002cca:	e03e      	b.n	8002d4a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e039      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <HAL_RCC_OscConfig+0x62c>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f003 0203 	and.w	r2, r3, #3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d12c      	bne.n	8002d46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d123      	bne.n	8002d46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d11b      	bne.n	8002d46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d113      	bne.n	8002d46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	085b      	lsrs	r3, r3, #1
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d109      	bne.n	8002d46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d001      	beq.n	8002d4a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000

08002d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e11e      	b.n	8002fae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d70:	4b91      	ldr	r3, [pc, #580]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d910      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b8e      	ldr	r3, [pc, #568]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 020f 	bic.w	r2, r3, #15
 8002d86:	498c      	ldr	r1, [pc, #560]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b8a      	ldr	r3, [pc, #552]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e106      	b.n	8002fae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d073      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d129      	bne.n	8002e08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db4:	4b81      	ldr	r3, [pc, #516]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0f4      	b.n	8002fae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002dc4:	f000 f966 	bl	8003094 <RCC_GetSysClockFreqFromPLLSource>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4a7c      	ldr	r2, [pc, #496]	; (8002fc0 <HAL_RCC_ClockConfig+0x268>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d93f      	bls.n	8002e52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002dd2:	4b7a      	ldr	r3, [pc, #488]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d033      	beq.n	8002e52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d12f      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002df2:	4b72      	ldr	r3, [pc, #456]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dfa:	4a70      	ldr	r2, [pc, #448]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	e024      	b.n	8002e52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e10:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0c6      	b.n	8002fae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e20:	4b66      	ldr	r3, [pc, #408]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0be      	b.n	8002fae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e30:	f000 f8ce 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4a61      	ldr	r2, [pc, #388]	; (8002fc0 <HAL_RCC_ClockConfig+0x268>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d909      	bls.n	8002e52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e3e:	4b5f      	ldr	r3, [pc, #380]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e46:	4a5d      	ldr	r2, [pc, #372]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e52:	4b5a      	ldr	r3, [pc, #360]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f023 0203 	bic.w	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4957      	ldr	r1, [pc, #348]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e64:	f7fd fa3c 	bl	80002e0 <HAL_GetTick>
 8002e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6c:	f7fd fa38 	bl	80002e0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e095      	b.n	8002fae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	4b4e      	ldr	r3, [pc, #312]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 020c 	and.w	r2, r3, #12
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d1eb      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d023      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eac:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a42      	ldr	r2, [pc, #264]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002eb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ec4:	4b3d      	ldr	r3, [pc, #244]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ecc:	4a3b      	ldr	r2, [pc, #236]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002ece:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ed2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed4:	4b39      	ldr	r3, [pc, #228]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4936      	ldr	r1, [pc, #216]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b80      	cmp	r3, #128	; 0x80
 8002eec:	d105      	bne.n	8002efa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002eee:	4b33      	ldr	r3, [pc, #204]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	4a32      	ldr	r2, [pc, #200]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ef8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002efa:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d21d      	bcs.n	8002f44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f08:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 020f 	bic.w	r2, r3, #15
 8002f10:	4929      	ldr	r1, [pc, #164]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f18:	f7fd f9e2 	bl	80002e0 <HAL_GetTick>
 8002f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f20:	f7fd f9de 	bl	80002e0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e03b      	b.n	8002fae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_RCC_ClockConfig+0x260>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d1ed      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f50:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4917      	ldr	r1, [pc, #92]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	490f      	ldr	r1, [pc, #60]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f82:	f000 f825 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f86:	4601      	mov	r1, r0
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <HAL_RCC_ClockConfig+0x264>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	4a0c      	ldr	r2, [pc, #48]	; (8002fc4 <HAL_RCC_ClockConfig+0x26c>)
 8002f94:	5cd3      	ldrb	r3, [r2, r3]
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002f9e:	4a0a      	ldr	r2, [pc, #40]	; (8002fc8 <HAL_RCC_ClockConfig+0x270>)
 8002fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <HAL_RCC_ClockConfig+0x274>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd f94e 	bl	8000248 <HAL_InitTick>
 8002fac:	4603      	mov	r3, r0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40022000 	.word	0x40022000
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	04c4b400 	.word	0x04c4b400
 8002fc4:	080044d8 	.word	0x080044d8
 8002fc8:	20000008 	.word	0x20000008
 8002fcc:	20000000 	.word	0x20000000

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002fd6:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d102      	bne.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fe2:	4b2a      	ldr	r3, [pc, #168]	; (800308c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	e047      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 030c 	and.w	r3, r3, #12
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d102      	bne.n	8002ffa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ff4:	4b26      	ldr	r3, [pc, #152]	; (8003090 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	e03e      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002ffa:	4b23      	ldr	r3, [pc, #140]	; (8003088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d136      	bne.n	8003074 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003006:	4b20      	ldr	r3, [pc, #128]	; (8003088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003010:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	3301      	adds	r3, #1
 800301c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b03      	cmp	r3, #3
 8003022:	d10c      	bne.n	800303e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003024:	4a1a      	ldr	r2, [pc, #104]	; (8003090 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	fbb2 f3f3 	udiv	r3, r2, r3
 800302c:	4a16      	ldr	r2, [pc, #88]	; (8003088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800302e:	68d2      	ldr	r2, [r2, #12]
 8003030:	0a12      	lsrs	r2, r2, #8
 8003032:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	617b      	str	r3, [r7, #20]
      break;
 800303c:	e00c      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800303e:	4a13      	ldr	r2, [pc, #76]	; (800308c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	4a10      	ldr	r2, [pc, #64]	; (8003088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003048:	68d2      	ldr	r2, [r2, #12]
 800304a:	0a12      	lsrs	r2, r2, #8
 800304c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]
      break;
 8003056:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	0e5b      	lsrs	r3, r3, #25
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	3301      	adds	r3, #1
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	e001      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003078:	693b      	ldr	r3, [r7, #16]
}
 800307a:	4618      	mov	r0, r3
 800307c:	371c      	adds	r7, #28
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	00f42400 	.word	0x00f42400
 8003090:	007a1200 	.word	0x007a1200

08003094 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800309a:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	3301      	adds	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d10c      	bne.n	80030d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030b8:	4a17      	ldr	r2, [pc, #92]	; (8003118 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c0:	4a14      	ldr	r2, [pc, #80]	; (8003114 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030c2:	68d2      	ldr	r2, [r2, #12]
 80030c4:	0a12      	lsrs	r2, r2, #8
 80030c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	617b      	str	r3, [r7, #20]
    break;
 80030d0:	e00c      	b.n	80030ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030d2:	4a12      	ldr	r2, [pc, #72]	; (800311c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	4a0e      	ldr	r2, [pc, #56]	; (8003114 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030dc:	68d2      	ldr	r2, [r2, #12]
 80030de:	0a12      	lsrs	r2, r2, #8
 80030e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]
    break;
 80030ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	0e5b      	lsrs	r3, r3, #25
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	3301      	adds	r3, #1
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003106:	687b      	ldr	r3, [r7, #4]
}
 8003108:	4618      	mov	r0, r3
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	40021000 	.word	0x40021000
 8003118:	007a1200 	.word	0x007a1200
 800311c:	00f42400 	.word	0x00f42400

08003120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003128:	2300      	movs	r3, #0
 800312a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800312c:	2300      	movs	r3, #0
 800312e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 8098 	beq.w	800326e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003142:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10d      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	4b40      	ldr	r3, [pc, #256]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	4a3f      	ldr	r2, [pc, #252]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003158:	6593      	str	r3, [r2, #88]	; 0x58
 800315a:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003166:	2301      	movs	r3, #1
 8003168:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800316a:	4b3a      	ldr	r3, [pc, #232]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a39      	ldr	r2, [pc, #228]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003174:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003176:	f7fd f8b3 	bl	80002e0 <HAL_GetTick>
 800317a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800317c:	e009      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317e:	f7fd f8af 	bl	80002e0 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d902      	bls.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	74fb      	strb	r3, [r7, #19]
        break;
 8003190:	e005      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003192:	4b30      	ldr	r3, [pc, #192]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0ef      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800319e:	7cfb      	ldrb	r3, [r7, #19]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d159      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031a4:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d01e      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d019      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031c0:	4b23      	ldr	r3, [pc, #140]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031cc:	4b20      	ldr	r3, [pc, #128]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	4a1f      	ldr	r2, [pc, #124]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031dc:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	4a1b      	ldr	r2, [pc, #108]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031ec:	4a18      	ldr	r2, [pc, #96]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7fd f86f 	bl	80002e0 <HAL_GetTick>
 8003202:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003204:	e00b      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fd f86b 	bl	80002e0 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d902      	bls.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	74fb      	strb	r3, [r7, #19]
            break;
 800321c:	e006      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0ec      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10b      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003232:	4b07      	ldr	r3, [pc, #28]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	4903      	ldr	r1, [pc, #12]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003248:	e008      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800324a:	7cfb      	ldrb	r3, [r7, #19]
 800324c:	74bb      	strb	r3, [r7, #18]
 800324e:	e005      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003250:	40021000 	.word	0x40021000
 8003254:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800325c:	7c7b      	ldrb	r3, [r7, #17]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d105      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003262:	4ba6      	ldr	r3, [pc, #664]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	4aa5      	ldr	r2, [pc, #660]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800327a:	4ba0      	ldr	r3, [pc, #640]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	f023 0203 	bic.w	r2, r3, #3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	499c      	ldr	r1, [pc, #624]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800329c:	4b97      	ldr	r3, [pc, #604]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a2:	f023 020c 	bic.w	r2, r3, #12
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	4994      	ldr	r1, [pc, #592]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032be:	4b8f      	ldr	r3, [pc, #572]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	498b      	ldr	r1, [pc, #556]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032e0:	4b86      	ldr	r3, [pc, #536]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	4983      	ldr	r1, [pc, #524]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003302:	4b7e      	ldr	r3, [pc, #504]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003308:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	497a      	ldr	r1, [pc, #488]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003324:	4b75      	ldr	r3, [pc, #468]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	4972      	ldr	r1, [pc, #456]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003346:	4b6d      	ldr	r3, [pc, #436]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	4969      	ldr	r1, [pc, #420]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003368:	4b64      	ldr	r3, [pc, #400]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	4961      	ldr	r1, [pc, #388]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800338a:	4b5c      	ldr	r3, [pc, #368]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	4958      	ldr	r1, [pc, #352]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d015      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033ac:	4b53      	ldr	r3, [pc, #332]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	4950      	ldr	r1, [pc, #320]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ca:	d105      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033cc:	4b4b      	ldr	r3, [pc, #300]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a4a      	ldr	r2, [pc, #296]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d015      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033e4:	4b45      	ldr	r3, [pc, #276]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	4942      	ldr	r1, [pc, #264]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003402:	d105      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003404:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4a3c      	ldr	r2, [pc, #240]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800340a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800340e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d015      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800341c:	4b37      	ldr	r3, [pc, #220]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003422:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	4934      	ldr	r1, [pc, #208]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800343a:	d105      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800343c:	4b2f      	ldr	r3, [pc, #188]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a2e      	ldr	r2, [pc, #184]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003446:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d015      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003454:	4b29      	ldr	r3, [pc, #164]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003462:	4926      	ldr	r1, [pc, #152]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003472:	d105      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003474:	4b21      	ldr	r3, [pc, #132]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4a20      	ldr	r2, [pc, #128]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800347a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d015      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800348c:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349a:	4918      	ldr	r1, [pc, #96]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034aa:	d105      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ac:	4b13      	ldr	r3, [pc, #76]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a12      	ldr	r2, [pc, #72]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d015      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034c4:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d2:	490a      	ldr	r1, [pc, #40]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034e2:	d105      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4a04      	ldr	r2, [pc, #16]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80034f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000

08003500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e01d      	b.n	800354e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 feee 	bl	8004308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f000 f9dc 	bl	80038fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <HAL_TIM_Base_Start_IT+0x50>)
 8003578:	4013      	ands	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b06      	cmp	r3, #6
 8003580:	d00b      	beq.n	800359a <HAL_TIM_Base_Start_IT+0x42>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003588:	d007      	beq.n	800359a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	00010007 	.word	0x00010007

080035ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d122      	bne.n	8003608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d11b      	bne.n	8003608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0202 	mvn.w	r2, #2
 80035d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f965 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 80035f4:	e005      	b.n	8003602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f957 	bl	80038aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f968 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b04      	cmp	r3, #4
 8003614:	d122      	bne.n	800365c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b04      	cmp	r3, #4
 8003622:	d11b      	bne.n	800365c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0204 	mvn.w	r2, #4
 800362c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f93b 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 8003648:	e005      	b.n	8003656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f92d 	bl	80038aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f93e 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b08      	cmp	r3, #8
 8003668:	d122      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b08      	cmp	r3, #8
 8003676:	d11b      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0208 	mvn.w	r2, #8
 8003680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2204      	movs	r2, #4
 8003686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f911 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f903 	bl	80038aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f914 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d122      	bne.n	8003704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	d11b      	bne.n	8003704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0210 	mvn.w	r2, #16
 80036d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2208      	movs	r2, #8
 80036da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8e7 	bl	80038be <HAL_TIM_IC_CaptureCallback>
 80036f0:	e005      	b.n	80036fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f8d9 	bl	80038aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f8ea 	bl	80038d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b01      	cmp	r3, #1
 8003710:	d10e      	bne.n	8003730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b01      	cmp	r3, #1
 800371e:	d107      	bne.n	8003730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0201 	mvn.w	r2, #1
 8003728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fa92 	bl	8003c54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b80      	cmp	r3, #128	; 0x80
 800373c:	d10e      	bne.n	800375c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003748:	2b80      	cmp	r3, #128	; 0x80
 800374a:	d107      	bne.n	800375c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f96a 	bl	8003a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376a:	d10e      	bne.n	800378a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003776:	2b80      	cmp	r3, #128	; 0x80
 8003778:	d107      	bne.n	800378a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f95d 	bl	8003a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b40      	cmp	r3, #64	; 0x40
 8003796:	d10e      	bne.n	80037b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a2:	2b40      	cmp	r3, #64	; 0x40
 80037a4:	d107      	bne.n	80037b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f898 	bl	80038e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d10e      	bne.n	80037e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d107      	bne.n	80037e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f06f 0220 	mvn.w	r2, #32
 80037da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f91d 	bl	8003a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f0:	d10f      	bne.n	8003812 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003800:	d107      	bne.n	8003812 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800380a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f923 	bl	8003a58 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800381c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003820:	d10f      	bne.n	8003842 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800382c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003830:	d107      	bne.n	8003842 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800383a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f915 	bl	8003a6c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003850:	d10f      	bne.n	8003872 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003860:	d107      	bne.n	8003872 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800386a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f907 	bl	8003a80 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800387c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003880:	d10f      	bne.n	80038a2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800388c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003890:	d107      	bne.n	80038a2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800389a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f8f9 	bl	8003a94 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a3c      	ldr	r2, [pc, #240]	; (8003a00 <TIM_Base_SetConfig+0x104>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00f      	beq.n	8003934 <TIM_Base_SetConfig+0x38>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391a:	d00b      	beq.n	8003934 <TIM_Base_SetConfig+0x38>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a39      	ldr	r2, [pc, #228]	; (8003a04 <TIM_Base_SetConfig+0x108>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d007      	beq.n	8003934 <TIM_Base_SetConfig+0x38>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a38      	ldr	r2, [pc, #224]	; (8003a08 <TIM_Base_SetConfig+0x10c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <TIM_Base_SetConfig+0x38>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a37      	ldr	r2, [pc, #220]	; (8003a0c <TIM_Base_SetConfig+0x110>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d108      	bne.n	8003946 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a2d      	ldr	r2, [pc, #180]	; (8003a00 <TIM_Base_SetConfig+0x104>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01b      	beq.n	8003986 <TIM_Base_SetConfig+0x8a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003954:	d017      	beq.n	8003986 <TIM_Base_SetConfig+0x8a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <TIM_Base_SetConfig+0x108>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <TIM_Base_SetConfig+0x8a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a29      	ldr	r2, [pc, #164]	; (8003a08 <TIM_Base_SetConfig+0x10c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00f      	beq.n	8003986 <TIM_Base_SetConfig+0x8a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a28      	ldr	r2, [pc, #160]	; (8003a0c <TIM_Base_SetConfig+0x110>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00b      	beq.n	8003986 <TIM_Base_SetConfig+0x8a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <TIM_Base_SetConfig+0x114>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <TIM_Base_SetConfig+0x8a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a26      	ldr	r2, [pc, #152]	; (8003a14 <TIM_Base_SetConfig+0x118>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d003      	beq.n	8003986 <TIM_Base_SetConfig+0x8a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a25      	ldr	r2, [pc, #148]	; (8003a18 <TIM_Base_SetConfig+0x11c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d108      	bne.n	8003998 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a10      	ldr	r2, [pc, #64]	; (8003a00 <TIM_Base_SetConfig+0x104>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00f      	beq.n	80039e4 <TIM_Base_SetConfig+0xe8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a11      	ldr	r2, [pc, #68]	; (8003a0c <TIM_Base_SetConfig+0x110>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00b      	beq.n	80039e4 <TIM_Base_SetConfig+0xe8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a10      	ldr	r2, [pc, #64]	; (8003a10 <TIM_Base_SetConfig+0x114>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d007      	beq.n	80039e4 <TIM_Base_SetConfig+0xe8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a0f      	ldr	r2, [pc, #60]	; (8003a14 <TIM_Base_SetConfig+0x118>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_Base_SetConfig+0xe8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a0e      	ldr	r2, [pc, #56]	; (8003a18 <TIM_Base_SetConfig+0x11c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d103      	bne.n	80039ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	615a      	str	r2, [r3, #20]
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40012c00 	.word	0x40012c00
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40000800 	.word	0x40000800
 8003a0c:	40013400 	.word	0x40013400
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800

08003a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <main>:
uint32_t canErrors[8];
uint8_t canSendErrorFlag;


int main(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
	HAL_Init();
 8003aac:	f7fc fbb4 	bl	8000218 <HAL_Init>

	SystemClock_Config();
 8003ab0:	f000 f8e8 	bl	8003c84 <SystemClock_Config>

	MX_GPIO_Init();
 8003ab4:	f000 f94c 	bl	8003d50 <MX_GPIO_Init>
	MX_DMA_Init();
 8003ab8:	f000 f98a 	bl	8003dd0 <MX_DMA_Init>
	MX_ADC1_Init();
 8003abc:	f000 f9ba 	bl	8003e34 <MX_ADC1_Init>
	MX_ADC2_Init();
 8003ac0:	f000 fa5e 	bl	8003f80 <MX_ADC2_Init>
	MX_FDCAN_Init();
 8003ac4:	f000 fadc 	bl	8004080 <MX_FDCAN_Init>
	MX_TIM7_Init();
 8003ac8:	f000 fb6e 	bl	80041a8 <MX_TIM7_Init>

	while (1)
	{
		if(canErrorToTransmit && canSendErrorFlag)
 8003acc:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <main+0x48>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0fb      	beq.n	8003acc <main+0x24>
 8003ad4:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <main+0x4c>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f7      	beq.n	8003acc <main+0x24>
		{
			Send_Error();
 8003adc:	f000 f838 	bl	8003b50 <Send_Error>
			if(!canErrorToTransmit)
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <main+0x48>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f1      	bne.n	8003acc <main+0x24>
			{
				canSendErrorFlag=0; //TODO based on timer
 8003ae8:	4b02      	ldr	r3, [pc, #8]	; (8003af4 <main+0x4c>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
		if(canErrorToTransmit && canSendErrorFlag)
 8003aee:	e7ed      	b.n	8003acc <main+0x24>
 8003af0:	2000011c 	.word	0x2000011c
 8003af4:	20000194 	.word	0x20000194

08003af8 <Set_Error>:
		return;
	}
}

void Set_Error(uint32_t error)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	canErrors[(error/32)]  |= (1<<(error%32));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	4a10      	ldr	r2, [pc, #64]	; (8003b48 <Set_Error+0x50>)
 8003b06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	f001 011f 	and.w	r1, r1, #31
 8003b10:	2001      	movs	r0, #1
 8003b12:	fa00 f101 	lsl.w	r1, r0, r1
 8003b16:	430a      	orrs	r2, r1
 8003b18:	490b      	ldr	r1, [pc, #44]	; (8003b48 <Set_Error+0x50>)
 8003b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	canErrorToTransmit |= (1<<(error/32));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	2201      	movs	r2, #1
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	b25a      	sxtb	r2, r3
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <Set_Error+0x54>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	b25b      	sxtb	r3, r3
 8003b30:	4313      	orrs	r3, r2
 8003b32:	b25b      	sxtb	r3, r3
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <Set_Error+0x54>)
 8003b38:	701a      	strb	r2, [r3, #0]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	2000002c 	.word	0x2000002c
 8003b4c:	2000011c 	.word	0x2000011c

08003b50 <Send_Error>:

void Send_Error(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<8; i++)
 8003b56:	2300      	movs	r3, #0
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5a:	e06d      	b.n	8003c38 <Send_Error+0xe8>
	{
		if (canErrorToTransmit&(1<<i))
 8003b5c:	4b39      	ldr	r3, [pc, #228]	; (8003c44 <Send_Error+0xf4>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	fa42 f303 	asr.w	r3, r2, r3
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d060      	beq.n	8003c32 <Send_Error+0xe2>
		{
			if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) > 0)
 8003b70:	4835      	ldr	r0, [pc, #212]	; (8003c48 <Send_Error+0xf8>)
 8003b72:	f7fe f809 	bl	8001b88 <HAL_FDCAN_GetTxFifoFreeLevel>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d05a      	beq.n	8003c32 <Send_Error+0xe2>
			{
				FDCAN_TxHeaderTypeDef TxHeader;

				TxHeader.Identifier = CANID_ERROR;
 8003b7c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b80:	603b      	str	r3, [r7, #0]
				TxHeader.DataLength = FDCAN_DLC_BYTES_6;
 8003b82:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8003b86:	60fb      	str	r3, [r7, #12]

				CANTxData[0]=ID;
 8003b88:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <Send_Error+0xfc>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
				CANTxData[1]=i;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	4b2e      	ldr	r3, [pc, #184]	; (8003c4c <Send_Error+0xfc>)
 8003b94:	705a      	strb	r2, [r3, #1]
				CANTxData[2]=(canErrors[i]>>24)&0xFF;
 8003b96:	4a2e      	ldr	r2, [pc, #184]	; (8003c50 <Send_Error+0x100>)
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9e:	0e1b      	lsrs	r3, r3, #24
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4b2a      	ldr	r3, [pc, #168]	; (8003c4c <Send_Error+0xfc>)
 8003ba4:	709a      	strb	r2, [r3, #2]
				CANTxData[3]=(canErrors[i]>>16)&0xFF;
 8003ba6:	4a2a      	ldr	r2, [pc, #168]	; (8003c50 <Send_Error+0x100>)
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bae:	0c1b      	lsrs	r3, r3, #16
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	4b26      	ldr	r3, [pc, #152]	; (8003c4c <Send_Error+0xfc>)
 8003bb4:	70da      	strb	r2, [r3, #3]
				CANTxData[4]=(canErrors[i]>>8)&0xFF;
 8003bb6:	4a26      	ldr	r2, [pc, #152]	; (8003c50 <Send_Error+0x100>)
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bbe:	0a1b      	lsrs	r3, r3, #8
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4b22      	ldr	r3, [pc, #136]	; (8003c4c <Send_Error+0xfc>)
 8003bc4:	711a      	strb	r2, [r3, #4]
				CANTxData[5]=(canErrors[i]>>0)&0xFF;
 8003bc6:	4a22      	ldr	r2, [pc, #136]	; (8003c50 <Send_Error+0x100>)
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	4b1e      	ldr	r3, [pc, #120]	; (8003c4c <Send_Error+0xfc>)
 8003bd2:	715a      	strb	r2, [r3, #5]

				TxHeader.IdType = FDCAN_STANDARD_ID;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	607b      	str	r3, [r7, #4]
				TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60bb      	str	r3, [r7, #8]
				TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]
				TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
				TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61bb      	str	r3, [r7, #24]
				TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
				TxHeader.MessageMarker = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	623b      	str	r3, [r7, #32]

				if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 8003bf0:	463b      	mov	r3, r7
 8003bf2:	4a16      	ldr	r2, [pc, #88]	; (8003c4c <Send_Error+0xfc>)
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4814      	ldr	r0, [pc, #80]	; (8003c48 <Send_Error+0xf8>)
 8003bf8:	f7fd ff82 	bl	8001b00 <HAL_FDCAN_AddMessageToTxFifoQ>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <Send_Error+0xba>
				{
					Set_Error(ERR_SEND_FAILED);
 8003c02:	2002      	movs	r0, #2
 8003c04:	f7ff ff78 	bl	8003af8 <Set_Error>
 8003c08:	e019      	b.n	8003c3e <Send_Error+0xee>
					return;
				}
				else
				{
					//if we sent the error message clear the error so that if it only occurs once the error is not sent continuously
					canErrors[i]=0;
 8003c0a:	4a11      	ldr	r2, [pc, #68]	; (8003c50 <Send_Error+0x100>)
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	2100      	movs	r1, #0
 8003c10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					canErrorToTransmit &= ~(1<<i);
 8003c14:	2201      	movs	r2, #1
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	b25b      	sxtb	r3, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	b25a      	sxtb	r2, r3
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <Send_Error+0xf4>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	b25b      	sxtb	r3, r3
 8003c28:	4013      	ands	r3, r2
 8003c2a:	b25b      	sxtb	r3, r3
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <Send_Error+0xf4>)
 8003c30:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	3301      	adds	r3, #1
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	2b07      	cmp	r3, #7
 8003c3c:	d98e      	bls.n	8003b5c <Send_Error+0xc>
				}
			}
		}
	}
}
 8003c3e:	3728      	adds	r7, #40	; 0x28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	2000011c 	.word	0x2000011c
 8003c48:	200000b8 	.word	0x200000b8
 8003c4c:	2000018c 	.word	0x2000018c
 8003c50:	2000002c 	.word	0x2000002c

08003c54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	/*else if (htim->Instance == TIM16)
	{
		HAL_TIM_Base_Stop_IT(&htim16);
		Can_Sync();
	}
	else*/ if (htim->Instance == TIM7)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a06      	ldr	r2, [pc, #24]	; (8003c7c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d103      	bne.n	8003c6e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		canSendErrorFlag=1;
 8003c66:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	701a      	strb	r2, [r3, #0]
	}*/
	else
	{
		Error_Handler();
	}
}
 8003c6c:	e001      	b.n	8003c72 <HAL_TIM_PeriodElapsedCallback+0x1e>
		Error_Handler();
 8003c6e:	f000 fabf 	bl	80041f0 <Error_Handler>
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40001400 	.word	0x40001400
 8003c80:	20000194 	.word	0x20000194

08003c84 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b0a4      	sub	sp, #144	; 0x90
 8003c88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003c8e:	2238      	movs	r2, #56	; 0x38
 8003c90:	2100      	movs	r1, #0
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fc04 	bl	80044a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ca8:	463b      	mov	r3, r7
 8003caa:	2244      	movs	r2, #68	; 0x44
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fbf6 	bl	80044a0 <memset>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	f7fe fc93 	bl	80025e0 <HAL_PWREx_ControlVoltageScaling>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003cbe:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003ccc:	2304      	movs	r3, #4
 8003cce:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003cd0:	2355      	movs	r3, #85	; 0x55
 8003cd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ce8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe fd1b 	bl	8002728 <HAL_RCC_OscConfig>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <SystemClock_Config+0x78>
	{
		Error_Handler();
 8003cf8:	f000 fa7a 	bl	80041f0 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8003cfc:	230f      	movs	r3, #15
 8003cfe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d00:	2303      	movs	r3, #3
 8003d02:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d04:	2300      	movs	r3, #0
 8003d06:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	657b      	str	r3, [r7, #84]	; 0x54
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8003d10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003d14:	2108      	movs	r1, #8
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff f81e 	bl	8002d58 <HAL_RCC_ClockConfig>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8003d22:	f000 fa65 	bl	80041f0 <Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
 8003d26:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8003d2a:	603b      	str	r3, [r7, #0]
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003d30:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003d34:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d36:	463b      	mov	r3, r7
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff f9f1 	bl	8003120 <HAL_RCCEx_PeriphCLKConfig>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8003d44:	f000 fa54 	bl	80041f0 <Error_Handler>
	}
}
 8003d48:	bf00      	nop
 8003d4a:	3790      	adds	r7, #144	; 0x90
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d56:	f107 030c 	add.w	r3, r7, #12
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	605a      	str	r2, [r3, #4]
 8003d60:	609a      	str	r2, [r3, #8]
 8003d62:	60da      	str	r2, [r3, #12]
 8003d64:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003d66:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <MX_GPIO_Init+0x7c>)
 8003d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6a:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <MX_GPIO_Init+0x7c>)
 8003d6c:	f043 0320 	orr.w	r3, r3, #32
 8003d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d72:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <MX_GPIO_Init+0x7c>)
 8003d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003d7e:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <MX_GPIO_Init+0x7c>)
 8003d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d82:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <MX_GPIO_Init+0x7c>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <MX_GPIO_Init+0x7c>)
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8003d96:	2200      	movs	r2, #0
 8003d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003da0:	f7fe fbec 	bl	800257c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003da4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003daa:	2301      	movs	r3, #1
 8003dac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db6:	f107 030c 	add.w	r3, r7, #12
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dc0:	f7fe fa5a 	bl	8002278 <HAL_GPIO_Init>
}
 8003dc4:	bf00      	nop
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000

08003dd0 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003dd6:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <MX_DMA_Init+0x60>)
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dda:	4a15      	ldr	r2, [pc, #84]	; (8003e30 <MX_DMA_Init+0x60>)
 8003ddc:	f043 0304 	orr.w	r3, r3, #4
 8003de0:	6493      	str	r3, [r2, #72]	; 0x48
 8003de2:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <MX_DMA_Init+0x60>)
 8003de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	607b      	str	r3, [r7, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003dee:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <MX_DMA_Init+0x60>)
 8003df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df2:	4a0f      	ldr	r2, [pc, #60]	; (8003e30 <MX_DMA_Init+0x60>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	6493      	str	r3, [r2, #72]	; 0x48
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <MX_DMA_Init+0x60>)
 8003dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003e06:	2200      	movs	r2, #0
 8003e08:	2100      	movs	r1, #0
 8003e0a:	200b      	movs	r0, #11
 8003e0c:	f7fd fbfd 	bl	800160a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003e10:	200b      	movs	r0, #11
 8003e12:	f7fd fc14 	bl	800163e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003e16:	2200      	movs	r2, #0
 8003e18:	2100      	movs	r1, #0
 8003e1a:	200c      	movs	r0, #12
 8003e1c:	f7fd fbf5 	bl	800160a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003e20:	200c      	movs	r0, #12
 8003e22:	f7fd fc0c 	bl	800163e <HAL_NVIC_EnableIRQ>
}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40021000 	.word	0x40021000

08003e34 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08c      	sub	sp, #48	; 0x30
 8003e38:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode = {0};
 8003e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	605a      	str	r2, [r3, #4]
 8003e44:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8003e46:	1d3b      	adds	r3, r7, #4
 8003e48:	2220      	movs	r2, #32
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fb27 	bl	80044a0 <memset>

	hadc1.Instance = ADC1;
 8003e52:	4b47      	ldr	r3, [pc, #284]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003e54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003e58:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003e5a:	4b45      	ldr	r3, [pc, #276]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8003e60:	4b43      	ldr	r3, [pc, #268]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003e62:	2208      	movs	r2, #8
 8003e64:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e66:	4b42      	ldr	r3, [pc, #264]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8003e6c:	4b40      	ldr	r3, [pc, #256]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003e72:	4b3f      	ldr	r3, [pc, #252]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e78:	4b3d      	ldr	r3, [pc, #244]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8003e7e:	4b3c      	ldr	r3, [pc, #240]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8003e84:	4b3a      	ldr	r3, [pc, #232]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 3;
 8003e8a:	4b39      	ldr	r3, [pc, #228]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003e8c:	2203      	movs	r2, #3
 8003e8e:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = ENABLE;
 8003e90:	4b37      	ldr	r3, [pc, #220]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e98:	4b35      	ldr	r3, [pc, #212]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e9e:	4b34      	ldr	r3, [pc, #208]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8003ea4:	4b32      	ldr	r3, [pc, #200]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003eac:	4b30      	ldr	r3, [pc, #192]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003eae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003eb2:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8003eb4:	4b2e      	ldr	r3, [pc, #184]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ebc:	482c      	ldr	r0, [pc, #176]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003ebe:	f7fc fc25 	bl	800070c <HAL_ADC_Init>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <MX_ADC1_Init+0x98>
	{
		Error_Handler();
 8003ec8:	f000 f992 	bl	80041f0 <Error_Handler>
	}

	multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8003ecc:	2306      	movs	r3, #6
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8003ed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ed4:	62bb      	str	r3, [r7, #40]	; 0x28
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_12CYCLES;
 8003ed6:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4823      	ldr	r0, [pc, #140]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003ee4:	f7fd fa16 	bl	8001314 <HAL_ADCEx_MultiModeConfigChannel>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <MX_ADC1_Init+0xbe>
	{
		Error_Handler();
 8003eee:	f000 f97f 	bl	80041f0 <Error_Handler>
	}


	sConfig.Channel = ADC_CHANNEL_1;
 8003ef2:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <MX_ADC1_Init+0x140>)
 8003ef4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8003ef6:	2312      	movs	r3, #18
 8003ef8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8003efa:	2307      	movs	r3, #7
 8003efc:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003efe:	237f      	movs	r3, #127	; 0x7f
 8003f00:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003f02:	2304      	movs	r3, #4
 8003f04:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f0a:	1d3b      	adds	r3, r7, #4
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4818      	ldr	r0, [pc, #96]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003f10:	f7fc fd8e 	bl	8000a30 <HAL_ADC_ConfigChannel>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <MX_ADC1_Init+0xea>
	{
		Error_Handler();
 8003f1a:	f000 f969 	bl	80041f0 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_2;
 8003f1e:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <MX_ADC1_Init+0x144>)
 8003f20:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8003f22:	230c      	movs	r3, #12
 8003f24:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f26:	1d3b      	adds	r3, r7, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4811      	ldr	r0, [pc, #68]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003f2c:	f7fc fd80 	bl	8000a30 <HAL_ADC_ConfigChannel>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <MX_ADC1_Init+0x106>
	{
		Error_Handler();
 8003f36:	f000 f95b 	bl	80041f0 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_3;
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <MX_ADC1_Init+0x148>)
 8003f3c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003f3e:	2306      	movs	r3, #6
 8003f40:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f42:	1d3b      	adds	r3, r7, #4
 8003f44:	4619      	mov	r1, r3
 8003f46:	480a      	ldr	r0, [pc, #40]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003f48:	f7fc fd72 	bl	8000a30 <HAL_ADC_ConfigChannel>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <MX_ADC1_Init+0x122>
	{
		Error_Handler();
 8003f52:	f000 f94d 	bl	80041f0 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8003f56:	217f      	movs	r1, #127	; 0x7f
 8003f58:	4805      	ldr	r0, [pc, #20]	; (8003f70 <MX_ADC1_Init+0x13c>)
 8003f5a:	f7fd f979 	bl	8001250 <HAL_ADCEx_Calibration_Start>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <MX_ADC1_Init+0x134>
	{
		Error_Handler();
 8003f64:	f000 f944 	bl	80041f0 <Error_Handler>
	}
}
 8003f68:	bf00      	nop
 8003f6a:	3730      	adds	r7, #48	; 0x30
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000120 	.word	0x20000120
 8003f74:	04300002 	.word	0x04300002
 8003f78:	08600004 	.word	0x08600004
 8003f7c:	0c900008 	.word	0x0c900008

08003f80 <MX_ADC2_Init>:

static void MX_ADC2_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003f86:	463b      	mov	r3, r7
 8003f88:	2220      	movs	r2, #32
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fa87 	bl	80044a0 <memset>

	hadc2.Instance = ADC2;
 8003f92:	4b38      	ldr	r3, [pc, #224]	; (8004074 <MX_ADC2_Init+0xf4>)
 8003f94:	4a38      	ldr	r2, [pc, #224]	; (8004078 <MX_ADC2_Init+0xf8>)
 8003f96:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003f98:	4b36      	ldr	r3, [pc, #216]	; (8004074 <MX_ADC2_Init+0xf4>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8003f9e:	4b35      	ldr	r3, [pc, #212]	; (8004074 <MX_ADC2_Init+0xf4>)
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fa4:	4b33      	ldr	r3, [pc, #204]	; (8004074 <MX_ADC2_Init+0xf4>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8003faa:	4b32      	ldr	r3, [pc, #200]	; (8004074 <MX_ADC2_Init+0xf4>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003fb0:	4b30      	ldr	r3, [pc, #192]	; (8004074 <MX_ADC2_Init+0xf4>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003fb6:	4b2f      	ldr	r3, [pc, #188]	; (8004074 <MX_ADC2_Init+0xf4>)
 8003fb8:	2204      	movs	r2, #4
 8003fba:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8003fbc:	4b2d      	ldr	r3, [pc, #180]	; (8004074 <MX_ADC2_Init+0xf4>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8003fc2:	4b2c      	ldr	r3, [pc, #176]	; (8004074 <MX_ADC2_Init+0xf4>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 3;
 8003fc8:	4b2a      	ldr	r3, [pc, #168]	; (8004074 <MX_ADC2_Init+0xf4>)
 8003fca:	2203      	movs	r2, #3
 8003fcc:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = ENABLE;
 8003fce:	4b29      	ldr	r3, [pc, #164]	; (8004074 <MX_ADC2_Init+0xf4>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8003fd6:	4b27      	ldr	r3, [pc, #156]	; (8004074 <MX_ADC2_Init+0xf4>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003fde:	4b25      	ldr	r3, [pc, #148]	; (8004074 <MX_ADC2_Init+0xf4>)
 8003fe0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fe4:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 8003fe6:	4b23      	ldr	r3, [pc, #140]	; (8004074 <MX_ADC2_Init+0xf4>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003fee:	4821      	ldr	r0, [pc, #132]	; (8004074 <MX_ADC2_Init+0xf4>)
 8003ff0:	f7fc fb8c 	bl	800070c <HAL_ADC_Init>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <MX_ADC2_Init+0x7e>
	{
		Error_Handler();
 8003ffa:	f000 f8f9 	bl	80041f0 <Error_Handler>
	}


	sConfig.Channel = ADC_CHANNEL_10;
 8003ffe:	4b1f      	ldr	r3, [pc, #124]	; (800407c <MX_ADC2_Init+0xfc>)
 8004000:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004002:	2306      	movs	r3, #6
 8004004:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004006:	2307      	movs	r3, #7
 8004008:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800400a:	237f      	movs	r3, #127	; 0x7f
 800400c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800400e:	2304      	movs	r3, #4
 8004010:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004016:	463b      	mov	r3, r7
 8004018:	4619      	mov	r1, r3
 800401a:	4816      	ldr	r0, [pc, #88]	; (8004074 <MX_ADC2_Init+0xf4>)
 800401c:	f7fc fd08 	bl	8000a30 <HAL_ADC_ConfigChannel>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <MX_ADC2_Init+0xaa>
	{
		Error_Handler();
 8004026:	f000 f8e3 	bl	80041f0 <Error_Handler>
	}

	sConfig.Rank = ADC_REGULAR_RANK_2;
 800402a:	230c      	movs	r3, #12
 800402c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800402e:	463b      	mov	r3, r7
 8004030:	4619      	mov	r1, r3
 8004032:	4810      	ldr	r0, [pc, #64]	; (8004074 <MX_ADC2_Init+0xf4>)
 8004034:	f7fc fcfc 	bl	8000a30 <HAL_ADC_ConfigChannel>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <MX_ADC2_Init+0xc2>
	{
		Error_Handler();
 800403e:	f000 f8d7 	bl	80041f0 <Error_Handler>
	}

	sConfig.Rank = ADC_REGULAR_RANK_3;
 8004042:	2312      	movs	r3, #18
 8004044:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004046:	463b      	mov	r3, r7
 8004048:	4619      	mov	r1, r3
 800404a:	480a      	ldr	r0, [pc, #40]	; (8004074 <MX_ADC2_Init+0xf4>)
 800404c:	f7fc fcf0 	bl	8000a30 <HAL_ADC_ConfigChannel>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <MX_ADC2_Init+0xda>
	{
		Error_Handler();
 8004056:	f000 f8cb 	bl	80041f0 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 800405a:	217f      	movs	r1, #127	; 0x7f
 800405c:	4805      	ldr	r0, [pc, #20]	; (8004074 <MX_ADC2_Init+0xf4>)
 800405e:	f7fd f8f7 	bl	8001250 <HAL_ADCEx_Calibration_Start>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <MX_ADC2_Init+0xec>
	{
		Error_Handler();
 8004068:	f000 f8c2 	bl	80041f0 <Error_Handler>
	}
}
 800406c:	bf00      	nop
 800406e:	3720      	adds	r7, #32
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	2000004c 	.word	0x2000004c
 8004078:	50000100 	.word	0x50000100
 800407c:	2a000400 	.word	0x2a000400

08004080 <MX_FDCAN_Init>:

static void MX_FDCAN_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef	sFilterConfig;

	hfdcan.Instance = FDCAN1;
 8004086:	4b46      	ldr	r3, [pc, #280]	; (80041a0 <MX_FDCAN_Init+0x120>)
 8004088:	4a46      	ldr	r2, [pc, #280]	; (80041a4 <MX_FDCAN_Init+0x124>)
 800408a:	601a      	str	r2, [r3, #0]
	hfdcan.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800408c:	4b44      	ldr	r3, [pc, #272]	; (80041a0 <MX_FDCAN_Init+0x120>)
 800408e:	2200      	movs	r2, #0
 8004090:	605a      	str	r2, [r3, #4]
	hfdcan.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004092:	4b43      	ldr	r3, [pc, #268]	; (80041a0 <MX_FDCAN_Init+0x120>)
 8004094:	2200      	movs	r2, #0
 8004096:	609a      	str	r2, [r3, #8]
	hfdcan.Init.Mode = FDCAN_MODE_NORMAL;
 8004098:	4b41      	ldr	r3, [pc, #260]	; (80041a0 <MX_FDCAN_Init+0x120>)
 800409a:	2200      	movs	r2, #0
 800409c:	60da      	str	r2, [r3, #12]
	hfdcan.Init.AutoRetransmission = DISABLE;
 800409e:	4b40      	ldr	r3, [pc, #256]	; (80041a0 <MX_FDCAN_Init+0x120>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	741a      	strb	r2, [r3, #16]
	hfdcan.Init.TransmitPause = DISABLE;
 80040a4:	4b3e      	ldr	r3, [pc, #248]	; (80041a0 <MX_FDCAN_Init+0x120>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	745a      	strb	r2, [r3, #17]
	hfdcan.Init.ProtocolException = DISABLE;
 80040aa:	4b3d      	ldr	r3, [pc, #244]	; (80041a0 <MX_FDCAN_Init+0x120>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	749a      	strb	r2, [r3, #18]
	hfdcan.Init.NominalPrescaler = 1;
 80040b0:	4b3b      	ldr	r3, [pc, #236]	; (80041a0 <MX_FDCAN_Init+0x120>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	615a      	str	r2, [r3, #20]
	hfdcan.Init.NominalSyncJumpWidth = 1;
 80040b6:	4b3a      	ldr	r3, [pc, #232]	; (80041a0 <MX_FDCAN_Init+0x120>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	619a      	str	r2, [r3, #24]
	hfdcan.Init.NominalTimeSeg1 = 13;
 80040bc:	4b38      	ldr	r3, [pc, #224]	; (80041a0 <MX_FDCAN_Init+0x120>)
 80040be:	220d      	movs	r2, #13
 80040c0:	61da      	str	r2, [r3, #28]
	hfdcan.Init.NominalTimeSeg2 = 2;
 80040c2:	4b37      	ldr	r3, [pc, #220]	; (80041a0 <MX_FDCAN_Init+0x120>)
 80040c4:	2202      	movs	r2, #2
 80040c6:	621a      	str	r2, [r3, #32]
	hfdcan.Init.DataPrescaler = 1;
 80040c8:	4b35      	ldr	r3, [pc, #212]	; (80041a0 <MX_FDCAN_Init+0x120>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan.Init.DataSyncJumpWidth = 1;
 80040ce:	4b34      	ldr	r3, [pc, #208]	; (80041a0 <MX_FDCAN_Init+0x120>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan.Init.DataTimeSeg1 = 1;
 80040d4:	4b32      	ldr	r3, [pc, #200]	; (80041a0 <MX_FDCAN_Init+0x120>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan.Init.DataTimeSeg2 = 1;
 80040da:	4b31      	ldr	r3, [pc, #196]	; (80041a0 <MX_FDCAN_Init+0x120>)
 80040dc:	2201      	movs	r2, #1
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan.Init.StdFiltersNbr = 2;
 80040e0:	4b2f      	ldr	r3, [pc, #188]	; (80041a0 <MX_FDCAN_Init+0x120>)
 80040e2:	2202      	movs	r2, #2
 80040e4:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan.Init.ExtFiltersNbr = 0;
 80040e6:	4b2e      	ldr	r3, [pc, #184]	; (80041a0 <MX_FDCAN_Init+0x120>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80040ec:	4b2c      	ldr	r3, [pc, #176]	; (80041a0 <MX_FDCAN_Init+0x120>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan) != HAL_OK)
 80040f2:	482b      	ldr	r0, [pc, #172]	; (80041a0 <MX_FDCAN_Init+0x120>)
 80040f4:	f7fd fabe 	bl	8001674 <HAL_FDCAN_Init>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <MX_FDCAN_Init+0x82>
	{
		Error_Handler();
 80040fe:	f000 f877 	bl	80041f0 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8004102:	2201      	movs	r2, #1
 8004104:	2140      	movs	r1, #64	; 0x40
 8004106:	4826      	ldr	r0, [pc, #152]	; (80041a0 <MX_FDCAN_Init+0x120>)
 8004108:	f7fd fc99 	bl	8001a3e <HAL_FDCAN_ConfigRxFifoOverwrite>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <MX_FDCAN_Init+0x96>
	{
		Error_Handler();
 8004112:	f000 f86d 	bl	80041f0 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8004116:	2201      	movs	r2, #1
 8004118:	2141      	movs	r1, #65	; 0x41
 800411a:	4821      	ldr	r0, [pc, #132]	; (80041a0 <MX_FDCAN_Init+0x120>)
 800411c:	f7fd fc8f 	bl	8001a3e <HAL_FDCAN_ConfigRxFifoOverwrite>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <MX_FDCAN_Init+0xaa>
	{
		Error_Handler();
 8004126:	f000 f863 	bl	80041f0 <Error_Handler>
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
	{
		Error_Handler();
	}*/ //no config yet

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800412a:	2300      	movs	r3, #0
 800412c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 1;
 800412e:	2301      	movs	r3, #1
 8004130:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8004132:	2302      	movs	r3, #2
 8004134:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8004136:	2301      	movs	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_SYNC;
 800413a:	2380      	movs	r3, #128	; 0x80
 800413c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 800413e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004142:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 8004144:	463b      	mov	r3, r7
 8004146:	4619      	mov	r1, r3
 8004148:	4815      	ldr	r0, [pc, #84]	; (80041a0 <MX_FDCAN_Init+0x120>)
 800414a:	f7fd fbed 	bl	8001928 <HAL_FDCAN_ConfigFilter>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_FDCAN_Init+0xd8>
	{
		Error_Handler();
 8004154:	f000 f84c 	bl	80041f0 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 8004158:	2301      	movs	r3, #1
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2301      	movs	r3, #1
 800415e:	2202      	movs	r2, #2
 8004160:	2102      	movs	r1, #2
 8004162:	480f      	ldr	r0, [pc, #60]	; (80041a0 <MX_FDCAN_Init+0x120>)
 8004164:	f7fd fc3a 	bl	80019dc <HAL_FDCAN_ConfigGlobalFilter>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <MX_FDCAN_Init+0xf2>
	{
		Error_Handler();
 800416e:	f000 f83f 	bl	80041f0 <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan) != HAL_OK)
 8004172:	480b      	ldr	r0, [pc, #44]	; (80041a0 <MX_FDCAN_Init+0x120>)
 8004174:	f7fd fc9c 	bl	8001ab0 <HAL_FDCAN_Start>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <MX_FDCAN_Init+0x102>
	{
		Error_Handler();
 800417e:	f000 f837 	bl	80041f0 <Error_Handler>
	}
	if(HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004182:	2200      	movs	r2, #0
 8004184:	2101      	movs	r1, #1
 8004186:	4806      	ldr	r0, [pc, #24]	; (80041a0 <MX_FDCAN_Init+0x120>)
 8004188:	f7fd fd10 	bl	8001bac <HAL_FDCAN_ActivateNotification>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <MX_FDCAN_Init+0x116>
	{
		Error_Handler();
 8004192:	f000 f82d 	bl	80041f0 <Error_Handler>
	}
}
 8004196:	bf00      	nop
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	200000b8 	.word	0x200000b8
 80041a4:	40006400 	.word	0x40006400

080041a8 <MX_TIM7_Init>:

static void MX_TIM7_Init(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
	htim7.Instance = TIM7;
 80041ac:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <MX_TIM7_Init+0x40>)
 80041ae:	4a0f      	ldr	r2, [pc, #60]	; (80041ec <MX_TIM7_Init+0x44>)
 80041b0:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 16999;
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <MX_TIM7_Init+0x40>)
 80041b4:	f244 2267 	movw	r2, #16999	; 0x4267
 80041b8:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ba:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <MX_TIM7_Init+0x40>)
 80041bc:	2200      	movs	r2, #0
 80041be:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 10000;
 80041c0:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <MX_TIM7_Init+0x40>)
 80041c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80041c6:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041c8:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <MX_TIM7_Init+0x40>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80041ce:	4806      	ldr	r0, [pc, #24]	; (80041e8 <MX_TIM7_Init+0x40>)
 80041d0:	f7ff f996 	bl	8003500 <HAL_TIM_Base_Init>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_TIM7_Init+0x36>
	{
		Error_Handler();
 80041da:	f000 f809 	bl	80041f0 <Error_Handler>
	}

	HAL_TIM_Base_Start_IT(&htim7);
 80041de:	4802      	ldr	r0, [pc, #8]	; (80041e8 <MX_TIM7_Init+0x40>)
 80041e0:	f7ff f9ba 	bl	8003558 <HAL_TIM_Base_Start_IT>
}
 80041e4:	bf00      	nop
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20000198 	.word	0x20000198
 80041ec:	40001400 	.word	0x40001400

080041f0 <Error_Handler>:


void Error_Handler(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80041f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041fc:	f7fe f9d6 	bl	80025ac <HAL_GPIO_TogglePin>
		HAL_Delay(33);
 8004200:	2021      	movs	r0, #33	; 0x21
 8004202:	f7fc f879 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8004206:	e7f5      	b.n	80041f4 <Error_Handler+0x4>

08004208 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	4a04      	ldr	r2, [pc, #16]	; (8004224 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8004212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004216:	6093      	str	r3, [r2, #8]
}
 8004218:	bf00      	nop
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40007000 	.word	0x40007000

08004228 <HAL_MspInit>:
#include "main.h"


void HAL_MspInit(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <HAL_MspInit+0x44>)
 8004230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004232:	4a0e      	ldr	r2, [pc, #56]	; (800426c <HAL_MspInit+0x44>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	6613      	str	r3, [r2, #96]	; 0x60
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <HAL_MspInit+0x44>)
 800423c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	607b      	str	r3, [r7, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <HAL_MspInit+0x44>)
 8004248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424a:	4a08      	ldr	r2, [pc, #32]	; (800426c <HAL_MspInit+0x44>)
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004250:	6593      	str	r3, [r2, #88]	; 0x58
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_MspInit+0x44>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	683b      	ldr	r3, [r7, #0]

	LL_PWR_DisableDeadBatteryPD();
 800425e:	f7ff ffd3 	bl	8004208 <LL_PWR_DisableDeadBatteryPD>
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000

08004270 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	f107 0314 	add.w	r3, r7, #20
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <HAL_FDCAN_MspInit+0x90>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d131      	bne.n	80042f6 <HAL_FDCAN_MspInit+0x86>
  {
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004292:	4b1c      	ldr	r3, [pc, #112]	; (8004304 <HAL_FDCAN_MspInit+0x94>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	4a1b      	ldr	r2, [pc, #108]	; (8004304 <HAL_FDCAN_MspInit+0x94>)
 8004298:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800429c:	6593      	str	r3, [r2, #88]	; 0x58
 800429e:	4b19      	ldr	r3, [pc, #100]	; (8004304 <HAL_FDCAN_MspInit+0x94>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042aa:	4b16      	ldr	r3, [pc, #88]	; (8004304 <HAL_FDCAN_MspInit+0x94>)
 80042ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ae:	4a15      	ldr	r2, [pc, #84]	; (8004304 <HAL_FDCAN_MspInit+0x94>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042b6:	4b13      	ldr	r3, [pc, #76]	; (8004304 <HAL_FDCAN_MspInit+0x94>)
 80042b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80042c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80042c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c8:	2302      	movs	r3, #2
 80042ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d0:	2300      	movs	r3, #0
 80042d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80042d4:	2309      	movs	r3, #9
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d8:	f107 0314 	add.w	r3, r7, #20
 80042dc:	4619      	mov	r1, r3
 80042de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042e2:	f7fd ffc9 	bl	8002278 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80042e6:	2200      	movs	r2, #0
 80042e8:	2100      	movs	r1, #0
 80042ea:	2015      	movs	r0, #21
 80042ec:	f7fd f98d 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80042f0:	2015      	movs	r0, #21
 80042f2:	f7fd f9a4 	bl	800163e <HAL_NVIC_EnableIRQ>
  }
}
 80042f6:	bf00      	nop
 80042f8:	3728      	adds	r7, #40	; 0x28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40006400 	.word	0x40006400
 8004304:	40021000 	.word	0x40021000

08004308 <HAL_TIM_Base_MspInit>:
    HAL_NVIC_DisableIRQ(FDCAN1_IT0_IRQn);
  }
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	{
		__HAL_RCC_TIM6_CLK_ENABLE();
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
	}
	else*/ if(htim_base->Instance==TIM7)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a0d      	ldr	r2, [pc, #52]	; (800434c <HAL_TIM_Base_MspInit+0x44>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d113      	bne.n	8004342 <HAL_TIM_Base_MspInit+0x3a>
	{
		__HAL_RCC_TIM7_CLK_ENABLE();
 800431a:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <HAL_TIM_Base_MspInit+0x48>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	4a0c      	ldr	r2, [pc, #48]	; (8004350 <HAL_TIM_Base_MspInit+0x48>)
 8004320:	f043 0320 	orr.w	r3, r3, #32
 8004324:	6593      	str	r3, [r2, #88]	; 0x58
 8004326:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <HAL_TIM_Base_MspInit+0x48>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004332:	2200      	movs	r2, #0
 8004334:	2100      	movs	r1, #0
 8004336:	2037      	movs	r0, #55	; 0x37
 8004338:	f7fd f967 	bl	800160a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800433c:	2037      	movs	r0, #55	; 0x37
 800433e:	f7fd f97e 	bl	800163e <HAL_NVIC_EnableIRQ>
	{
		__HAL_RCC_TIM16_CLK_ENABLE();
		HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
	}*/
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40001400 	.word	0x40001400
 8004350:	40021000 	.word	0x40021000

08004354 <FDCAN1_IT0_IRQHandler>:
//external type handlers
extern FDCAN_HandleTypeDef hfdcan;
extern TIM_HandleTypeDef htim7;

void FDCAN1_IT0_IRQHandler(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(&hfdcan);
 8004358:	4802      	ldr	r0, [pc, #8]	; (8004364 <FDCAN1_IT0_IRQHandler+0x10>)
 800435a:	f7fd fd0d 	bl	8001d78 <HAL_FDCAN_IRQHandler>
}
 800435e:	bf00      	nop
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	200000b8 	.word	0x200000b8

08004368 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim7);
 800436c:	4802      	ldr	r0, [pc, #8]	; (8004378 <TIM7_IRQHandler+0x10>)
 800436e:	f7ff f91d 	bl	80035ac <HAL_TIM_IRQHandler>
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000198 	.word	0x20000198

0800437c <NMI_Handler>:


void NMI_Handler(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0

}
 8004380:	bf00      	nop
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <HardFault_Handler>:

void HardFault_Handler(void)
{
 800438a:	b480      	push	{r7}
 800438c:	af00      	add	r7, sp, #0
	while (1)
 800438e:	e7fe      	b.n	800438e <HardFault_Handler+0x4>

08004390 <MemManage_Handler>:

	}
}

void MemManage_Handler(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
	while (1)
 8004394:	e7fe      	b.n	8004394 <MemManage_Handler+0x4>

08004396 <BusFault_Handler>:

	}
}

void BusFault_Handler(void)
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0
	while (1)
 800439a:	e7fe      	b.n	800439a <BusFault_Handler+0x4>

0800439c <UsageFault_Handler>:

	}
}

void UsageFault_Handler(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  while (1)
 80043a0:	e7fe      	b.n	80043a0 <UsageFault_Handler+0x4>

080043a2 <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 80043a2:	b480      	push	{r7}
 80043a4:	af00      	add	r7, sp, #0

}
 80043a6:	bf00      	nop
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0

}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <PendSV_Handler>:

void PendSV_Handler(void)
{
 80043be:	b480      	push	{r7}
 80043c0:	af00      	add	r7, sp, #0

}
 80043c2:	bf00      	nop
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <SysTick_Handler>:

void SysTick_Handler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80043d0:	f7fb ff74 	bl	80002bc <HAL_IncTick>
}
 80043d4:	bf00      	nop
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043dc:	4b08      	ldr	r3, [pc, #32]	; (8004400 <SystemInit+0x28>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	4a07      	ldr	r2, [pc, #28]	; (8004400 <SystemInit+0x28>)
 80043e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <SystemInit+0x28>)
 80043ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043f2:	609a      	str	r2, [r3, #8]
#endif
}
 80043f4:	bf00      	nop
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	e000ed00 	.word	0xe000ed00

08004404 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004404:	480d      	ldr	r0, [pc, #52]	; (800443c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004406:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004408:	480d      	ldr	r0, [pc, #52]	; (8004440 <LoopForever+0x6>)
  ldr r1, =_edata
 800440a:	490e      	ldr	r1, [pc, #56]	; (8004444 <LoopForever+0xa>)
  ldr r2, =_sidata
 800440c:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <LoopForever+0xe>)
  movs r3, #0
 800440e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004410:	e002      	b.n	8004418 <LoopCopyDataInit>

08004412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004416:	3304      	adds	r3, #4

08004418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800441a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800441c:	d3f9      	bcc.n	8004412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800441e:	4a0b      	ldr	r2, [pc, #44]	; (800444c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004420:	4c0b      	ldr	r4, [pc, #44]	; (8004450 <LoopForever+0x16>)
  movs r3, #0
 8004422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004424:	e001      	b.n	800442a <LoopFillZerobss>

08004426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004428:	3204      	adds	r2, #4

0800442a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800442a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800442c:	d3fb      	bcc.n	8004426 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800442e:	f7ff ffd3 	bl	80043d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004432:	f000 f811 	bl	8004458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004436:	f7ff fb37 	bl	8003aa8 <main>

0800443a <LoopForever>:

LoopForever:
    b LoopForever
 800443a:	e7fe      	b.n	800443a <LoopForever>
  ldr   r0, =_estack
 800443c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004444:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004448:	080044f0 	.word	0x080044f0
  ldr r2, =_sbss
 800444c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004450:	200001d8 	.word	0x200001d8

08004454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004454:	e7fe      	b.n	8004454 <ADC1_2_IRQHandler>
	...

08004458 <__libc_init_array>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	4e0d      	ldr	r6, [pc, #52]	; (8004490 <__libc_init_array+0x38>)
 800445c:	4c0d      	ldr	r4, [pc, #52]	; (8004494 <__libc_init_array+0x3c>)
 800445e:	1ba4      	subs	r4, r4, r6
 8004460:	10a4      	asrs	r4, r4, #2
 8004462:	2500      	movs	r5, #0
 8004464:	42a5      	cmp	r5, r4
 8004466:	d109      	bne.n	800447c <__libc_init_array+0x24>
 8004468:	4e0b      	ldr	r6, [pc, #44]	; (8004498 <__libc_init_array+0x40>)
 800446a:	4c0c      	ldr	r4, [pc, #48]	; (800449c <__libc_init_array+0x44>)
 800446c:	f000 f820 	bl	80044b0 <_init>
 8004470:	1ba4      	subs	r4, r4, r6
 8004472:	10a4      	asrs	r4, r4, #2
 8004474:	2500      	movs	r5, #0
 8004476:	42a5      	cmp	r5, r4
 8004478:	d105      	bne.n	8004486 <__libc_init_array+0x2e>
 800447a:	bd70      	pop	{r4, r5, r6, pc}
 800447c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004480:	4798      	blx	r3
 8004482:	3501      	adds	r5, #1
 8004484:	e7ee      	b.n	8004464 <__libc_init_array+0xc>
 8004486:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800448a:	4798      	blx	r3
 800448c:	3501      	adds	r5, #1
 800448e:	e7f2      	b.n	8004476 <__libc_init_array+0x1e>
 8004490:	080044e8 	.word	0x080044e8
 8004494:	080044e8 	.word	0x080044e8
 8004498:	080044e8 	.word	0x080044e8
 800449c:	080044ec 	.word	0x080044ec

080044a0 <memset>:
 80044a0:	4402      	add	r2, r0
 80044a2:	4603      	mov	r3, r0
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d100      	bne.n	80044aa <memset+0xa>
 80044a8:	4770      	bx	lr
 80044aa:	f803 1b01 	strb.w	r1, [r3], #1
 80044ae:	e7f9      	b.n	80044a4 <memset+0x4>

080044b0 <_init>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	bf00      	nop
 80044b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b6:	bc08      	pop	{r3}
 80044b8:	469e      	mov	lr, r3
 80044ba:	4770      	bx	lr

080044bc <_fini>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	bf00      	nop
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr
