
motorsport_AnalogNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002838  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a10  08002a10  00012a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a30  08002a30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a30  08002a30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a30  08002a30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a30  08002a30  00012a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a34  08002a34  00012a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08002a44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002a44  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e9c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001463  00000000  00000000  00028ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  0002a340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007b8  00000000  00000000  0002abb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c2b6  00000000  00000000  0002b368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000064fc  00000000  00000000  0004761e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b2aea  00000000  00000000  0004db1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00100604  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002184  00000000  00000000  00100680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080029f8 	.word	0x080029f8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080029f8 	.word	0x080029f8

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f000 f95a 	bl	80004dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f002 fac9 	bl	80027d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f966 	bl	8000542 <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f000 f932 	bl	80004f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000008 	.word	0x20000008
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	20000028 	.word	0x20000028
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000028 	.word	0x20000028

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f003 0307 	and.w	r3, r3, #7
 800034a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <__NVIC_SetPriorityGrouping+0x44>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000352:	68ba      	ldr	r2, [r7, #8]
 8000354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000358:	4013      	ands	r3, r2
 800035a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <__NVIC_SetPriorityGrouping+0x44>)
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	60d3      	str	r3, [r2, #12]
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <__NVIC_GetPriorityGrouping+0x18>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	0a1b      	lsrs	r3, r3, #8
 800038e:	f003 0307 	and.w	r3, r3, #7
}
 8000392:	4618      	mov	r0, r3
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db0b      	blt.n	80003ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	f003 021f 	and.w	r2, r3, #31
 80003b8:	4907      	ldr	r1, [pc, #28]	; (80003d8 <__NVIC_EnableIRQ+0x38>)
 80003ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003be:	095b      	lsrs	r3, r3, #5
 80003c0:	2001      	movs	r0, #1
 80003c2:	fa00 f202 	lsl.w	r2, r0, r2
 80003c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000e100 	.word	0xe000e100

080003dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	6039      	str	r1, [r7, #0]
 80003e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db0a      	blt.n	8000406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	b2da      	uxtb	r2, r3
 80003f4:	490c      	ldr	r1, [pc, #48]	; (8000428 <__NVIC_SetPriority+0x4c>)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	0112      	lsls	r2, r2, #4
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	440b      	add	r3, r1
 8000400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000404:	e00a      	b.n	800041c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	b2da      	uxtb	r2, r3
 800040a:	4908      	ldr	r1, [pc, #32]	; (800042c <__NVIC_SetPriority+0x50>)
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	f003 030f 	and.w	r3, r3, #15
 8000412:	3b04      	subs	r3, #4
 8000414:	0112      	lsls	r2, r2, #4
 8000416:	b2d2      	uxtb	r2, r2
 8000418:	440b      	add	r3, r1
 800041a:	761a      	strb	r2, [r3, #24]
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	e000e100 	.word	0xe000e100
 800042c:	e000ed00 	.word	0xe000ed00

08000430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000430:	b480      	push	{r7}
 8000432:	b089      	sub	sp, #36	; 0x24
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f003 0307 	and.w	r3, r3, #7
 8000442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000444:	69fb      	ldr	r3, [r7, #28]
 8000446:	f1c3 0307 	rsb	r3, r3, #7
 800044a:	2b04      	cmp	r3, #4
 800044c:	bf28      	it	cs
 800044e:	2304      	movcs	r3, #4
 8000450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	3304      	adds	r3, #4
 8000456:	2b06      	cmp	r3, #6
 8000458:	d902      	bls.n	8000460 <NVIC_EncodePriority+0x30>
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	3b03      	subs	r3, #3
 800045e:	e000      	b.n	8000462 <NVIC_EncodePriority+0x32>
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000464:	f04f 32ff 	mov.w	r2, #4294967295
 8000468:	69bb      	ldr	r3, [r7, #24]
 800046a:	fa02 f303 	lsl.w	r3, r2, r3
 800046e:	43da      	mvns	r2, r3
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	401a      	ands	r2, r3
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000478:	f04f 31ff 	mov.w	r1, #4294967295
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	43d9      	mvns	r1, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000488:	4313      	orrs	r3, r2
         );
}
 800048a:	4618      	mov	r0, r3
 800048c:	3724      	adds	r7, #36	; 0x24
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004a8:	d301      	bcc.n	80004ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004aa:	2301      	movs	r3, #1
 80004ac:	e00f      	b.n	80004ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <SysTick_Config+0x40>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3b01      	subs	r3, #1
 80004b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004b6:	210f      	movs	r1, #15
 80004b8:	f04f 30ff 	mov.w	r0, #4294967295
 80004bc:	f7ff ff8e 	bl	80003dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <SysTick_Config+0x40>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <SysTick_Config+0x40>)
 80004c8:	2207      	movs	r2, #7
 80004ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004cc:	2300      	movs	r3, #0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	e000e010 	.word	0xe000e010

080004dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f7ff ff29 	bl	800033c <__NVIC_SetPriorityGrouping>
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b086      	sub	sp, #24
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	4603      	mov	r3, r0
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
 80004fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000500:	f7ff ff40 	bl	8000384 <__NVIC_GetPriorityGrouping>
 8000504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	68b9      	ldr	r1, [r7, #8]
 800050a:	6978      	ldr	r0, [r7, #20]
 800050c:	f7ff ff90 	bl	8000430 <NVIC_EncodePriority>
 8000510:	4602      	mov	r2, r0
 8000512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000516:	4611      	mov	r1, r2
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ff5f 	bl	80003dc <__NVIC_SetPriority>
}
 800051e:	bf00      	nop
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff33 	bl	80003a0 <__NVIC_EnableIRQ>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ffa4 	bl	8000498 <SysTick_Config>
 8000550:	4603      	mov	r3, r0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e147      	b.n	80007fe <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d106      	bne.n	8000588 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2200      	movs	r2, #0
 800057e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f002 f948 	bl	8002818 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	699a      	ldr	r2, [r3, #24]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f022 0210 	bic.w	r2, r2, #16
 8000596:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000598:	f7ff fea2 	bl	80002e0 <HAL_GetTick>
 800059c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800059e:	e012      	b.n	80005c6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80005a0:	f7ff fe9e 	bl	80002e0 <HAL_GetTick>
 80005a4:	4602      	mov	r2, r0
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	2b0a      	cmp	r3, #10
 80005ac:	d90b      	bls.n	80005c6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b2:	f043 0201 	orr.w	r2, r3, #1
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2203      	movs	r2, #3
 80005be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e11b      	b.n	80007fe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f003 0308 	and.w	r3, r3, #8
 80005d0:	2b08      	cmp	r3, #8
 80005d2:	d0e5      	beq.n	80005a0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	699a      	ldr	r2, [r3, #24]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f042 0201 	orr.w	r2, r2, #1
 80005e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005e4:	f7ff fe7c 	bl	80002e0 <HAL_GetTick>
 80005e8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80005ea:	e012      	b.n	8000612 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80005ec:	f7ff fe78 	bl	80002e0 <HAL_GetTick>
 80005f0:	4602      	mov	r2, r0
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	2b0a      	cmp	r3, #10
 80005f8:	d90b      	bls.n	8000612 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fe:	f043 0201 	orr.w	r2, r3, #1
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2203      	movs	r2, #3
 800060a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e0f5      	b.n	80007fe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0e5      	beq.n	80005ec <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	699a      	ldr	r2, [r3, #24]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f042 0202 	orr.w	r2, r2, #2
 800062e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a74      	ldr	r2, [pc, #464]	; (8000808 <HAL_FDCAN_Init+0x2ac>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d103      	bne.n	8000642 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800063a:	4a74      	ldr	r2, [pc, #464]	; (800080c <HAL_FDCAN_Init+0x2b0>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7c1b      	ldrb	r3, [r3, #16]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d108      	bne.n	800065c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	699a      	ldr	r2, [r3, #24]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000658:	619a      	str	r2, [r3, #24]
 800065a:	e007      	b.n	800066c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	699a      	ldr	r2, [r3, #24]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800066a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	7c5b      	ldrb	r3, [r3, #17]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d108      	bne.n	8000686 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	699a      	ldr	r2, [r3, #24]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000682:	619a      	str	r2, [r3, #24]
 8000684:	e007      	b.n	8000696 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	699a      	ldr	r2, [r3, #24]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000694:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7c9b      	ldrb	r3, [r3, #18]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d108      	bne.n	80006b0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	699a      	ldr	r2, [r3, #24]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80006ac:	619a      	str	r2, [r3, #24]
 80006ae:	e007      	b.n	80006c0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	699a      	ldr	r2, [r3, #24]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80006be:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	689a      	ldr	r2, [r3, #8]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	430a      	orrs	r2, r1
 80006d4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	699a      	ldr	r2, [r3, #24]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80006e4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	691a      	ldr	r2, [r3, #16]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f022 0210 	bic.w	r2, r2, #16
 80006f4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d108      	bne.n	8000710 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	699a      	ldr	r2, [r3, #24]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f042 0204 	orr.w	r2, r2, #4
 800070c:	619a      	str	r2, [r3, #24]
 800070e:	e02c      	b.n	800076a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d028      	beq.n	800076a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	2b02      	cmp	r3, #2
 800071e:	d01c      	beq.n	800075a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	699a      	ldr	r2, [r3, #24]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800072e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	691a      	ldr	r2, [r3, #16]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f042 0210 	orr.w	r2, r2, #16
 800073e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d110      	bne.n	800076a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f042 0220 	orr.w	r2, r2, #32
 8000756:	619a      	str	r2, [r3, #24]
 8000758:	e007      	b.n	800076a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	699a      	ldr	r2, [r3, #24]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f042 0220 	orr.w	r2, r2, #32
 8000768:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	3b01      	subs	r3, #1
 8000770:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	3b01      	subs	r3, #1
 8000778:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800077a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6a1b      	ldr	r3, [r3, #32]
 8000780:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000782:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	3b01      	subs	r3, #1
 800078c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000792:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000794:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800079e:	d115      	bne.n	80007cc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007aa:	3b01      	subs	r3, #1
 80007ac:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80007ae:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	3b01      	subs	r3, #1
 80007b6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80007b8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c0:	3b01      	subs	r3, #1
 80007c2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80007c8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80007ca:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 fbea 	bl	8000fbc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2201      	movs	r2, #1
 80007f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40006400 	.word	0x40006400
 800080c:	40006500 	.word	0x40006500

08000810 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000820:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000822:	7dfb      	ldrb	r3, [r7, #23]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d002      	beq.n	800082e <HAL_FDCAN_ConfigFilter+0x1e>
 8000828:	7dfb      	ldrb	r3, [r7, #23]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d13d      	bne.n	80008aa <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d119      	bne.n	800086a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000842:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	691b      	ldr	r3, [r3, #16]
 8000848:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800084a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000850:	4313      	orrs	r3, r2
 8000852:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4413      	add	r3, r2
 8000860:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	e01d      	b.n	80008a6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	075a      	lsls	r2, r3, #29
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	4313      	orrs	r3, r2
 8000876:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	079a      	lsls	r2, r3, #30
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	4313      	orrs	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	4413      	add	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	3304      	adds	r3, #4
 800089e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	e006      	b.n	80008b8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	f043 0202 	orr.w	r2, r3, #2
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
  }
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	371c      	adds	r7, #28
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d116      	bne.n	800090c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008e6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	011a      	lsls	r2, r3, #4
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	431a      	orrs	r2, r3
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	431a      	orrs	r2, r3
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	431a      	orrs	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	430a      	orrs	r2, r1
 8000904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                         (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                                         (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                                         (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8000908:	2300      	movs	r3, #0
 800090a:	e006      	b.n	800091a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000910:	f043 0204 	orr.w	r2, r3, #4
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000918:	2301      	movs	r3, #1
  }
}
 800091a:	4618      	mov	r0, r3
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 8000926:	b480      	push	{r7}
 8000928:	b085      	sub	sp, #20
 800092a:	af00      	add	r7, sp, #0
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b01      	cmp	r3, #1
 800093c:	d11f      	bne.n	800097e <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	2b40      	cmp	r3, #64	; 0x40
 8000942:	d10d      	bne.n	8000960 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800094c:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	025a      	lsls	r2, r3, #9
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	430a      	orrs	r2, r1
 800095a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800095e:	e00c      	b.n	800097a <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000968:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	021a      	lsls	r2, r3, #8
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	430a      	orrs	r2, r1
 8000976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Return function status */
    return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e006      	b.n	800098c <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000982:	f043 0204 	orr.w	r2, r3, #4
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
  }
}
 800098c:	4618      	mov	r0, r3
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d110      	bne.n	80009ce <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2202      	movs	r2, #2
 80009b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	699a      	ldr	r2, [r3, #24]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f022 0201 	bic.w	r2, r2, #1
 80009c2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e006      	b.n	80009dc <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d2:	f043 0204 	orr.w	r2, r3, #4
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
  }
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d12c      	bne.n	8000a5a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d007      	beq.n	8000a20 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e023      	b.n	8000a68 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a28:	0c1b      	lsrs	r3, r3, #16
 8000a2a:	f003 0303 	and.w	r3, r3, #3
 8000a2e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f000 fb16 	bl	8001068 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2101      	movs	r1, #1
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	fa01 f202 	lsl.w	r2, r1, r2
 8000a48:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	409a      	lsls	r2, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e006      	b.n	8000a68 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5e:	f043 0208 	orr.w	r2, r3, #8
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
  }
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a80:	f003 0307 	and.w	r3, r3, #7
 8000a84:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8000a86:	68fb      	ldr	r3, [r7, #12]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000aa6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000aa8:	7dfb      	ldrb	r3, [r7, #23]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d003      	beq.n	8000ab6 <HAL_FDCAN_ActivateNotification+0x22>
 8000aae:	7dfb      	ldrb	r3, [r7, #23]
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	f040 80c8 	bne.w	8000c46 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	f003 0307 	and.w	r3, r3, #7
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d004      	beq.n	8000ad2 <HAL_FDCAN_ActivateNotification+0x3e>
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d03b      	beq.n	8000b4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d004      	beq.n	8000ae6 <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d031      	beq.n	8000b4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d004      	beq.n	8000afa <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d027      	beq.n	8000b4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d004      	beq.n	8000b0e <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01d      	beq.n	8000b4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d004      	beq.n	8000b22 <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	f003 0310 	and.w	r3, r3, #16
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d013      	beq.n	8000b4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d004      	beq.n	8000b36 <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	f003 0320 	and.w	r3, r3, #32
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d009      	beq.n	8000b4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00c      	beq.n	8000b5a <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d107      	bne.n	8000b5a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f042 0201 	orr.w	r2, r2, #1
 8000b58:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d004      	beq.n	8000b6e <HAL_FDCAN_ActivateNotification+0xda>
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d13b      	bne.n	8000be6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d004      	beq.n	8000b82 <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d131      	bne.n	8000be6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d004      	beq.n	8000b96 <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d127      	bne.n	8000be6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d004      	beq.n	8000baa <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d11d      	bne.n	8000be6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d004      	beq.n	8000bbe <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d113      	bne.n	8000be6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d004      	beq.n	8000bd2 <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	f003 0320 	and.w	r3, r3, #32
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d109      	bne.n	8000be6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00c      	beq.n	8000bf6 <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d007      	beq.n	8000bf6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f042 0202 	orr.w	r2, r2, #2
 8000bf4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d009      	beq.n	8000c14 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d009      	beq.n	8000c32 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	68ba      	ldr	r2, [r7, #8]
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e006      	b.n	8000c54 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4a:	f043 0202 	orr.w	r2, r3, #2
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
  }
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	371c      	adds	r7, #28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c6e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c92:	6a3a      	ldr	r2, [r7, #32]
 8000c94:	4013      	ands	r3, r2
 8000c96:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000ca2:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000caa:	69fa      	ldr	r2, [r7, #28]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cb6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8000cba:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cd2:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00d      	beq.n	8000d0a <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d006      	beq.n	8000d0a <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2240      	movs	r2, #64	; 0x40
 8000d02:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f000 f939 	bl	8000f7c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d01b      	beq.n	8000d50 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d014      	beq.n	8000d50 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d2e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d46:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8000d48:	6939      	ldr	r1, [r7, #16]
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f8f7 	bl	8000f3e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d007      	beq.n	8000d66 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d5c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8000d5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f000 f8b6 	bl	8000ed2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8000d66:	6a3b      	ldr	r3, [r7, #32]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d007      	beq.n	8000d7c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6a3a      	ldr	r2, [r7, #32]
 8000d72:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8000d74:	6a39      	ldr	r1, [r7, #32]
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f000 f8b6 	bl	8000ee8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d007      	beq.n	8000d92 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	69fa      	ldr	r2, [r7, #28]
 8000d88:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8000d8a:	69f9      	ldr	r1, [r7, #28]
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 f8b6 	bl	8000efe <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00e      	beq.n	8000dbe <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d007      	beq.n	8000dbe <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 f8ab 	bl	8000f14 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d01a      	beq.n	8000e02 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d013      	beq.n	8000e02 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000de2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4013      	ands	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8000dfa:	68f9      	ldr	r1, [r7, #12]
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f000 f893 	bl	8000f28 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00e      	beq.n	8000e2e <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d007      	beq.n	8000e2e <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e26:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 f893 	bl	8000f54 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d00e      	beq.n	8000e5a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d007      	beq.n	8000e5a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e52:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f887 	bl	8000f68 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d011      	beq.n	8000e8c <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00a      	beq.n	8000e8c <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d007      	beq.n	8000ea2 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8000e9a:	6979      	ldr	r1, [r7, #20]
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 f881 	bl	8000fa4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d009      	beq.n	8000ebc <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f863 	bl	8000f90 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8000fc6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fd6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fde:	041a      	lsls	r2, r3, #16
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ffc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001004:	061a      	lsls	r2, r3, #24
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	e005      	b.n	800104a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3304      	adds	r3, #4
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	429a      	cmp	r2, r3
 8001054:	d3f3      	bcc.n	800103e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	4000a400 	.word	0x4000a400

08001068 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10a      	bne.n	8001094 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001086:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800108e:	4313      	orrs	r3, r2
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e00a      	b.n	80010aa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800109c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80010a2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80010a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010a8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80010b4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80010ba:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80010c0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4413      	add	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	440b      	add	r3, r1
 80010da:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	3304      	adds	r3, #4
 80010e6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	3304      	adds	r3, #4
 80010f2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	e020      	b.n	800113c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3303      	adds	r3, #3
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3302      	adds	r3, #2
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	440b      	add	r3, r1
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001112:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3301      	adds	r3, #1
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	440b      	add	r3, r1
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001120:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	440a      	add	r2, r1
 8001128:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800112a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	3304      	adds	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3304      	adds	r3, #4
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0c1b      	lsrs	r3, r3, #16
 8001142:	4a06      	ldr	r2, [pc, #24]	; (800115c <FDCAN_CopyMessageToRAM+0xf4>)
 8001144:	5cd3      	ldrb	r3, [r2, r3]
 8001146:	461a      	mov	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	4293      	cmp	r3, r2
 800114c:	d3d5      	bcc.n	80010fa <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800114e:	bf00      	nop
 8001150:	3724      	adds	r7, #36	; 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	08002a10 	.word	0x08002a10

08001160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800116e:	e15a      	b.n	8001426 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	4013      	ands	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 814c 	beq.w	8001420 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x38>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b12      	cmp	r3, #18
 8001196:	d123      	bne.n	80011e0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	08da      	lsrs	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3208      	adds	r2, #8
 80011da:	6939      	ldr	r1, [r7, #16]
 80011dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0203 	and.w	r2, r3, #3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d00b      	beq.n	8001234 <HAL_GPIO_Init+0xd4>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d007      	beq.n	8001234 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001228:	2b11      	cmp	r3, #17
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b12      	cmp	r3, #18
 8001232:	d130      	bne.n	8001296 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800126a:	2201      	movs	r2, #1
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	f003 0201 	and.w	r2, r3, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80a6 	beq.w	8001420 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d4:	4b5b      	ldr	r3, [pc, #364]	; (8001444 <HAL_GPIO_Init+0x2e4>)
 80012d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d8:	4a5a      	ldr	r2, [pc, #360]	; (8001444 <HAL_GPIO_Init+0x2e4>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6613      	str	r3, [r2, #96]	; 0x60
 80012e0:	4b58      	ldr	r3, [pc, #352]	; (8001444 <HAL_GPIO_Init+0x2e4>)
 80012e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ec:	4a56      	ldr	r2, [pc, #344]	; (8001448 <HAL_GPIO_Init+0x2e8>)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	220f      	movs	r2, #15
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001316:	d01f      	beq.n	8001358 <HAL_GPIO_Init+0x1f8>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a4c      	ldr	r2, [pc, #304]	; (800144c <HAL_GPIO_Init+0x2ec>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d019      	beq.n	8001354 <HAL_GPIO_Init+0x1f4>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a4b      	ldr	r2, [pc, #300]	; (8001450 <HAL_GPIO_Init+0x2f0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d013      	beq.n	8001350 <HAL_GPIO_Init+0x1f0>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a4a      	ldr	r2, [pc, #296]	; (8001454 <HAL_GPIO_Init+0x2f4>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d00d      	beq.n	800134c <HAL_GPIO_Init+0x1ec>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a49      	ldr	r2, [pc, #292]	; (8001458 <HAL_GPIO_Init+0x2f8>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d007      	beq.n	8001348 <HAL_GPIO_Init+0x1e8>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a48      	ldr	r2, [pc, #288]	; (800145c <HAL_GPIO_Init+0x2fc>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d101      	bne.n	8001344 <HAL_GPIO_Init+0x1e4>
 8001340:	2305      	movs	r3, #5
 8001342:	e00a      	b.n	800135a <HAL_GPIO_Init+0x1fa>
 8001344:	2306      	movs	r3, #6
 8001346:	e008      	b.n	800135a <HAL_GPIO_Init+0x1fa>
 8001348:	2304      	movs	r3, #4
 800134a:	e006      	b.n	800135a <HAL_GPIO_Init+0x1fa>
 800134c:	2303      	movs	r3, #3
 800134e:	e004      	b.n	800135a <HAL_GPIO_Init+0x1fa>
 8001350:	2302      	movs	r3, #2
 8001352:	e002      	b.n	800135a <HAL_GPIO_Init+0x1fa>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <HAL_GPIO_Init+0x1fa>
 8001358:	2300      	movs	r3, #0
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	f002 0203 	and.w	r2, r2, #3
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	4093      	lsls	r3, r2
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800136a:	4937      	ldr	r1, [pc, #220]	; (8001448 <HAL_GPIO_Init+0x2e8>)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001378:	4b39      	ldr	r3, [pc, #228]	; (8001460 <HAL_GPIO_Init+0x300>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800139c:	4a30      	ldr	r2, [pc, #192]	; (8001460 <HAL_GPIO_Init+0x300>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80013a2:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <HAL_GPIO_Init+0x300>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013c6:	4a26      	ldr	r2, [pc, #152]	; (8001460 <HAL_GPIO_Init+0x300>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <HAL_GPIO_Init+0x300>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013f0:	4a1b      	ldr	r2, [pc, #108]	; (8001460 <HAL_GPIO_Init+0x300>)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <HAL_GPIO_Init+0x300>)
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43db      	mvns	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800141a:	4a11      	ldr	r2, [pc, #68]	; (8001460 <HAL_GPIO_Init+0x300>)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3301      	adds	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	f47f ae9d 	bne.w	8001170 <HAL_GPIO_Init+0x10>
  }
}
 8001436:	bf00      	nop
 8001438:	371c      	adds	r7, #28
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000
 8001448:	40010000 	.word	0x40010000
 800144c:	48000400 	.word	0x48000400
 8001450:	48000800 	.word	0x48000800
 8001454:	48000c00 	.word	0x48000c00
 8001458:	48001000 	.word	0x48001000
 800145c:	48001400 	.word	0x48001400
 8001460:	40010400 	.word	0x40010400

08001464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001480:	e002      	b.n	8001488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ac:	887a      	ldrh	r2, [r7, #2]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80014b2:	e002      	b.n	80014ba <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014b4:	887a      	ldrh	r2, [r7, #2]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d141      	bne.n	800155a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014d6:	4b4b      	ldr	r3, [pc, #300]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e2:	d131      	bne.n	8001548 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014e4:	4b47      	ldr	r3, [pc, #284]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ea:	4a46      	ldr	r2, [pc, #280]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f4:	4b43      	ldr	r3, [pc, #268]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014fc:	4a41      	ldr	r2, [pc, #260]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001502:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001504:	4b40      	ldr	r3, [pc, #256]	; (8001608 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2232      	movs	r2, #50	; 0x32
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	4a3f      	ldr	r2, [pc, #252]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001510:	fba2 2303 	umull	r2, r3, r2, r3
 8001514:	0c9b      	lsrs	r3, r3, #18
 8001516:	3301      	adds	r3, #1
 8001518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800151a:	e002      	b.n	8001522 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3b01      	subs	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001522:	4b38      	ldr	r3, [pc, #224]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800152e:	d102      	bne.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f2      	bne.n	800151c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001542:	d158      	bne.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e057      	b.n	80015f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001548:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800154e:	4a2d      	ldr	r2, [pc, #180]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001558:	e04d      	b.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001560:	d141      	bne.n	80015e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001562:	4b28      	ldr	r3, [pc, #160]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800156a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800156e:	d131      	bne.n	80015d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001576:	4a23      	ldr	r2, [pc, #140]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001580:	4b20      	ldr	r3, [pc, #128]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001588:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2232      	movs	r2, #50	; 0x32
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	0c9b      	lsrs	r3, r3, #18
 80015a2:	3301      	adds	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a6:	e002      	b.n	80015ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ba:	d102      	bne.n	80015c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f2      	bne.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ce:	d112      	bne.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e011      	b.n	80015f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015e4:	e007      	b.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40007000 	.word	0x40007000
 8001608:	20000008 	.word	0x20000008
 800160c:	431bde83 	.word	0x431bde83

08001610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e308      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d075      	beq.n	800171a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162e:	4ba3      	ldr	r3, [pc, #652]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001638:	4ba0      	ldr	r3, [pc, #640]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b0c      	cmp	r3, #12
 8001646:	d102      	bne.n	800164e <HAL_RCC_OscConfig+0x3e>
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b03      	cmp	r3, #3
 800164c:	d002      	beq.n	8001654 <HAL_RCC_OscConfig+0x44>
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	2b08      	cmp	r3, #8
 8001652:	d10b      	bne.n	800166c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	4b99      	ldr	r3, [pc, #612]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d05b      	beq.n	8001718 <HAL_RCC_OscConfig+0x108>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d157      	bne.n	8001718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e2e3      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001674:	d106      	bne.n	8001684 <HAL_RCC_OscConfig+0x74>
 8001676:	4b91      	ldr	r3, [pc, #580]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a90      	ldr	r2, [pc, #576]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e01d      	b.n	80016c0 <HAL_RCC_OscConfig+0xb0>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x98>
 800168e:	4b8b      	ldr	r3, [pc, #556]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a8a      	ldr	r2, [pc, #552]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 8001694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b88      	ldr	r3, [pc, #544]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a87      	ldr	r2, [pc, #540]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0xb0>
 80016a8:	4b84      	ldr	r3, [pc, #528]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a83      	ldr	r2, [pc, #524]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 80016ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b81      	ldr	r3, [pc, #516]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a80      	ldr	r2, [pc, #512]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 80016ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d013      	beq.n	80016f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7fe fe0a 	bl	80002e0 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d0:	f7fe fe06 	bl	80002e0 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e2a8      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e2:	4b76      	ldr	r3, [pc, #472]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0xc0>
 80016ee:	e014      	b.n	800171a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7fe fdf6 	bl	80002e0 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f8:	f7fe fdf2 	bl	80002e0 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e294      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800170a:	4b6c      	ldr	r3, [pc, #432]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0xe8>
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d075      	beq.n	8001812 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001726:	4b65      	ldr	r3, [pc, #404]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001730:	4b62      	ldr	r3, [pc, #392]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b0c      	cmp	r3, #12
 800173e:	d102      	bne.n	8001746 <HAL_RCC_OscConfig+0x136>
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d002      	beq.n	800174c <HAL_RCC_OscConfig+0x13c>
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b04      	cmp	r3, #4
 800174a:	d11f      	bne.n	800178c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800174c:	4b5b      	ldr	r3, [pc, #364]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_OscConfig+0x154>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e267      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b55      	ldr	r3, [pc, #340]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	4952      	ldr	r1, [pc, #328]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001778:	4b51      	ldr	r3, [pc, #324]	; (80018c0 <HAL_RCC_OscConfig+0x2b0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fd63 	bl	8000248 <HAL_InitTick>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d043      	beq.n	8001810 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e253      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d023      	beq.n	80017dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001794:	4b49      	ldr	r3, [pc, #292]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a48      	ldr	r2, [pc, #288]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 800179a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7fe fd9e 	bl	80002e0 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a8:	f7fe fd9a 	bl	80002e0 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e23c      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ba:	4b40      	ldr	r3, [pc, #256]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c6:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	061b      	lsls	r3, r3, #24
 80017d4:	4939      	ldr	r1, [pc, #228]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
 80017da:	e01a      	b.n	8001812 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017dc:	4b37      	ldr	r3, [pc, #220]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a36      	ldr	r2, [pc, #216]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 80017e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7fe fd7a 	bl	80002e0 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f0:	f7fe fd76 	bl	80002e0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e218      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001802:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x1e0>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d03c      	beq.n	8001898 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d01c      	beq.n	8001860 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001826:	4b25      	ldr	r3, [pc, #148]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 8001828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182c:	4a23      	ldr	r2, [pc, #140]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001836:	f7fe fd53 	bl	80002e0 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183e:	f7fe fd4f 	bl	80002e0 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e1f1      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 8001852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0ef      	beq.n	800183e <HAL_RCC_OscConfig+0x22e>
 800185e:	e01b      	b.n	8001898 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 8001862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001866:	4a15      	ldr	r2, [pc, #84]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7fe fd36 	bl	80002e0 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001878:	f7fe fd32 	bl	80002e0 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1d4      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 800188c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1ef      	bne.n	8001878 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80ab 	beq.w	80019fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018aa:	4b04      	ldr	r3, [pc, #16]	; (80018bc <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_RCC_OscConfig+0x2b4>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e005      	b.n	80018c6 <HAL_RCC_OscConfig+0x2b6>
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	20000000 	.word	0x20000000
 80018c4:	2300      	movs	r3, #0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00d      	beq.n	80018e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	4baf      	ldr	r3, [pc, #700]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	4aae      	ldr	r2, [pc, #696]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	6593      	str	r3, [r2, #88]	; 0x58
 80018d6:	4bac      	ldr	r3, [pc, #688]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018e2:	2301      	movs	r3, #1
 80018e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e6:	4ba9      	ldr	r3, [pc, #676]	; (8001b8c <HAL_RCC_OscConfig+0x57c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d118      	bne.n	8001924 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018f2:	4ba6      	ldr	r3, [pc, #664]	; (8001b8c <HAL_RCC_OscConfig+0x57c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4aa5      	ldr	r2, [pc, #660]	; (8001b8c <HAL_RCC_OscConfig+0x57c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fe:	f7fe fcef 	bl	80002e0 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001906:	f7fe fceb 	bl	80002e0 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e18d      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001918:	4b9c      	ldr	r3, [pc, #624]	; (8001b8c <HAL_RCC_OscConfig+0x57c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d108      	bne.n	800193e <HAL_RCC_OscConfig+0x32e>
 800192c:	4b96      	ldr	r3, [pc, #600]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001932:	4a95      	ldr	r2, [pc, #596]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800193c:	e024      	b.n	8001988 <HAL_RCC_OscConfig+0x378>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d110      	bne.n	8001968 <HAL_RCC_OscConfig+0x358>
 8001946:	4b90      	ldr	r3, [pc, #576]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194c:	4a8e      	ldr	r2, [pc, #568]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001956:	4b8c      	ldr	r3, [pc, #560]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195c:	4a8a      	ldr	r2, [pc, #552]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001966:	e00f      	b.n	8001988 <HAL_RCC_OscConfig+0x378>
 8001968:	4b87      	ldr	r3, [pc, #540]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 800196a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196e:	4a86      	ldr	r2, [pc, #536]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001978:	4b83      	ldr	r3, [pc, #524]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 800197a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197e:	4a82      	ldr	r2, [pc, #520]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001980:	f023 0304 	bic.w	r3, r3, #4
 8001984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d016      	beq.n	80019be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001990:	f7fe fca6 	bl	80002e0 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001996:	e00a      	b.n	80019ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001998:	f7fe fca2 	bl	80002e0 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e142      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ae:	4b76      	ldr	r3, [pc, #472]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 80019b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ed      	beq.n	8001998 <HAL_RCC_OscConfig+0x388>
 80019bc:	e015      	b.n	80019ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7fe fc8f 	bl	80002e0 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7fe fc8b 	bl	80002e0 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e12b      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019dc:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 80019de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ed      	bne.n	80019c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019ea:	7ffb      	ldrb	r3, [r7, #31]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f0:	4b65      	ldr	r3, [pc, #404]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	4a64      	ldr	r2, [pc, #400]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 80019f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0320 	and.w	r3, r3, #32
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d03c      	beq.n	8001a82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01c      	beq.n	8001a4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a10:	4b5d      	ldr	r3, [pc, #372]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a16:	4a5c      	ldr	r2, [pc, #368]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a20:	f7fe fc5e 	bl	80002e0 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a28:	f7fe fc5a 	bl	80002e0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e0fc      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a3a:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0ef      	beq.n	8001a28 <HAL_RCC_OscConfig+0x418>
 8001a48:	e01b      	b.n	8001a82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a4a:	4b4f      	ldr	r3, [pc, #316]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a50:	4a4d      	ldr	r2, [pc, #308]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7fe fc41 	bl	80002e0 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a62:	f7fe fc3d 	bl	80002e0 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0df      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a74:	4b44      	ldr	r3, [pc, #272]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ef      	bne.n	8001a62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80d3 	beq.w	8001c32 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a8c:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	f000 808d 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d15a      	bne.n	8001b58 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa2:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a38      	ldr	r2, [pc, #224]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001aa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7fe fc17 	bl	80002e0 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7fe fc13 	bl	80002e0 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e0b5      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad4:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_RCC_OscConfig+0x580>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6a11      	ldr	r1, [r2, #32]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001aee:	0212      	lsls	r2, r2, #8
 8001af0:	4311      	orrs	r1, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001af6:	0852      	lsrs	r2, r2, #1
 8001af8:	3a01      	subs	r2, #1
 8001afa:	0552      	lsls	r2, r2, #21
 8001afc:	4311      	orrs	r1, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b02:	0852      	lsrs	r2, r2, #1
 8001b04:	3a01      	subs	r2, #1
 8001b06:	0652      	lsls	r2, r2, #25
 8001b08:	4311      	orrs	r1, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b0e:	06d2      	lsls	r2, r2, #27
 8001b10:	430a      	orrs	r2, r1
 8001b12:	491d      	ldr	r1, [pc, #116]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1a      	ldr	r2, [pc, #104]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7fe fbd6 	bl	80002e0 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7fe fbd2 	bl	80002e0 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e074      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x528>
 8001b56:	e06c      	b.n	8001c32 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b62:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001b6a:	f023 0303 	bic.w	r3, r3, #3
 8001b6e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <HAL_RCC_OscConfig+0x578>)
 8001b76:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7fe fbae 	bl	80002e0 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b86:	e00e      	b.n	8001ba6 <HAL_RCC_OscConfig+0x596>
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b94:	f7fe fba4 	bl	80002e0 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e046      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba6:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <HAL_RCC_OscConfig+0x62c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x584>
 8001bb2:	e03e      	b.n	8001c32 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e039      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_RCC_OscConfig+0x62c>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0203 	and.w	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d12c      	bne.n	8001c2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	3b01      	subs	r3, #1
 8001be0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d123      	bne.n	8001c2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d11b      	bne.n	8001c2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d113      	bne.n	8001c2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	085b      	lsrs	r3, r3, #1
 8001c12:	3b01      	subs	r3, #1
 8001c14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d109      	bne.n	8001c2e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c24:	085b      	lsrs	r3, r3, #1
 8001c26:	3b01      	subs	r3, #1
 8001c28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000

08001c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e11e      	b.n	8001e96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c58:	4b91      	ldr	r3, [pc, #580]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d910      	bls.n	8001c88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c66:	4b8e      	ldr	r3, [pc, #568]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 020f 	bic.w	r2, r3, #15
 8001c6e:	498c      	ldr	r1, [pc, #560]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	4b8a      	ldr	r3, [pc, #552]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e106      	b.n	8001e96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d073      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d129      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9c:	4b81      	ldr	r3, [pc, #516]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0f4      	b.n	8001e96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001cac:	f000 f966 	bl	8001f7c <RCC_GetSysClockFreqFromPLLSource>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4a7c      	ldr	r2, [pc, #496]	; (8001ea8 <HAL_RCC_ClockConfig+0x268>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d93f      	bls.n	8001d3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cba:	4b7a      	ldr	r3, [pc, #488]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d033      	beq.n	8001d3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d12f      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cda:	4b72      	ldr	r3, [pc, #456]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ce2:	4a70      	ldr	r2, [pc, #448]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e024      	b.n	8001d3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf8:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d109      	bne.n	8001d18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0c6      	b.n	8001e96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d08:	4b66      	ldr	r3, [pc, #408]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0be      	b.n	8001e96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d18:	f000 f8ce 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4a61      	ldr	r2, [pc, #388]	; (8001ea8 <HAL_RCC_ClockConfig+0x268>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d909      	bls.n	8001d3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d26:	4b5f      	ldr	r3, [pc, #380]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d2e:	4a5d      	ldr	r2, [pc, #372]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f023 0203 	bic.w	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4957      	ldr	r1, [pc, #348]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d4c:	f7fe fac8 	bl	80002e0 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d54:	f7fe fac4 	bl	80002e0 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e095      	b.n	8001e96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6a:	4b4e      	ldr	r3, [pc, #312]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 020c 	and.w	r2, r3, #12
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d1eb      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d023      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d94:	4b43      	ldr	r3, [pc, #268]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a42      	ldr	r2, [pc, #264]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d007      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001dac:	4b3d      	ldr	r3, [pc, #244]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001db4:	4a3b      	ldr	r2, [pc, #236]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001db6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dbc:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4936      	ldr	r1, [pc, #216]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2b80      	cmp	r3, #128	; 0x80
 8001dd4:	d105      	bne.n	8001de2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001dd6:	4b33      	ldr	r3, [pc, #204]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	4a32      	ldr	r2, [pc, #200]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001ddc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001de0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d21d      	bcs.n	8001e2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 020f 	bic.w	r2, r3, #15
 8001df8:	4929      	ldr	r1, [pc, #164]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e00:	f7fe fa6e 	bl	80002e0 <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7fe fa6a 	bl	80002e0 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e03b      	b.n	8001e96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_RCC_ClockConfig+0x260>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d1ed      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4917      	ldr	r1, [pc, #92]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	490f      	ldr	r1, [pc, #60]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e6a:	f000 f825 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 8001e6e:	4601      	mov	r1, r0
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_RCC_ClockConfig+0x264>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <HAL_RCC_ClockConfig+0x26c>)
 8001e7c:	5cd3      	ldrb	r3, [r2, r3]
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	fa21 f303 	lsr.w	r3, r1, r3
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_RCC_ClockConfig+0x270>)
 8001e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_RCC_ClockConfig+0x274>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe f9da 	bl	8000248 <HAL_InitTick>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40022000 	.word	0x40022000
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	04c4b400 	.word	0x04c4b400
 8001eac:	08002a20 	.word	0x08002a20
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	20000000 	.word	0x20000000

08001eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ebe:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d102      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	e047      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d102      	bne.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001edc:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	e03e      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ee2:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d136      	bne.n	8001f5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3301      	adds	r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d10c      	bne.n	8001f26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f0c:	4a1a      	ldr	r2, [pc, #104]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f14:	4a16      	ldr	r2, [pc, #88]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f16:	68d2      	ldr	r2, [r2, #12]
 8001f18:	0a12      	lsrs	r2, r2, #8
 8001f1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]
      break;
 8001f24:	e00c      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	4a10      	ldr	r2, [pc, #64]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f30:	68d2      	ldr	r2, [r2, #12]
 8001f32:	0a12      	lsrs	r2, r2, #8
 8001f34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f38:	fb02 f303 	mul.w	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
      break;
 8001f3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0e5b      	lsrs	r3, r3, #25
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	e001      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f60:	693b      	ldr	r3, [r7, #16]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	371c      	adds	r7, #28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	00f42400 	.word	0x00f42400
 8001f78:	007a1200 	.word	0x007a1200

08001f7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f82:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3301      	adds	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d10c      	bne.n	8001fba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fa0:	4a17      	ldr	r2, [pc, #92]	; (8002000 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001faa:	68d2      	ldr	r2, [r2, #12]
 8001fac:	0a12      	lsrs	r2, r2, #8
 8001fae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	617b      	str	r3, [r7, #20]
    break;
 8001fb8:	e00c      	b.n	8001fd4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fc4:	68d2      	ldr	r2, [r2, #12]
 8001fc6:	0a12      	lsrs	r2, r2, #8
 8001fc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fcc:	fb02 f303 	mul.w	r3, r2, r3
 8001fd0:	617b      	str	r3, [r7, #20]
    break;
 8001fd2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0e5b      	lsrs	r3, r3, #25
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001fee:	687b      	ldr	r3, [r7, #4]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40021000 	.word	0x40021000
 8002000:	007a1200 	.word	0x007a1200
 8002004:	00f42400 	.word	0x00f42400

08002008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002010:	2300      	movs	r3, #0
 8002012:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002014:	2300      	movs	r3, #0
 8002016:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8098 	beq.w	8002156 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202a:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10d      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	4b40      	ldr	r3, [pc, #256]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	4a3f      	ldr	r2, [pc, #252]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002040:	6593      	str	r3, [r2, #88]	; 0x58
 8002042:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204e:	2301      	movs	r3, #1
 8002050:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002052:	4b3a      	ldr	r3, [pc, #232]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a39      	ldr	r2, [pc, #228]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800205e:	f7fe f93f 	bl	80002e0 <HAL_GetTick>
 8002062:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002064:	e009      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002066:	f7fe f93b 	bl	80002e0 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d902      	bls.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	74fb      	strb	r3, [r7, #19]
        break;
 8002078:	e005      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0ef      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002086:	7cfb      	ldrb	r3, [r7, #19]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d159      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800208c:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002096:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d01e      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d019      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020a8:	4b23      	ldr	r3, [pc, #140]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020b4:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020c4:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ca:	4a1b      	ldr	r2, [pc, #108]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020d4:	4a18      	ldr	r2, [pc, #96]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d016      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7fe f8fb 	bl	80002e0 <HAL_GetTick>
 80020ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ec:	e00b      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7fe f8f7 	bl	80002e0 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d902      	bls.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	74fb      	strb	r3, [r7, #19]
            break;
 8002104:	e006      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0ec      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10b      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	4903      	ldr	r1, [pc, #12]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002130:	e008      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002132:	7cfb      	ldrb	r3, [r7, #19]
 8002134:	74bb      	strb	r3, [r7, #18]
 8002136:	e005      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002138:	40021000 	.word	0x40021000
 800213c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002144:	7c7b      	ldrb	r3, [r7, #17]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d105      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214a:	4ba6      	ldr	r3, [pc, #664]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	4aa5      	ldr	r2, [pc, #660]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002154:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002162:	4ba0      	ldr	r3, [pc, #640]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002168:	f023 0203 	bic.w	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	499c      	ldr	r1, [pc, #624]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002184:	4b97      	ldr	r3, [pc, #604]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218a:	f023 020c 	bic.w	r2, r3, #12
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	4994      	ldr	r1, [pc, #592]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021a6:	4b8f      	ldr	r3, [pc, #572]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	498b      	ldr	r1, [pc, #556]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021c8:	4b86      	ldr	r3, [pc, #536]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	4983      	ldr	r1, [pc, #524]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021ea:	4b7e      	ldr	r3, [pc, #504]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	497a      	ldr	r1, [pc, #488]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800220c:	4b75      	ldr	r3, [pc, #468]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	4972      	ldr	r1, [pc, #456]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800222e:	4b6d      	ldr	r3, [pc, #436]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	4969      	ldr	r1, [pc, #420]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002250:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4961      	ldr	r1, [pc, #388]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002272:	4b5c      	ldr	r3, [pc, #368]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002278:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	4958      	ldr	r1, [pc, #352]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002290:	2b00      	cmp	r3, #0
 8002292:	d015      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002294:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	4950      	ldr	r1, [pc, #320]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b2:	d105      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b4:	4b4b      	ldr	r3, [pc, #300]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a4a      	ldr	r2, [pc, #296]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d015      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022cc:	4b45      	ldr	r3, [pc, #276]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	4942      	ldr	r1, [pc, #264]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ea:	d105      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ec:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a3c      	ldr	r2, [pc, #240]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d015      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002304:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4934      	ldr	r1, [pc, #208]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002322:	d105      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002324:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4a2e      	ldr	r2, [pc, #184]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800232e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d015      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234a:	4926      	ldr	r1, [pc, #152]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800235a:	d105      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a20      	ldr	r2, [pc, #128]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002366:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d015      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002382:	4918      	ldr	r1, [pc, #96]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002392:	d105      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800239e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d015      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ba:	490a      	ldr	r1, [pc, #40]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ca:	d105      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80023d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000

080023e8 <main>:
FDCAN_HandleTypeDef hfdcan;
uint8_t CANTxData[8];


int main(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	HAL_Init();
 80023ec:	f7fd ff14 	bl	8000218 <HAL_Init>

	SystemClock_Config();
 80023f0:	f000 f866 	bl	80024c0 <SystemClock_Config>

	MX_GPIO_Init();
 80023f4:	f000 f8ca 	bl	800258c <MX_GPIO_Init>
	MX_DMA_Init();
 80023f8:	f000 f908 	bl	800260c <MX_DMA_Init>
	MX_FDCAN_Init();
 80023fc:	f000 f938 	bl	8002670 <MX_FDCAN_Init>

	while (1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8002400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002408:	f7ff f844 	bl	8001494 <HAL_GPIO_TogglePin>
		Can_Send();
 800240c:	f000 f804 	bl	8002418 <Can_Send>
		HAL_Delay(200);
 8002410:	20c8      	movs	r0, #200	; 0xc8
 8002412:	f7fd ff71 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8002416:	e7f3      	b.n	8002400 <main+0x18>

08002418 <Can_Send>:
	}
}

void Can_Send()
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	; 0x28
 800241c:	af00      	add	r7, sp, #0
	if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) < 1)
 800241e:	4826      	ldr	r0, [pc, #152]	; (80024b8 <Can_Send+0xa0>)
 8002420:	f7fe fb26 	bl	8000a70 <HAL_FDCAN_GetTxFifoFreeLevel>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d041      	beq.n	80024ae <Can_Send+0x96>
		return;
	}

	FDCAN_TxHeaderTypeDef TxHeader;

	TxHeader.Identifier = 0x90;
 800242a:	2390      	movs	r3, #144	; 0x90
 800242c:	603b      	str	r3, [r7, #0]
	TxHeader.DataLength = (8<<16); //<<16 makes storing the number of bytes not require a switch statement for classic can
 800242e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002432:	60fb      	str	r3, [r7, #12]

	//clear can tx data so that data from incorrectly configured message is 0
	for(uint32_t i=0; i<8; i++)
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
 8002438:	e007      	b.n	800244a <Can_Send+0x32>
	{
		CANTxData[i]=0;
 800243a:	4a20      	ldr	r2, [pc, #128]	; (80024bc <Can_Send+0xa4>)
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	4413      	add	r3, r2
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	3301      	adds	r3, #1
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	2b07      	cmp	r3, #7
 800244e:	d9f4      	bls.n	800243a <Can_Send+0x22>
	}

	CANTxData[0] = 255;
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <Can_Send+0xa4>)
 8002452:	22ff      	movs	r2, #255	; 0xff
 8002454:	701a      	strb	r2, [r3, #0]
	CANTxData[1] = 127;
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <Can_Send+0xa4>)
 8002458:	227f      	movs	r2, #127	; 0x7f
 800245a:	705a      	strb	r2, [r3, #1]
	CANTxData[2] = 63;
 800245c:	4b17      	ldr	r3, [pc, #92]	; (80024bc <Can_Send+0xa4>)
 800245e:	223f      	movs	r2, #63	; 0x3f
 8002460:	709a      	strb	r2, [r3, #2]
	CANTxData[3] = 31;
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <Can_Send+0xa4>)
 8002464:	221f      	movs	r2, #31
 8002466:	70da      	strb	r2, [r3, #3]
	CANTxData[4] = 15;
 8002468:	4b14      	ldr	r3, [pc, #80]	; (80024bc <Can_Send+0xa4>)
 800246a:	220f      	movs	r2, #15
 800246c:	711a      	strb	r2, [r3, #4]
	CANTxData[5] = 7;
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <Can_Send+0xa4>)
 8002470:	2207      	movs	r2, #7
 8002472:	715a      	strb	r2, [r3, #5]
	CANTxData[6] = 3;
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <Can_Send+0xa4>)
 8002476:	2203      	movs	r2, #3
 8002478:	719a      	strb	r2, [r3, #6]
	CANTxData[7] = 1;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <Can_Send+0xa4>)
 800247c:	2201      	movs	r2, #1
 800247e:	71da      	strb	r2, [r3, #7]
	//TODO: SET OUTPUT BYTES

	TxHeader.IdType = FDCAN_STANDARD_ID;
 8002480:	2300      	movs	r3, #0
 8002482:	607b      	str	r3, [r7, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8002490:	2300      	movs	r3, #0
 8002492:	61bb      	str	r3, [r7, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
	TxHeader.MessageMarker = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	623b      	str	r3, [r7, #32]

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 800249c:	463b      	mov	r3, r7
 800249e:	4a07      	ldr	r2, [pc, #28]	; (80024bc <Can_Send+0xa4>)
 80024a0:	4619      	mov	r1, r3
 80024a2:	4805      	ldr	r0, [pc, #20]	; (80024b8 <Can_Send+0xa0>)
 80024a4:	f7fe faa0 	bl	80009e8 <HAL_FDCAN_AddMessageToTxFifoQ>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	e000      	b.n	80024b0 <Can_Send+0x98>
		return;
 80024ae:	bf00      	nop
	{
		//Set_Error(ERR_SEND_FAILED); //TODO
		return;
	}
}
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2000002c 	.word	0x2000002c
 80024bc:	20000090 	.word	0x20000090

080024c0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0a4      	sub	sp, #144	; 0x90
 80024c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024ca:	2238      	movs	r2, #56	; 0x38
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fa8a 	bl	80029e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024e4:	463b      	mov	r3, r7
 80024e6:	2244      	movs	r2, #68	; 0x44
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fa7c 	bl	80029e8 <memset>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7fe ffe9 	bl	80014c8 <HAL_PWREx_ControlVoltageScaling>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024f6:	2301      	movs	r3, #1
 80024f8:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024fa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80024fe:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002500:	2302      	movs	r3, #2
 8002502:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002504:	2303      	movs	r3, #3
 8002506:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002508:	2304      	movs	r3, #4
 800250a:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800250c:	2355      	movs	r3, #85	; 0x55
 800250e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002512:	2302      	movs	r3, #2
 8002514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002518:	2302      	movs	r3, #2
 800251a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800251e:	2302      	movs	r3, #2
 8002520:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002524:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff f871 	bl	8001610 <HAL_RCC_OscConfig>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8002534:	f000 f930 	bl	8002798 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8002538:	230f      	movs	r3, #15
 800253a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800253c:	2303      	movs	r3, #3
 800253e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002540:	2300      	movs	r3, #0
 8002542:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002544:	2300      	movs	r3, #0
 8002546:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002548:	2300      	movs	r3, #0
 800254a:	657b      	str	r3, [r7, #84]	; 0x54
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 800254c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002550:	2108      	movs	r1, #8
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fb74 	bl	8001c40 <HAL_RCC_ClockConfig>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 800255e:	f000 f91b 	bl	8002798 <Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
 8002562:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8002566:	603b      	str	r3, [r7, #0]
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002568:	2300      	movs	r3, #0
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800256c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002570:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002572:	463b      	mov	r3, r7
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fd47 	bl	8002008 <HAL_RCCEx_PeriphCLKConfig>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8002580:	f000 f90a 	bl	8002798 <Error_Handler>
	}
}
 8002584:	bf00      	nop
 8002586:	3790      	adds	r7, #144	; 0x90
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002592:	f107 030c 	add.w	r3, r7, #12
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	60da      	str	r2, [r3, #12]
 80025a0:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOF_CLK_ENABLE();
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <MX_GPIO_Init+0x7c>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a6:	4a18      	ldr	r2, [pc, #96]	; (8002608 <MX_GPIO_Init+0x7c>)
 80025a8:	f043 0320 	orr.w	r3, r3, #32
 80025ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <MX_GPIO_Init+0x7c>)
 80025b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <MX_GPIO_Init+0x7c>)
 80025bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025be:	4a12      	ldr	r2, [pc, #72]	; (8002608 <MX_GPIO_Init+0x7c>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <MX_GPIO_Init+0x7c>)
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025dc:	f7fe ff42 	bl	8001464 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e6:	2301      	movs	r3, #1
 80025e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	4619      	mov	r1, r3
 80025f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025fc:	f7fe fdb0 	bl	8001160 <HAL_GPIO_Init>
}
 8002600:	bf00      	nop
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000

0800260c <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002612:	4b16      	ldr	r3, [pc, #88]	; (800266c <MX_DMA_Init+0x60>)
 8002614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002616:	4a15      	ldr	r2, [pc, #84]	; (800266c <MX_DMA_Init+0x60>)
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	6493      	str	r3, [r2, #72]	; 0x48
 800261e:	4b13      	ldr	r3, [pc, #76]	; (800266c <MX_DMA_Init+0x60>)
 8002620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <MX_DMA_Init+0x60>)
 800262c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262e:	4a0f      	ldr	r2, [pc, #60]	; (800266c <MX_DMA_Init+0x60>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6493      	str	r3, [r2, #72]	; 0x48
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <MX_DMA_Init+0x60>)
 8002638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	200b      	movs	r0, #11
 8002648:	f7fd ff53 	bl	80004f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800264c:	200b      	movs	r0, #11
 800264e:	f7fd ff6a 	bl	8000526 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	200c      	movs	r0, #12
 8002658:	f7fd ff4b 	bl	80004f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800265c:	200c      	movs	r0, #12
 800265e:	f7fd ff62 	bl	8000526 <HAL_NVIC_EnableIRQ>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000

08002670 <MX_FDCAN_Init>:

static void MX_FDCAN_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef	sFilterConfig;

	hfdcan.Instance = FDCAN1;
 8002676:	4b46      	ldr	r3, [pc, #280]	; (8002790 <MX_FDCAN_Init+0x120>)
 8002678:	4a46      	ldr	r2, [pc, #280]	; (8002794 <MX_FDCAN_Init+0x124>)
 800267a:	601a      	str	r2, [r3, #0]
	hfdcan.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800267c:	4b44      	ldr	r3, [pc, #272]	; (8002790 <MX_FDCAN_Init+0x120>)
 800267e:	2200      	movs	r2, #0
 8002680:	605a      	str	r2, [r3, #4]
	hfdcan.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002682:	4b43      	ldr	r3, [pc, #268]	; (8002790 <MX_FDCAN_Init+0x120>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
	hfdcan.Init.Mode = FDCAN_MODE_NORMAL;
 8002688:	4b41      	ldr	r3, [pc, #260]	; (8002790 <MX_FDCAN_Init+0x120>)
 800268a:	2200      	movs	r2, #0
 800268c:	60da      	str	r2, [r3, #12]
	hfdcan.Init.AutoRetransmission = DISABLE;
 800268e:	4b40      	ldr	r3, [pc, #256]	; (8002790 <MX_FDCAN_Init+0x120>)
 8002690:	2200      	movs	r2, #0
 8002692:	741a      	strb	r2, [r3, #16]
	hfdcan.Init.TransmitPause = DISABLE;
 8002694:	4b3e      	ldr	r3, [pc, #248]	; (8002790 <MX_FDCAN_Init+0x120>)
 8002696:	2200      	movs	r2, #0
 8002698:	745a      	strb	r2, [r3, #17]
	hfdcan.Init.ProtocolException = DISABLE;
 800269a:	4b3d      	ldr	r3, [pc, #244]	; (8002790 <MX_FDCAN_Init+0x120>)
 800269c:	2200      	movs	r2, #0
 800269e:	749a      	strb	r2, [r3, #18]
	hfdcan.Init.NominalPrescaler = 1;
 80026a0:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <MX_FDCAN_Init+0x120>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	615a      	str	r2, [r3, #20]
	hfdcan.Init.NominalSyncJumpWidth = 1;
 80026a6:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <MX_FDCAN_Init+0x120>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	619a      	str	r2, [r3, #24]
	hfdcan.Init.NominalTimeSeg1 = 13;
 80026ac:	4b38      	ldr	r3, [pc, #224]	; (8002790 <MX_FDCAN_Init+0x120>)
 80026ae:	220d      	movs	r2, #13
 80026b0:	61da      	str	r2, [r3, #28]
	hfdcan.Init.NominalTimeSeg2 = 2;
 80026b2:	4b37      	ldr	r3, [pc, #220]	; (8002790 <MX_FDCAN_Init+0x120>)
 80026b4:	2202      	movs	r2, #2
 80026b6:	621a      	str	r2, [r3, #32]
	hfdcan.Init.DataPrescaler = 1;
 80026b8:	4b35      	ldr	r3, [pc, #212]	; (8002790 <MX_FDCAN_Init+0x120>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan.Init.DataSyncJumpWidth = 1;
 80026be:	4b34      	ldr	r3, [pc, #208]	; (8002790 <MX_FDCAN_Init+0x120>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan.Init.DataTimeSeg1 = 1;
 80026c4:	4b32      	ldr	r3, [pc, #200]	; (8002790 <MX_FDCAN_Init+0x120>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan.Init.DataTimeSeg2 = 1;
 80026ca:	4b31      	ldr	r3, [pc, #196]	; (8002790 <MX_FDCAN_Init+0x120>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan.Init.StdFiltersNbr = 2;
 80026d0:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <MX_FDCAN_Init+0x120>)
 80026d2:	2202      	movs	r2, #2
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan.Init.ExtFiltersNbr = 0;
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <MX_FDCAN_Init+0x120>)
 80026d8:	2200      	movs	r2, #0
 80026da:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80026dc:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <MX_FDCAN_Init+0x120>)
 80026de:	2200      	movs	r2, #0
 80026e0:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan) != HAL_OK)
 80026e2:	482b      	ldr	r0, [pc, #172]	; (8002790 <MX_FDCAN_Init+0x120>)
 80026e4:	f7fd ff3a 	bl	800055c <HAL_FDCAN_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_FDCAN_Init+0x82>
	{
		Error_Handler();
 80026ee:	f000 f853 	bl	8002798 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 80026f2:	2201      	movs	r2, #1
 80026f4:	2140      	movs	r1, #64	; 0x40
 80026f6:	4826      	ldr	r0, [pc, #152]	; (8002790 <MX_FDCAN_Init+0x120>)
 80026f8:	f7fe f915 	bl	8000926 <HAL_FDCAN_ConfigRxFifoOverwrite>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_FDCAN_Init+0x96>
	{
		Error_Handler();
 8002702:	f000 f849 	bl	8002798 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8002706:	2201      	movs	r2, #1
 8002708:	2141      	movs	r1, #65	; 0x41
 800270a:	4821      	ldr	r0, [pc, #132]	; (8002790 <MX_FDCAN_Init+0x120>)
 800270c:	f7fe f90b 	bl	8000926 <HAL_FDCAN_ConfigRxFifoOverwrite>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_FDCAN_Init+0xaa>
	{
		Error_Handler();
 8002716:	f000 f83f 	bl	8002798 <Error_Handler>
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
	{
		Error_Handler();
	}*/ //no config yet

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800271a:	2300      	movs	r3, #0
 800271c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 1;
 800271e:	2301      	movs	r3, #1
 8002720:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002722:	2302      	movs	r3, #2
 8002724:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002726:	2301      	movs	r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_SYNC;
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 800272e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002732:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 8002734:	463b      	mov	r3, r7
 8002736:	4619      	mov	r1, r3
 8002738:	4815      	ldr	r0, [pc, #84]	; (8002790 <MX_FDCAN_Init+0x120>)
 800273a:	f7fe f869 	bl	8000810 <HAL_FDCAN_ConfigFilter>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_FDCAN_Init+0xd8>
	{
		Error_Handler();
 8002744:	f000 f828 	bl	8002798 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 8002748:	2301      	movs	r3, #1
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2301      	movs	r3, #1
 800274e:	2202      	movs	r2, #2
 8002750:	2102      	movs	r1, #2
 8002752:	480f      	ldr	r0, [pc, #60]	; (8002790 <MX_FDCAN_Init+0x120>)
 8002754:	f7fe f8b6 	bl	80008c4 <HAL_FDCAN_ConfigGlobalFilter>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_FDCAN_Init+0xf2>
	{
		Error_Handler();
 800275e:	f000 f81b 	bl	8002798 <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan) != HAL_OK)
 8002762:	480b      	ldr	r0, [pc, #44]	; (8002790 <MX_FDCAN_Init+0x120>)
 8002764:	f7fe f918 	bl	8000998 <HAL_FDCAN_Start>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_FDCAN_Init+0x102>
	{
		Error_Handler();
 800276e:	f000 f813 	bl	8002798 <Error_Handler>
	}
	if(HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002772:	2200      	movs	r2, #0
 8002774:	2101      	movs	r1, #1
 8002776:	4806      	ldr	r0, [pc, #24]	; (8002790 <MX_FDCAN_Init+0x120>)
 8002778:	f7fe f98c 	bl	8000a94 <HAL_FDCAN_ActivateNotification>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_FDCAN_Init+0x116>
	{
		Error_Handler();
 8002782:	f000 f809 	bl	8002798 <Error_Handler>
	}
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2000002c 	.word	0x2000002c
 8002794:	40006400 	.word	0x40006400

08002798 <Error_Handler>:

void Error_Handler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 800279c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a4:	f7fe fe76 	bl	8001494 <HAL_GPIO_TogglePin>
		HAL_Delay(33);
 80027a8:	2021      	movs	r0, #33	; 0x21
 80027aa:	f7fd fda5 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80027ae:	e7f5      	b.n	800279c <Error_Handler+0x4>

080027b0 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <LL_PWR_DisableDeadBatteryPD+0x1c>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <LL_PWR_DisableDeadBatteryPD+0x1c>)
 80027ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027be:	6093      	str	r3, [r2, #8]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40007000 	.word	0x40007000

080027d0 <HAL_MspInit>:
#include "main.h"


void HAL_MspInit(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <HAL_MspInit+0x44>)
 80027d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027da:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <HAL_MspInit+0x44>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6613      	str	r3, [r2, #96]	; 0x60
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <HAL_MspInit+0x44>)
 80027e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_MspInit+0x44>)
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	4a08      	ldr	r2, [pc, #32]	; (8002814 <HAL_MspInit+0x44>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f8:	6593      	str	r3, [r2, #88]	; 0x58
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_MspInit+0x44>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	683b      	ldr	r3, [r7, #0]

	LL_PWR_DisableDeadBatteryPD();
 8002806:	f7ff ffd3 	bl	80027b0 <LL_PWR_DisableDeadBatteryPD>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000

08002818 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <HAL_FDCAN_MspInit+0x90>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d131      	bne.n	800289e <HAL_FDCAN_MspInit+0x86>
  {
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_FDCAN_MspInit+0x94>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <HAL_FDCAN_MspInit+0x94>)
 8002840:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002844:	6593      	str	r3, [r2, #88]	; 0x58
 8002846:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_FDCAN_MspInit+0x94>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <HAL_FDCAN_MspInit+0x94>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	4a15      	ldr	r2, [pc, #84]	; (80028ac <HAL_FDCAN_MspInit+0x94>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <HAL_FDCAN_MspInit+0x94>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800286a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800286e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	2300      	movs	r3, #0
 800287a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800287c:	2309      	movs	r3, #9
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	4619      	mov	r1, r3
 8002886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800288a:	f7fe fc69 	bl	8001160 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2100      	movs	r1, #0
 8002892:	2015      	movs	r0, #21
 8002894:	f7fd fe2d 	bl	80004f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002898:	2015      	movs	r0, #21
 800289a:	f7fd fe44 	bl	8000526 <HAL_NVIC_EnableIRQ>
  }
}
 800289e:	bf00      	nop
 80028a0:	3728      	adds	r7, #40	; 0x28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40006400 	.word	0x40006400
 80028ac:	40021000 	.word	0x40021000

080028b0 <FDCAN1_IT0_IRQHandler>:

//external type handlers
extern FDCAN_HandleTypeDef hfdcan;

void FDCAN1_IT0_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(&hfdcan);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <FDCAN1_IT0_IRQHandler+0x10>)
 80028b6:	f7fe f9d3 	bl	8000c60 <HAL_FDCAN_IRQHandler>
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	2000002c 	.word	0x2000002c

080028c4 <NMI_Handler>:


void NMI_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0

}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <HardFault_Handler>:

void HardFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
	while (1)
 80028d6:	e7fe      	b.n	80028d6 <HardFault_Handler+0x4>

080028d8 <MemManage_Handler>:

	}
}

void MemManage_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
	while (1)
 80028dc:	e7fe      	b.n	80028dc <MemManage_Handler+0x4>

080028de <BusFault_Handler>:

	}
}

void BusFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
	while (1)
 80028e2:	e7fe      	b.n	80028e2 <BusFault_Handler+0x4>

080028e4 <UsageFault_Handler>:

	}
}

void UsageFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <UsageFault_Handler+0x4>

080028ea <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002918:	f7fd fcd0 	bl	80002bc <HAL_IncTick>
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}

08002920 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <SystemInit+0x28>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	4a07      	ldr	r2, [pc, #28]	; (8002948 <SystemInit+0x28>)
 800292c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <SystemInit+0x28>)
 8002936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800293a:	609a      	str	r2, [r3, #8]
#endif
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800294c:	480d      	ldr	r0, [pc, #52]	; (8002984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800294e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002950:	480d      	ldr	r0, [pc, #52]	; (8002988 <LoopForever+0x6>)
  ldr r1, =_edata
 8002952:	490e      	ldr	r1, [pc, #56]	; (800298c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002954:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <LoopForever+0xe>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002958:	e002      	b.n	8002960 <LoopCopyDataInit>

0800295a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800295a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800295c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800295e:	3304      	adds	r3, #4

08002960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002964:	d3f9      	bcc.n	800295a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002966:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002968:	4c0b      	ldr	r4, [pc, #44]	; (8002998 <LoopForever+0x16>)
  movs r3, #0
 800296a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800296c:	e001      	b.n	8002972 <LoopFillZerobss>

0800296e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800296e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002970:	3204      	adds	r2, #4

08002972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002974:	d3fb      	bcc.n	800296e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002976:	f7ff ffd3 	bl	8002920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800297a:	f000 f811 	bl	80029a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800297e:	f7ff fd33 	bl	80023e8 <main>

08002982 <LoopForever>:

LoopForever:
    b LoopForever
 8002982:	e7fe      	b.n	8002982 <LoopForever>
  ldr   r0, =_estack
 8002984:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800298c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002990:	08002a38 	.word	0x08002a38
  ldr r2, =_sbss
 8002994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002998:	20000098 	.word	0x20000098

0800299c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800299c:	e7fe      	b.n	800299c <ADC1_2_IRQHandler>
	...

080029a0 <__libc_init_array>:
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	4e0d      	ldr	r6, [pc, #52]	; (80029d8 <__libc_init_array+0x38>)
 80029a4:	4c0d      	ldr	r4, [pc, #52]	; (80029dc <__libc_init_array+0x3c>)
 80029a6:	1ba4      	subs	r4, r4, r6
 80029a8:	10a4      	asrs	r4, r4, #2
 80029aa:	2500      	movs	r5, #0
 80029ac:	42a5      	cmp	r5, r4
 80029ae:	d109      	bne.n	80029c4 <__libc_init_array+0x24>
 80029b0:	4e0b      	ldr	r6, [pc, #44]	; (80029e0 <__libc_init_array+0x40>)
 80029b2:	4c0c      	ldr	r4, [pc, #48]	; (80029e4 <__libc_init_array+0x44>)
 80029b4:	f000 f820 	bl	80029f8 <_init>
 80029b8:	1ba4      	subs	r4, r4, r6
 80029ba:	10a4      	asrs	r4, r4, #2
 80029bc:	2500      	movs	r5, #0
 80029be:	42a5      	cmp	r5, r4
 80029c0:	d105      	bne.n	80029ce <__libc_init_array+0x2e>
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
 80029c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029c8:	4798      	blx	r3
 80029ca:	3501      	adds	r5, #1
 80029cc:	e7ee      	b.n	80029ac <__libc_init_array+0xc>
 80029ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029d2:	4798      	blx	r3
 80029d4:	3501      	adds	r5, #1
 80029d6:	e7f2      	b.n	80029be <__libc_init_array+0x1e>
 80029d8:	08002a30 	.word	0x08002a30
 80029dc:	08002a30 	.word	0x08002a30
 80029e0:	08002a30 	.word	0x08002a30
 80029e4:	08002a34 	.word	0x08002a34

080029e8 <memset>:
 80029e8:	4402      	add	r2, r0
 80029ea:	4603      	mov	r3, r0
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d100      	bne.n	80029f2 <memset+0xa>
 80029f0:	4770      	bx	lr
 80029f2:	f803 1b01 	strb.w	r1, [r3], #1
 80029f6:	e7f9      	b.n	80029ec <memset+0x4>

080029f8 <_init>:
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fa:	bf00      	nop
 80029fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fe:	bc08      	pop	{r3}
 8002a00:	469e      	mov	lr, r3
 8002a02:	4770      	bx	lr

08002a04 <_fini>:
 8002a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a06:	bf00      	nop
 8002a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0a:	bc08      	pop	{r3}
 8002a0c:	469e      	mov	lr, r3
 8002a0e:	4770      	bx	lr
