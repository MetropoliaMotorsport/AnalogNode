
motorsport_AnalogNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014c4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800169c  0800169c  0001169c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016ac  080016ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080016ac  080016ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016ac  080016ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016ac  080016ac  000116ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016b0  080016b0  000116b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080016b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080016c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080016c0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000528e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fe6  00000000  00000000  000252ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000588  00000000  00000000  000262b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004f0  00000000  00000000  00026838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b71c  00000000  00000000  00026d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000049b9  00000000  00000000  00042444  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad1d7  00000000  00000000  00046dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3fd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001450  00000000  00000000  000f4050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001684 	.word	0x08001684

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08001684 	.word	0x08001684

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f000 f93c 	bl	80004a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f001 f965 	bl	8001508 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f93a 	bl	80004ea <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f000 f914 	bl	80004b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000008 	.word	0x20000008
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	20000028 	.word	0x20000028
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000028 	.word	0x20000028

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f003 0307 	and.w	r3, r3, #7
 800034a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <__NVIC_SetPriorityGrouping+0x44>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000352:	68ba      	ldr	r2, [r7, #8]
 8000354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000358:	4013      	ands	r3, r2
 800035a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <__NVIC_SetPriorityGrouping+0x44>)
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	60d3      	str	r3, [r2, #12]
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <__NVIC_GetPriorityGrouping+0x18>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	0a1b      	lsrs	r3, r3, #8
 800038e:	f003 0307 	and.w	r3, r3, #7
}
 8000392:	4618      	mov	r0, r3
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	6039      	str	r1, [r7, #0]
 80003aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	db0a      	blt.n	80003ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	490c      	ldr	r1, [pc, #48]	; (80003ec <__NVIC_SetPriority+0x4c>)
 80003ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003be:	0112      	lsls	r2, r2, #4
 80003c0:	b2d2      	uxtb	r2, r2
 80003c2:	440b      	add	r3, r1
 80003c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003c8:	e00a      	b.n	80003e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4908      	ldr	r1, [pc, #32]	; (80003f0 <__NVIC_SetPriority+0x50>)
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	f003 030f 	and.w	r3, r3, #15
 80003d6:	3b04      	subs	r3, #4
 80003d8:	0112      	lsls	r2, r2, #4
 80003da:	b2d2      	uxtb	r2, r2
 80003dc:	440b      	add	r3, r1
 80003de:	761a      	strb	r2, [r3, #24]
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	e000e100 	.word	0xe000e100
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b089      	sub	sp, #36	; 0x24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f003 0307 	and.w	r3, r3, #7
 8000406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000408:	69fb      	ldr	r3, [r7, #28]
 800040a:	f1c3 0307 	rsb	r3, r3, #7
 800040e:	2b04      	cmp	r3, #4
 8000410:	bf28      	it	cs
 8000412:	2304      	movcs	r3, #4
 8000414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000416:	69fb      	ldr	r3, [r7, #28]
 8000418:	3304      	adds	r3, #4
 800041a:	2b06      	cmp	r3, #6
 800041c:	d902      	bls.n	8000424 <NVIC_EncodePriority+0x30>
 800041e:	69fb      	ldr	r3, [r7, #28]
 8000420:	3b03      	subs	r3, #3
 8000422:	e000      	b.n	8000426 <NVIC_EncodePriority+0x32>
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000428:	f04f 32ff 	mov.w	r2, #4294967295
 800042c:	69bb      	ldr	r3, [r7, #24]
 800042e:	fa02 f303 	lsl.w	r3, r2, r3
 8000432:	43da      	mvns	r2, r3
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	401a      	ands	r2, r3
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800043c:	f04f 31ff 	mov.w	r1, #4294967295
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	fa01 f303 	lsl.w	r3, r1, r3
 8000446:	43d9      	mvns	r1, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800044c:	4313      	orrs	r3, r2
         );
}
 800044e:	4618      	mov	r0, r3
 8000450:	3724      	adds	r7, #36	; 0x24
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
	...

0800045c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	3b01      	subs	r3, #1
 8000468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800046c:	d301      	bcc.n	8000472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800046e:	2301      	movs	r3, #1
 8000470:	e00f      	b.n	8000492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000472:	4a0a      	ldr	r2, [pc, #40]	; (800049c <SysTick_Config+0x40>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3b01      	subs	r3, #1
 8000478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800047a:	210f      	movs	r1, #15
 800047c:	f04f 30ff 	mov.w	r0, #4294967295
 8000480:	f7ff ff8e 	bl	80003a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <SysTick_Config+0x40>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800048a:	4b04      	ldr	r3, [pc, #16]	; (800049c <SysTick_Config+0x40>)
 800048c:	2207      	movs	r2, #7
 800048e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000490:	2300      	movs	r3, #0
}
 8000492:	4618      	mov	r0, r3
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	e000e010 	.word	0xe000e010

080004a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f7ff ff47 	bl	800033c <__NVIC_SetPriorityGrouping>
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b086      	sub	sp, #24
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	4603      	mov	r3, r0
 80004be:	60b9      	str	r1, [r7, #8]
 80004c0:	607a      	str	r2, [r7, #4]
 80004c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004c4:	f7ff ff5e 	bl	8000384 <__NVIC_GetPriorityGrouping>
 80004c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	68b9      	ldr	r1, [r7, #8]
 80004ce:	6978      	ldr	r0, [r7, #20]
 80004d0:	f7ff ff90 	bl	80003f4 <NVIC_EncodePriority>
 80004d4:	4602      	mov	r2, r0
 80004d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004da:	4611      	mov	r1, r2
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff ff5f 	bl	80003a0 <__NVIC_SetPriority>
}
 80004e2:	bf00      	nop
 80004e4:	3718      	adds	r7, #24
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b082      	sub	sp, #8
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f7ff ffb2 	bl	800045c <SysTick_Config>
 80004f8:	4603      	mov	r3, r0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000504:	b480      	push	{r7}
 8000506:	b087      	sub	sp, #28
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000512:	e15a      	b.n	80007ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	2101      	movs	r1, #1
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	fa01 f303 	lsl.w	r3, r1, r3
 8000520:	4013      	ands	r3, r2
 8000522:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2b00      	cmp	r3, #0
 8000528:	f000 814c 	beq.w	80007c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	2b02      	cmp	r3, #2
 8000532:	d003      	beq.n	800053c <HAL_GPIO_Init+0x38>
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	2b12      	cmp	r3, #18
 800053a:	d123      	bne.n	8000584 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	08da      	lsrs	r2, r3, #3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3208      	adds	r2, #8
 8000544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000548:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	f003 0307 	and.w	r3, r3, #7
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	220f      	movs	r2, #15
 8000554:	fa02 f303 	lsl.w	r3, r2, r3
 8000558:	43db      	mvns	r3, r3
 800055a:	693a      	ldr	r2, [r7, #16]
 800055c:	4013      	ands	r3, r2
 800055e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	691a      	ldr	r2, [r3, #16]
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	f003 0307 	and.w	r3, r3, #7
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	fa02 f303 	lsl.w	r3, r2, r3
 8000570:	693a      	ldr	r2, [r7, #16]
 8000572:	4313      	orrs	r3, r2
 8000574:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	08da      	lsrs	r2, r3, #3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3208      	adds	r2, #8
 800057e:	6939      	ldr	r1, [r7, #16]
 8000580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2203      	movs	r2, #3
 8000590:	fa02 f303 	lsl.w	r3, r2, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	693a      	ldr	r2, [r7, #16]
 8000598:	4013      	ands	r3, r2
 800059a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	f003 0203 	and.w	r2, r3, #3
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	693a      	ldr	r2, [r7, #16]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	693a      	ldr	r2, [r7, #16]
 80005b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d00b      	beq.n	80005d8 <HAL_GPIO_Init+0xd4>
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d007      	beq.n	80005d8 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005cc:	2b11      	cmp	r3, #17
 80005ce:	d003      	beq.n	80005d8 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	2b12      	cmp	r3, #18
 80005d6:	d130      	bne.n	800063a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	2203      	movs	r2, #3
 80005e4:	fa02 f303 	lsl.w	r3, r2, r3
 80005e8:	43db      	mvns	r3, r3
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	4013      	ands	r3, r2
 80005ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	68da      	ldr	r2, [r3, #12]
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	fa02 f303 	lsl.w	r3, r2, r3
 80005fc:	693a      	ldr	r2, [r7, #16]
 80005fe:	4313      	orrs	r3, r2
 8000600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	693a      	ldr	r2, [r7, #16]
 8000606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800060e:	2201      	movs	r2, #1
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	43db      	mvns	r3, r3
 8000618:	693a      	ldr	r2, [r7, #16]
 800061a:	4013      	ands	r3, r2
 800061c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	091b      	lsrs	r3, r3, #4
 8000624:	f003 0201 	and.w	r2, r3, #1
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	693a      	ldr	r2, [r7, #16]
 8000630:	4313      	orrs	r3, r2
 8000632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	2203      	movs	r2, #3
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	43db      	mvns	r3, r3
 800064c:	693a      	ldr	r2, [r7, #16]
 800064e:	4013      	ands	r3, r2
 8000650:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	689a      	ldr	r2, [r3, #8]
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	fa02 f303 	lsl.w	r3, r2, r3
 800065e:	693a      	ldr	r2, [r7, #16]
 8000660:	4313      	orrs	r3, r2
 8000662:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	2b00      	cmp	r3, #0
 8000674:	f000 80a6 	beq.w	80007c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000678:	4b5b      	ldr	r3, [pc, #364]	; (80007e8 <HAL_GPIO_Init+0x2e4>)
 800067a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800067c:	4a5a      	ldr	r2, [pc, #360]	; (80007e8 <HAL_GPIO_Init+0x2e4>)
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	6613      	str	r3, [r2, #96]	; 0x60
 8000684:	4b58      	ldr	r3, [pc, #352]	; (80007e8 <HAL_GPIO_Init+0x2e4>)
 8000686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000690:	4a56      	ldr	r2, [pc, #344]	; (80007ec <HAL_GPIO_Init+0x2e8>)
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	089b      	lsrs	r3, r3, #2
 8000696:	3302      	adds	r3, #2
 8000698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	f003 0303 	and.w	r3, r3, #3
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	220f      	movs	r2, #15
 80006a8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ac:	43db      	mvns	r3, r3
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	4013      	ands	r3, r2
 80006b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006ba:	d01f      	beq.n	80006fc <HAL_GPIO_Init+0x1f8>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a4c      	ldr	r2, [pc, #304]	; (80007f0 <HAL_GPIO_Init+0x2ec>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d019      	beq.n	80006f8 <HAL_GPIO_Init+0x1f4>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a4b      	ldr	r2, [pc, #300]	; (80007f4 <HAL_GPIO_Init+0x2f0>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d013      	beq.n	80006f4 <HAL_GPIO_Init+0x1f0>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a4a      	ldr	r2, [pc, #296]	; (80007f8 <HAL_GPIO_Init+0x2f4>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d00d      	beq.n	80006f0 <HAL_GPIO_Init+0x1ec>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a49      	ldr	r2, [pc, #292]	; (80007fc <HAL_GPIO_Init+0x2f8>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d007      	beq.n	80006ec <HAL_GPIO_Init+0x1e8>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a48      	ldr	r2, [pc, #288]	; (8000800 <HAL_GPIO_Init+0x2fc>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d101      	bne.n	80006e8 <HAL_GPIO_Init+0x1e4>
 80006e4:	2305      	movs	r3, #5
 80006e6:	e00a      	b.n	80006fe <HAL_GPIO_Init+0x1fa>
 80006e8:	2306      	movs	r3, #6
 80006ea:	e008      	b.n	80006fe <HAL_GPIO_Init+0x1fa>
 80006ec:	2304      	movs	r3, #4
 80006ee:	e006      	b.n	80006fe <HAL_GPIO_Init+0x1fa>
 80006f0:	2303      	movs	r3, #3
 80006f2:	e004      	b.n	80006fe <HAL_GPIO_Init+0x1fa>
 80006f4:	2302      	movs	r3, #2
 80006f6:	e002      	b.n	80006fe <HAL_GPIO_Init+0x1fa>
 80006f8:	2301      	movs	r3, #1
 80006fa:	e000      	b.n	80006fe <HAL_GPIO_Init+0x1fa>
 80006fc:	2300      	movs	r3, #0
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	f002 0203 	and.w	r2, r2, #3
 8000704:	0092      	lsls	r2, r2, #2
 8000706:	4093      	lsls	r3, r2
 8000708:	693a      	ldr	r2, [r7, #16]
 800070a:	4313      	orrs	r3, r2
 800070c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800070e:	4937      	ldr	r1, [pc, #220]	; (80007ec <HAL_GPIO_Init+0x2e8>)
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	089b      	lsrs	r3, r3, #2
 8000714:	3302      	adds	r3, #2
 8000716:	693a      	ldr	r2, [r7, #16]
 8000718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800071c:	4b39      	ldr	r3, [pc, #228]	; (8000804 <HAL_GPIO_Init+0x300>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	43db      	mvns	r3, r3
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	4013      	ands	r3, r2
 800072a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000734:	2b00      	cmp	r3, #0
 8000736:	d003      	beq.n	8000740 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000738:	693a      	ldr	r2, [r7, #16]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000740:	4a30      	ldr	r2, [pc, #192]	; (8000804 <HAL_GPIO_Init+0x300>)
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <HAL_GPIO_Init+0x300>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	43db      	mvns	r3, r3
 8000750:	693a      	ldr	r2, [r7, #16]
 8000752:	4013      	ands	r3, r2
 8000754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075e:	2b00      	cmp	r3, #0
 8000760:	d003      	beq.n	800076a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4313      	orrs	r3, r2
 8000768:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800076a:	4a26      	ldr	r2, [pc, #152]	; (8000804 <HAL_GPIO_Init+0x300>)
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <HAL_GPIO_Init+0x300>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	43db      	mvns	r3, r3
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	4013      	ands	r3, r2
 800077e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000788:	2b00      	cmp	r3, #0
 800078a:	d003      	beq.n	8000794 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4313      	orrs	r3, r2
 8000792:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000794:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <HAL_GPIO_Init+0x300>)
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <HAL_GPIO_Init+0x300>)
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	43db      	mvns	r3, r3
 80007a4:	693a      	ldr	r2, [r7, #16]
 80007a6:	4013      	ands	r3, r2
 80007a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d003      	beq.n	80007be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80007be:	4a11      	ldr	r2, [pc, #68]	; (8000804 <HAL_GPIO_Init+0x300>)
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	3301      	adds	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	fa22 f303 	lsr.w	r3, r2, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	f47f ae9d 	bne.w	8000514 <HAL_GPIO_Init+0x10>
  }
}
 80007da:	bf00      	nop
 80007dc:	371c      	adds	r7, #28
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010000 	.word	0x40010000
 80007f0:	48000400 	.word	0x48000400
 80007f4:	48000800 	.word	0x48000800
 80007f8:	48000c00 	.word	0x48000c00
 80007fc:	48001000 	.word	0x48001000
 8000800:	48001400 	.word	0x48001400
 8000804:	40010400 	.word	0x40010400

08000808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	807b      	strh	r3, [r7, #2]
 8000814:	4613      	mov	r3, r2
 8000816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000818:	787b      	ldrb	r3, [r7, #1]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d003      	beq.n	8000826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800081e:	887a      	ldrh	r2, [r7, #2]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000824:	e002      	b.n	800082c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000826:	887a      	ldrh	r2, [r7, #2]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	695a      	ldr	r2, [r3, #20]
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	4013      	ands	r3, r2
 800084c:	2b00      	cmp	r3, #0
 800084e:	d003      	beq.n	8000858 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000850:	887a      	ldrh	r2, [r7, #2]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000856:	e002      	b.n	800085e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000858:	887a      	ldrh	r2, [r7, #2]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	619a      	str	r2, [r3, #24]
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d141      	bne.n	80008fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800087a:	4b4b      	ldr	r3, [pc, #300]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000886:	d131      	bne.n	80008ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000888:	4b47      	ldr	r3, [pc, #284]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800088a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800088e:	4a46      	ldr	r2, [pc, #280]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000894:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	4b43      	ldr	r3, [pc, #268]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008a0:	4a41      	ldr	r2, [pc, #260]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80008a8:	4b40      	ldr	r3, [pc, #256]	; (80009ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2232      	movs	r2, #50	; 0x32
 80008ae:	fb02 f303 	mul.w	r3, r2, r3
 80008b2:	4a3f      	ldr	r2, [pc, #252]	; (80009b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80008b4:	fba2 2303 	umull	r2, r3, r2, r3
 80008b8:	0c9b      	lsrs	r3, r3, #18
 80008ba:	3301      	adds	r3, #1
 80008bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008be:	e002      	b.n	80008c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008d2:	d102      	bne.n	80008da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1f2      	bne.n	80008c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80008da:	4b33      	ldr	r3, [pc, #204]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008e6:	d158      	bne.n	800099a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80008e8:	2303      	movs	r3, #3
 80008ea:	e057      	b.n	800099c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80008ec:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008f2:	4a2d      	ldr	r2, [pc, #180]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80008fc:	e04d      	b.n	800099a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000904:	d141      	bne.n	800098a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800090e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000912:	d131      	bne.n	8000978 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800091a:	4a23      	ldr	r2, [pc, #140]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800091c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000920:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800092c:	4a1e      	ldr	r2, [pc, #120]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800092e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000932:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2232      	movs	r2, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000940:	fba2 2303 	umull	r2, r3, r2, r3
 8000944:	0c9b      	lsrs	r3, r3, #18
 8000946:	3301      	adds	r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800094a:	e002      	b.n	8000952 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3b01      	subs	r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800095a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800095e:	d102      	bne.n	8000966 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1f2      	bne.n	800094c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800096e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000972:	d112      	bne.n	800099a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000974:	2303      	movs	r3, #3
 8000976:	e011      	b.n	800099c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800097a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000984:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000988:	e007      	b.n	800099a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000994:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000998:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	40007000 	.word	0x40007000
 80009ac:	20000008 	.word	0x20000008
 80009b0:	431bde83 	.word	0x431bde83

080009b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d101      	bne.n	80009c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e308      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d075      	beq.n	8000abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009d2:	4ba3      	ldr	r3, [pc, #652]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	f003 030c 	and.w	r3, r3, #12
 80009da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009dc:	4ba0      	ldr	r3, [pc, #640]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	2b0c      	cmp	r3, #12
 80009ea:	d102      	bne.n	80009f2 <HAL_RCC_OscConfig+0x3e>
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d002      	beq.n	80009f8 <HAL_RCC_OscConfig+0x44>
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	2b08      	cmp	r3, #8
 80009f6:	d10b      	bne.n	8000a10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009f8:	4b99      	ldr	r3, [pc, #612]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d05b      	beq.n	8000abc <HAL_RCC_OscConfig+0x108>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d157      	bne.n	8000abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e2e3      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a18:	d106      	bne.n	8000a28 <HAL_RCC_OscConfig+0x74>
 8000a1a:	4b91      	ldr	r3, [pc, #580]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a90      	ldr	r2, [pc, #576]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a24:	6013      	str	r3, [r2, #0]
 8000a26:	e01d      	b.n	8000a64 <HAL_RCC_OscConfig+0xb0>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a30:	d10c      	bne.n	8000a4c <HAL_RCC_OscConfig+0x98>
 8000a32:	4b8b      	ldr	r3, [pc, #556]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a8a      	ldr	r2, [pc, #552]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a3c:	6013      	str	r3, [r2, #0]
 8000a3e:	4b88      	ldr	r3, [pc, #544]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a87      	ldr	r2, [pc, #540]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a48:	6013      	str	r3, [r2, #0]
 8000a4a:	e00b      	b.n	8000a64 <HAL_RCC_OscConfig+0xb0>
 8000a4c:	4b84      	ldr	r3, [pc, #528]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a83      	ldr	r2, [pc, #524]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4b81      	ldr	r3, [pc, #516]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a80      	ldr	r2, [pc, #512]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d013      	beq.n	8000a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a6c:	f7ff fc38 	bl	80002e0 <HAL_GetTick>
 8000a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a72:	e008      	b.n	8000a86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a74:	f7ff fc34 	bl	80002e0 <HAL_GetTick>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2b64      	cmp	r3, #100	; 0x64
 8000a80:	d901      	bls.n	8000a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000a82:	2303      	movs	r3, #3
 8000a84:	e2a8      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a86:	4b76      	ldr	r3, [pc, #472]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f0      	beq.n	8000a74 <HAL_RCC_OscConfig+0xc0>
 8000a92:	e014      	b.n	8000abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a94:	f7ff fc24 	bl	80002e0 <HAL_GetTick>
 8000a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a9a:	e008      	b.n	8000aae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a9c:	f7ff fc20 	bl	80002e0 <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b64      	cmp	r3, #100	; 0x64
 8000aa8:	d901      	bls.n	8000aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	e294      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000aae:	4b6c      	ldr	r3, [pc, #432]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1f0      	bne.n	8000a9c <HAL_RCC_OscConfig+0xe8>
 8000aba:	e000      	b.n	8000abe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d075      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000aca:	4b65      	ldr	r3, [pc, #404]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f003 030c 	and.w	r3, r3, #12
 8000ad2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ad4:	4b62      	ldr	r3, [pc, #392]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	f003 0303 	and.w	r3, r3, #3
 8000adc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	2b0c      	cmp	r3, #12
 8000ae2:	d102      	bne.n	8000aea <HAL_RCC_OscConfig+0x136>
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d002      	beq.n	8000af0 <HAL_RCC_OscConfig+0x13c>
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	d11f      	bne.n	8000b30 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000af0:	4b5b      	ldr	r3, [pc, #364]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d005      	beq.n	8000b08 <HAL_RCC_OscConfig+0x154>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e267      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b08:	4b55      	ldr	r3, [pc, #340]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	691b      	ldr	r3, [r3, #16]
 8000b14:	061b      	lsls	r3, r3, #24
 8000b16:	4952      	ldr	r1, [pc, #328]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000b1c:	4b51      	ldr	r3, [pc, #324]	; (8000c64 <HAL_RCC_OscConfig+0x2b0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fb91 	bl	8000248 <HAL_InitTick>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d043      	beq.n	8000bb4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e253      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d023      	beq.n	8000b80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b38:	4b49      	ldr	r3, [pc, #292]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a48      	ldr	r2, [pc, #288]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b44:	f7ff fbcc 	bl	80002e0 <HAL_GetTick>
 8000b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b4a:	e008      	b.n	8000b5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b4c:	f7ff fbc8 	bl	80002e0 <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d901      	bls.n	8000b5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e23c      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b5e:	4b40      	ldr	r3, [pc, #256]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f0      	beq.n	8000b4c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b6a:	4b3d      	ldr	r3, [pc, #244]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	061b      	lsls	r3, r3, #24
 8000b78:	4939      	ldr	r1, [pc, #228]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	604b      	str	r3, [r1, #4]
 8000b7e:	e01a      	b.n	8000bb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b80:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a36      	ldr	r2, [pc, #216]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000b86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b8c:	f7ff fba8 	bl	80002e0 <HAL_GetTick>
 8000b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b92:	e008      	b.n	8000ba6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b94:	f7ff fba4 	bl	80002e0 <HAL_GetTick>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d901      	bls.n	8000ba6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	e218      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ba6:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f0      	bne.n	8000b94 <HAL_RCC_OscConfig+0x1e0>
 8000bb2:	e000      	b.n	8000bb6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0308 	and.w	r3, r3, #8
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d03c      	beq.n	8000c3c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d01c      	beq.n	8000c04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bca:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bd0:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bda:	f7ff fb81 	bl	80002e0 <HAL_GetTick>
 8000bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000be0:	e008      	b.n	8000bf4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000be2:	f7ff fb7d 	bl	80002e0 <HAL_GetTick>
 8000be6:	4602      	mov	r2, r0
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d901      	bls.n	8000bf4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e1f1      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0ef      	beq.n	8000be2 <HAL_RCC_OscConfig+0x22e>
 8000c02:	e01b      	b.n	8000c3c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000c0c:	f023 0301 	bic.w	r3, r3, #1
 8000c10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c14:	f7ff fb64 	bl	80002e0 <HAL_GetTick>
 8000c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000c1a:	e008      	b.n	8000c2e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c1c:	f7ff fb60 	bl	80002e0 <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d901      	bls.n	8000c2e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e1d4      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1ef      	bne.n	8000c1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f000 80ab 	beq.w	8000da0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d106      	bne.n	8000c68 <HAL_RCC_OscConfig+0x2b4>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e005      	b.n	8000c6a <HAL_RCC_OscConfig+0x2b6>
 8000c5e:	bf00      	nop
 8000c60:	40021000 	.word	0x40021000
 8000c64:	20000000 	.word	0x20000000
 8000c68:	2300      	movs	r3, #0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00d      	beq.n	8000c8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4baf      	ldr	r3, [pc, #700]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	4aae      	ldr	r2, [pc, #696]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7a:	4bac      	ldr	r3, [pc, #688]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000c86:	2301      	movs	r3, #1
 8000c88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c8a:	4ba9      	ldr	r3, [pc, #676]	; (8000f30 <HAL_RCC_OscConfig+0x57c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d118      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c96:	4ba6      	ldr	r3, [pc, #664]	; (8000f30 <HAL_RCC_OscConfig+0x57c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4aa5      	ldr	r2, [pc, #660]	; (8000f30 <HAL_RCC_OscConfig+0x57c>)
 8000c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ca2:	f7ff fb1d 	bl	80002e0 <HAL_GetTick>
 8000ca6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ca8:	e008      	b.n	8000cbc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000caa:	f7ff fb19 	bl	80002e0 <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d901      	bls.n	8000cbc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e18d      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000cbc:	4b9c      	ldr	r3, [pc, #624]	; (8000f30 <HAL_RCC_OscConfig+0x57c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0f0      	beq.n	8000caa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d108      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x32e>
 8000cd0:	4b96      	ldr	r3, [pc, #600]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cd6:	4a95      	ldr	r2, [pc, #596]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000ce0:	e024      	b.n	8000d2c <HAL_RCC_OscConfig+0x378>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	2b05      	cmp	r3, #5
 8000ce8:	d110      	bne.n	8000d0c <HAL_RCC_OscConfig+0x358>
 8000cea:	4b90      	ldr	r3, [pc, #576]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cf0:	4a8e      	ldr	r2, [pc, #568]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000cfa:	4b8c      	ldr	r3, [pc, #560]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d00:	4a8a      	ldr	r2, [pc, #552]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000d0a:	e00f      	b.n	8000d2c <HAL_RCC_OscConfig+0x378>
 8000d0c:	4b87      	ldr	r3, [pc, #540]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d12:	4a86      	ldr	r2, [pc, #536]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000d14:	f023 0301 	bic.w	r3, r3, #1
 8000d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000d1c:	4b83      	ldr	r3, [pc, #524]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d22:	4a82      	ldr	r2, [pc, #520]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000d24:	f023 0304 	bic.w	r3, r3, #4
 8000d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d016      	beq.n	8000d62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d34:	f7ff fad4 	bl	80002e0 <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000d3a:	e00a      	b.n	8000d52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d3c:	f7ff fad0 	bl	80002e0 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e142      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000d52:	4b76      	ldr	r3, [pc, #472]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0ed      	beq.n	8000d3c <HAL_RCC_OscConfig+0x388>
 8000d60:	e015      	b.n	8000d8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d62:	f7ff fabd 	bl	80002e0 <HAL_GetTick>
 8000d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000d68:	e00a      	b.n	8000d80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d6a:	f7ff fab9 	bl	80002e0 <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d901      	bls.n	8000d80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e12b      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000d80:	4b6a      	ldr	r3, [pc, #424]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1ed      	bne.n	8000d6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000d8e:	7ffb      	ldrb	r3, [r7, #31]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d105      	bne.n	8000da0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d94:	4b65      	ldr	r3, [pc, #404]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d98:	4a64      	ldr	r2, [pc, #400]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0320 	and.w	r3, r3, #32
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d03c      	beq.n	8000e26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d01c      	beq.n	8000dee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000db4:	4b5d      	ldr	r3, [pc, #372]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000dba:	4a5c      	ldr	r2, [pc, #368]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dc4:	f7ff fa8c 	bl	80002e0 <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000dcc:	f7ff fa88 	bl	80002e0 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e0fc      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000dde:	4b53      	ldr	r3, [pc, #332]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0ef      	beq.n	8000dcc <HAL_RCC_OscConfig+0x418>
 8000dec:	e01b      	b.n	8000e26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000dee:	4b4f      	ldr	r3, [pc, #316]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000df4:	4a4d      	ldr	r2, [pc, #308]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000df6:	f023 0301 	bic.w	r3, r3, #1
 8000dfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dfe:	f7ff fa6f 	bl	80002e0 <HAL_GetTick>
 8000e02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000e04:	e008      	b.n	8000e18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e06:	f7ff fa6b 	bl	80002e0 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e0df      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000e18:	4b44      	ldr	r3, [pc, #272]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1ef      	bne.n	8000e06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 80d3 	beq.w	8000fd6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e30:	4b3e      	ldr	r3, [pc, #248]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f003 030c 	and.w	r3, r3, #12
 8000e38:	2b0c      	cmp	r3, #12
 8000e3a:	f000 808d 	beq.w	8000f58 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d15a      	bne.n	8000efc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e46:	4b39      	ldr	r3, [pc, #228]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a38      	ldr	r2, [pc, #224]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e52:	f7ff fa45 	bl	80002e0 <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e5a:	f7ff fa41 	bl	80002e0 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e0b5      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e6c:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1f0      	bne.n	8000e5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <HAL_RCC_OscConfig+0x580>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	6a11      	ldr	r1, [r2, #32]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e88:	3a01      	subs	r2, #1
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	4311      	orrs	r1, r2
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000e92:	0212      	lsls	r2, r2, #8
 8000e94:	4311      	orrs	r1, r2
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000e9a:	0852      	lsrs	r2, r2, #1
 8000e9c:	3a01      	subs	r2, #1
 8000e9e:	0552      	lsls	r2, r2, #21
 8000ea0:	4311      	orrs	r1, r2
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000ea6:	0852      	lsrs	r2, r2, #1
 8000ea8:	3a01      	subs	r2, #1
 8000eaa:	0652      	lsls	r2, r2, #25
 8000eac:	4311      	orrs	r1, r2
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000eb2:	06d2      	lsls	r2, r2, #27
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	491d      	ldr	r1, [pc, #116]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ec6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ed2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fa04 	bl	80002e0 <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000edc:	f7ff fa00 	bl	80002e0 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e074      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f0      	beq.n	8000edc <HAL_RCC_OscConfig+0x528>
 8000efa:	e06c      	b.n	8000fd6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f06:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000f0e:	f023 0303 	bic.w	r3, r3, #3
 8000f12:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_RCC_OscConfig+0x578>)
 8000f1a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f24:	f7ff f9dc 	bl	80002e0 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f2a:	e00e      	b.n	8000f4a <HAL_RCC_OscConfig+0x596>
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40007000 	.word	0x40007000
 8000f34:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f38:	f7ff f9d2 	bl	80002e0 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e046      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f4a:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <HAL_RCC_OscConfig+0x62c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f0      	bne.n	8000f38 <HAL_RCC_OscConfig+0x584>
 8000f56:	e03e      	b.n	8000fd6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69db      	ldr	r3, [r3, #28]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d101      	bne.n	8000f64 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e039      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <HAL_RCC_OscConfig+0x62c>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f003 0203 	and.w	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d12c      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	3b01      	subs	r3, #1
 8000f84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d123      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f94:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d11b      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d113      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	085b      	lsrs	r3, r3, #1
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d109      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc8:	085b      	lsrs	r3, r3, #1
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d001      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3720      	adds	r7, #32
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e11e      	b.n	800123a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ffc:	4b91      	ldr	r3, [pc, #580]	; (8001244 <HAL_RCC_ClockConfig+0x260>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 030f 	and.w	r3, r3, #15
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d910      	bls.n	800102c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800100a:	4b8e      	ldr	r3, [pc, #568]	; (8001244 <HAL_RCC_ClockConfig+0x260>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 020f 	bic.w	r2, r3, #15
 8001012:	498c      	ldr	r1, [pc, #560]	; (8001244 <HAL_RCC_ClockConfig+0x260>)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	4313      	orrs	r3, r2
 8001018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800101a:	4b8a      	ldr	r3, [pc, #552]	; (8001244 <HAL_RCC_ClockConfig+0x260>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	d001      	beq.n	800102c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e106      	b.n	800123a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	d073      	beq.n	8001120 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b03      	cmp	r3, #3
 800103e:	d129      	bne.n	8001094 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001040:	4b81      	ldr	r3, [pc, #516]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e0f4      	b.n	800123a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001050:	f000 f966 	bl	8001320 <RCC_GetSysClockFreqFromPLLSource>
 8001054:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4a7c      	ldr	r2, [pc, #496]	; (800124c <HAL_RCC_ClockConfig+0x268>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d93f      	bls.n	80010de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800105e:	4b7a      	ldr	r3, [pc, #488]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d009      	beq.n	800107e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001072:	2b00      	cmp	r3, #0
 8001074:	d033      	beq.n	80010de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800107a:	2b00      	cmp	r3, #0
 800107c:	d12f      	bne.n	80010de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800107e:	4b72      	ldr	r3, [pc, #456]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001086:	4a70      	ldr	r2, [pc, #448]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 8001088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	e024      	b.n	80010de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d107      	bne.n	80010ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800109c:	4b6a      	ldr	r3, [pc, #424]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d109      	bne.n	80010bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0c6      	b.n	800123a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010ac:	4b66      	ldr	r3, [pc, #408]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e0be      	b.n	800123a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80010bc:	f000 f8ce 	bl	800125c <HAL_RCC_GetSysClockFreq>
 80010c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4a61      	ldr	r2, [pc, #388]	; (800124c <HAL_RCC_ClockConfig+0x268>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d909      	bls.n	80010de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80010ca:	4b5f      	ldr	r3, [pc, #380]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010d2:	4a5d      	ldr	r2, [pc, #372]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80010da:	2380      	movs	r3, #128	; 0x80
 80010dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80010de:	4b5a      	ldr	r3, [pc, #360]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f023 0203 	bic.w	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	4957      	ldr	r1, [pc, #348]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010f0:	f7ff f8f6 	bl	80002e0 <HAL_GetTick>
 80010f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f6:	e00a      	b.n	800110e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f8:	f7ff f8f2 	bl	80002e0 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	f241 3288 	movw	r2, #5000	; 0x1388
 8001106:	4293      	cmp	r3, r2
 8001108:	d901      	bls.n	800110e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e095      	b.n	800123a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800110e:	4b4e      	ldr	r3, [pc, #312]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 020c 	and.w	r2, r3, #12
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	429a      	cmp	r2, r3
 800111e:	d1eb      	bne.n	80010f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d023      	beq.n	8001174 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001138:	4b43      	ldr	r3, [pc, #268]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	4a42      	ldr	r2, [pc, #264]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 800113e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001142:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	2b00      	cmp	r3, #0
 800114e:	d007      	beq.n	8001160 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001150:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001158:	4a3b      	ldr	r2, [pc, #236]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 800115a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800115e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001160:	4b39      	ldr	r3, [pc, #228]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4936      	ldr	r1, [pc, #216]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 800116e:	4313      	orrs	r3, r2
 8001170:	608b      	str	r3, [r1, #8]
 8001172:	e008      	b.n	8001186 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2b80      	cmp	r3, #128	; 0x80
 8001178:	d105      	bne.n	8001186 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800117a:	4b33      	ldr	r3, [pc, #204]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	4a32      	ldr	r2, [pc, #200]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 8001180:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001184:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <HAL_RCC_ClockConfig+0x260>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d21d      	bcs.n	80011d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_RCC_ClockConfig+0x260>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 020f 	bic.w	r2, r3, #15
 800119c:	4929      	ldr	r1, [pc, #164]	; (8001244 <HAL_RCC_ClockConfig+0x260>)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80011a4:	f7ff f89c 	bl	80002e0 <HAL_GetTick>
 80011a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011aa:	e00a      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ac:	f7ff f898 	bl	80002e0 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e03b      	b.n	800123a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_RCC_ClockConfig+0x260>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d1ed      	bne.n	80011ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d008      	beq.n	80011ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4917      	ldr	r1, [pc, #92]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d009      	beq.n	800120e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	490f      	ldr	r1, [pc, #60]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 800120a:	4313      	orrs	r3, r2
 800120c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800120e:	f000 f825 	bl	800125c <HAL_RCC_GetSysClockFreq>
 8001212:	4601      	mov	r1, r0
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_RCC_ClockConfig+0x264>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <HAL_RCC_ClockConfig+0x26c>)
 8001220:	5cd3      	ldrb	r3, [r2, r3]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	fa21 f303 	lsr.w	r3, r1, r3
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <HAL_RCC_ClockConfig+0x270>)
 800122c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_RCC_ClockConfig+0x274>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f808 	bl	8000248 <HAL_InitTick>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40022000 	.word	0x40022000
 8001248:	40021000 	.word	0x40021000
 800124c:	04c4b400 	.word	0x04c4b400
 8001250:	0800169c 	.word	0x0800169c
 8001254:	20000008 	.word	0x20000008
 8001258:	20000000 	.word	0x20000000

0800125c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001262:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b04      	cmp	r3, #4
 800126c:	d102      	bne.n	8001274 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	e047      	b.n	8001304 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001274:	4b27      	ldr	r3, [pc, #156]	; (8001314 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b08      	cmp	r3, #8
 800127e:	d102      	bne.n	8001286 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001280:	4b26      	ldr	r3, [pc, #152]	; (800131c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	e03e      	b.n	8001304 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001286:	4b23      	ldr	r3, [pc, #140]	; (8001314 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b0c      	cmp	r3, #12
 8001290:	d136      	bne.n	8001300 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_RCC_GetSysClockFreq+0xb8>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	3301      	adds	r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d10c      	bne.n	80012ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80012b0:	4a1a      	ldr	r2, [pc, #104]	; (800131c <HAL_RCC_GetSysClockFreq+0xc0>)
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b8:	4a16      	ldr	r2, [pc, #88]	; (8001314 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012ba:	68d2      	ldr	r2, [r2, #12]
 80012bc:	0a12      	lsrs	r2, r2, #8
 80012be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012c2:	fb02 f303 	mul.w	r3, r2, r3
 80012c6:	617b      	str	r3, [r7, #20]
      break;
 80012c8:	e00c      	b.n	80012e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80012ca:	4a13      	ldr	r2, [pc, #76]	; (8001318 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4a10      	ldr	r2, [pc, #64]	; (8001314 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012d4:	68d2      	ldr	r2, [r2, #12]
 80012d6:	0a12      	lsrs	r2, r2, #8
 80012d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
 80012e0:	617b      	str	r3, [r7, #20]
      break;
 80012e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0e5b      	lsrs	r3, r3, #25
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	3301      	adds	r3, #1
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	e001      	b.n	8001304 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001304:	693b      	ldr	r3, [r7, #16]
}
 8001306:	4618      	mov	r0, r3
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	00f42400 	.word	0x00f42400
 800131c:	007a1200 	.word	0x007a1200

08001320 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3301      	adds	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2b03      	cmp	r3, #3
 8001342:	d10c      	bne.n	800135e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001344:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	fbb2 f3f3 	udiv	r3, r2, r3
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800134e:	68d2      	ldr	r2, [r2, #12]
 8001350:	0a12      	lsrs	r2, r2, #8
 8001352:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
    break;
 800135c:	e00c      	b.n	8001378 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001368:	68d2      	ldr	r2, [r2, #12]
 800136a:	0a12      	lsrs	r2, r2, #8
 800136c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001370:	fb02 f303 	mul.w	r3, r2, r3
 8001374:	617b      	str	r3, [r7, #20]
    break;
 8001376:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0e5b      	lsrs	r3, r3, #25
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	3301      	adds	r3, #1
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001390:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001392:	687b      	ldr	r3, [r7, #4]
}
 8001394:	4618      	mov	r0, r3
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40021000 	.word	0x40021000
 80013a4:	007a1200 	.word	0x007a1200
 80013a8:	00f42400 	.word	0x00f42400

080013ac <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	HAL_Init();
 80013b0:	f7fe ff32 	bl	8000218 <HAL_Init>

	SystemClock_Config();
 80013b4:	f000 f80c 	bl	80013d0 <SystemClock_Config>

	MX_GPIO_Init();
 80013b8:	f000 f84a 	bl	8001450 <MX_GPIO_Init>

	while (1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80013bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c4:	f7ff fa38 	bl	8000838 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80013c8:	20c8      	movs	r0, #200	; 0xc8
 80013ca:	f7fe ff95 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80013ce:	e7f5      	b.n	80013bc <main+0x10>

080013d0 <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b094      	sub	sp, #80	; 0x50
 80013d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 0318 	add.w	r3, r7, #24
 80013da:	2238      	movs	r2, #56	; 0x38
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f948 	bl	8001674 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013f6:	f7ff fa39 	bl	800086c <HAL_PWREx_ControlVoltageScaling>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001404:	2340      	movs	r3, #64	; 0x40
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001408:	2300      	movs	r3, #0
 800140a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	f107 0318 	add.w	r3, r7, #24
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff facf 	bl	80009b4 <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x50>
	{
		Error_Handler();
 800141c:	f000 f858 	bl	80014d0 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8001420:	230f      	movs	r3, #15
 8001422:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001424:	2301      	movs	r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fdd3 	bl	8000fe4 <HAL_RCC_ClockConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8001444:	f000 f844 	bl	80014d0 <Error_Handler>
	}
}
 8001448:	bf00      	nop
 800144a:	3750      	adds	r7, #80	; 0x50
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <MX_GPIO_Init+0x7c>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a18      	ldr	r2, [pc, #96]	; (80014cc <MX_GPIO_Init+0x7c>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <MX_GPIO_Init+0x7c>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_GPIO_Init+0x7c>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <MX_GPIO_Init+0x7c>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_GPIO_Init+0x7c>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f7ff f9b2 	bl	8000808 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	4619      	mov	r1, r3
 80014bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c0:	f7ff f820 	bl	8000504 <HAL_GPIO_Init>
}
 80014c4:	bf00      	nop
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000

080014d0 <Error_Handler>:

void Error_Handler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80014d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f7ff f9ac 	bl	8000838 <HAL_GPIO_TogglePin>
		HAL_Delay(33);
 80014e0:	2021      	movs	r0, #33	; 0x21
 80014e2:	f7fe ff09 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80014e6:	e7f5      	b.n	80014d4 <Error_Handler+0x4>

080014e8 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 80014f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014f6:	6093      	str	r3, [r2, #8]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40007000 	.word	0x40007000

08001508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_MspInit+0x44>)
 8001510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_MspInit+0x44>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6613      	str	r3, [r2, #96]	; 0x60
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_MspInit+0x44>)
 800151c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_MspInit+0x44>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	4a08      	ldr	r2, [pc, #32]	; (800154c <HAL_MspInit+0x44>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6593      	str	r3, [r2, #88]	; 0x58
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_MspInit+0x44>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800153e:	f7ff ffd3 	bl	80014e8 <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000

08001550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <MemManage_Handler+0x4>

0800156a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <UsageFault_Handler+0x4>

08001576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a4:	f7fe fe8a 	bl	80002bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <SystemInit+0x28>)
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b6:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <SystemInit+0x28>)
 80015b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SystemInit+0x28>)
 80015c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015c6:	609a      	str	r2, [r3, #8]
#endif
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015d8:	480d      	ldr	r0, [pc, #52]	; (8001610 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <LoopForever+0x6>)
  ldr r1, =_edata
 80015de:	490e      	ldr	r1, [pc, #56]	; (8001618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <LoopForever+0xe>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015e4:	e002      	b.n	80015ec <LoopCopyDataInit>

080015e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ea:	3304      	adds	r3, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f0:	d3f9      	bcc.n	80015e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f4:	4c0b      	ldr	r4, [pc, #44]	; (8001624 <LoopForever+0x16>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f8:	e001      	b.n	80015fe <LoopFillZerobss>

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fc:	3204      	adds	r2, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001602:	f7ff ffd3 	bl	80015ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f000 f811 	bl	800162c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160a:	f7ff fecf 	bl	80013ac <main>

0800160e <LoopForever>:

LoopForever:
    b LoopForever
 800160e:	e7fe      	b.n	800160e <LoopForever>
  ldr   r0, =_estack
 8001610:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800161c:	080016b4 	.word	0x080016b4
  ldr r2, =_sbss
 8001620:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001624:	2000002c 	.word	0x2000002c

08001628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_2_IRQHandler>
	...

0800162c <__libc_init_array>:
 800162c:	b570      	push	{r4, r5, r6, lr}
 800162e:	4e0d      	ldr	r6, [pc, #52]	; (8001664 <__libc_init_array+0x38>)
 8001630:	4c0d      	ldr	r4, [pc, #52]	; (8001668 <__libc_init_array+0x3c>)
 8001632:	1ba4      	subs	r4, r4, r6
 8001634:	10a4      	asrs	r4, r4, #2
 8001636:	2500      	movs	r5, #0
 8001638:	42a5      	cmp	r5, r4
 800163a:	d109      	bne.n	8001650 <__libc_init_array+0x24>
 800163c:	4e0b      	ldr	r6, [pc, #44]	; (800166c <__libc_init_array+0x40>)
 800163e:	4c0c      	ldr	r4, [pc, #48]	; (8001670 <__libc_init_array+0x44>)
 8001640:	f000 f820 	bl	8001684 <_init>
 8001644:	1ba4      	subs	r4, r4, r6
 8001646:	10a4      	asrs	r4, r4, #2
 8001648:	2500      	movs	r5, #0
 800164a:	42a5      	cmp	r5, r4
 800164c:	d105      	bne.n	800165a <__libc_init_array+0x2e>
 800164e:	bd70      	pop	{r4, r5, r6, pc}
 8001650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001654:	4798      	blx	r3
 8001656:	3501      	adds	r5, #1
 8001658:	e7ee      	b.n	8001638 <__libc_init_array+0xc>
 800165a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800165e:	4798      	blx	r3
 8001660:	3501      	adds	r5, #1
 8001662:	e7f2      	b.n	800164a <__libc_init_array+0x1e>
 8001664:	080016ac 	.word	0x080016ac
 8001668:	080016ac 	.word	0x080016ac
 800166c:	080016ac 	.word	0x080016ac
 8001670:	080016b0 	.word	0x080016b0

08001674 <memset>:
 8001674:	4402      	add	r2, r0
 8001676:	4603      	mov	r3, r0
 8001678:	4293      	cmp	r3, r2
 800167a:	d100      	bne.n	800167e <memset+0xa>
 800167c:	4770      	bx	lr
 800167e:	f803 1b01 	strb.w	r1, [r3], #1
 8001682:	e7f9      	b.n	8001678 <memset+0x4>

08001684 <_init>:
 8001684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001686:	bf00      	nop
 8001688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800168a:	bc08      	pop	{r3}
 800168c:	469e      	mov	lr, r3
 800168e:	4770      	bx	lr

08001690 <_fini>:
 8001690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001692:	bf00      	nop
 8001694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001696:	bc08      	pop	{r3}
 8001698:	469e      	mov	lr, r3
 800169a:	4770      	bx	lr
