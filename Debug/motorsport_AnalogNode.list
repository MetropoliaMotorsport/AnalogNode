
motorsport_AnalogNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d04  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005edc  08005edc  00015edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005efc  08005efc  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  08005efc  08005efc  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005efc  08005efc  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005efc  08005efc  00015efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f00  08005f00  00015f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08005f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f80  2000010c  08006010  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000108c  08006010  0002108c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141ce  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023c4  00000000  00000000  0003430a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001400  00000000  00000000  000366d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  00037ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ff66  00000000  00000000  00038da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db0b  00000000  00000000  00058d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d73f2  00000000  00000000  00066819  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013dc0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055dc  00000000  00000000  0013dc88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000010c 	.word	0x2000010c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005ec4 	.word	0x08005ec4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000110 	.word	0x20000110
 8000214:	08005ec4 	.word	0x08005ec4

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f001 fbdc 	bl	80019e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f005 f8c9 	bl	80053d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f001 fbe8 	bl	8001a46 <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f001 fbb4 	bl	80019f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000008 	.word	0x20000008
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	2000012c 	.word	0x2000012c
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	2000012c 	.word	0x2000012c

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	431a      	orrs	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	431a      	orrs	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	609a      	str	r2, [r3, #8]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000398:	4618      	mov	r0, r3
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80003a4:	b490      	push	{r4, r7}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	3360      	adds	r3, #96	; 0x60
 80003b6:	461a      	mov	r2, r3
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4413      	add	r3, r2
 80003be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80003c0:	6822      	ldr	r2, [r4, #0]
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <LL_ADC_SetOffset+0x40>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	430a      	orrs	r2, r1
 80003d0:	4313      	orrs	r3, r2
 80003d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003d6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc90      	pop	{r4, r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	03fff000 	.word	0x03fff000

080003e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80003e8:	b490      	push	{r4, r7}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3360      	adds	r3, #96	; 0x60
 80003f6:	461a      	mov	r2, r3
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000400:	6823      	ldr	r3, [r4, #0]
 8000402:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bc90      	pop	{r4, r7}
 800040e:	4770      	bx	lr

08000410 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000410:	b490      	push	{r4, r7}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	3360      	adds	r3, #96	; 0x60
 8000420:	461a      	mov	r2, r3
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800042a:	6823      	ldr	r3, [r4, #0]
 800042c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4313      	orrs	r3, r2
 8000434:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bc90      	pop	{r4, r7}
 800043e:	4770      	bx	lr

08000440 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000440:	b490      	push	{r4, r7}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3360      	adds	r3, #96	; 0x60
 8000450:	461a      	mov	r2, r3
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800045a:	6823      	ldr	r3, [r4, #0]
 800045c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4313      	orrs	r3, r2
 8000464:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bc90      	pop	{r4, r7}
 800046e:	4770      	bx	lr

08000470 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000470:	b490      	push	{r4, r7}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3360      	adds	r3, #96	; 0x60
 8000480:	461a      	mov	r2, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4413      	add	r3, r2
 8000488:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800048a:	6823      	ldr	r3, [r4, #0]
 800048c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bc90      	pop	{r4, r7}
 800049e:	4770      	bx	lr

080004a0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	615a      	str	r2, [r3, #20]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d101      	bne.n	80004de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80004da:	2301      	movs	r3, #1
 80004dc:	e000      	b.n	80004e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004ec:	b490      	push	{r4, r7}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3330      	adds	r3, #48	; 0x30
 80004fc:	461a      	mov	r2, r3
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	0a1b      	lsrs	r3, r3, #8
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	f003 030c 	and.w	r3, r3, #12
 8000508:	4413      	add	r3, r2
 800050a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800050c:	6822      	ldr	r2, [r4, #0]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	f003 031f 	and.w	r3, r3, #31
 8000514:	211f      	movs	r1, #31
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	43db      	mvns	r3, r3
 800051c:	401a      	ands	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	0e9b      	lsrs	r3, r3, #26
 8000522:	f003 011f 	and.w	r1, r3, #31
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	f003 031f 	and.w	r3, r3, #31
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	4313      	orrs	r3, r2
 8000532:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bc90      	pop	{r4, r7}
 800053c:	4770      	bx	lr

0800053e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800053e:	b490      	push	{r4, r7}
 8000540:	b084      	sub	sp, #16
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	3314      	adds	r3, #20
 800054e:	461a      	mov	r2, r3
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	0e5b      	lsrs	r3, r3, #25
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	4413      	add	r3, r2
 800055c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800055e:	6822      	ldr	r2, [r4, #0]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	0d1b      	lsrs	r3, r3, #20
 8000564:	f003 031f 	and.w	r3, r3, #31
 8000568:	2107      	movs	r1, #7
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	43db      	mvns	r3, r3
 8000570:	401a      	ands	r2, r3
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	0d1b      	lsrs	r3, r3, #20
 8000576:	f003 031f 	and.w	r3, r3, #31
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	4313      	orrs	r3, r2
 8000582:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bc90      	pop	{r4, r7}
 800058c:	4770      	bx	lr
	...

08000590 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005a8:	43db      	mvns	r3, r3
 80005aa:	401a      	ands	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f003 0318 	and.w	r3, r3, #24
 80005b2:	4908      	ldr	r1, [pc, #32]	; (80005d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80005b4:	40d9      	lsrs	r1, r3
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	400b      	ands	r3, r1
 80005ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005be:	431a      	orrs	r2, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	0007ffff 	.word	0x0007ffff

080005d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f003 031f 	and.w	r3, r3, #31
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000604:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	6093      	str	r3, [r2, #8]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800062c:	d101      	bne.n	8000632 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000650:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000654:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800067c:	d101      	bne.n	8000682 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800067e:	2301      	movs	r3, #1
 8000680:	e000      	b.n	8000684 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80006a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006a4:	f043 0201 	orr.w	r2, r3, #1
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80006c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006cc:	f043 0202 	orr.w	r2, r3, #2
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d101      	bne.n	80006f8 <LL_ADC_IsEnabled+0x18>
 80006f4:	2301      	movs	r3, #1
 80006f6:	e000      	b.n	80006fa <LL_ADC_IsEnabled+0x1a>
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	2b02      	cmp	r3, #2
 8000718:	d101      	bne.n	800071e <LL_ADC_IsDisableOngoing+0x18>
 800071a:	2301      	movs	r3, #1
 800071c:	e000      	b.n	8000720 <LL_ADC_IsDisableOngoing+0x1a>
 800071e:	2300      	movs	r3, #0
}
 8000720:	4618      	mov	r0, r3
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800073c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000740:	f043 0204 	orr.w	r2, r3, #4
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	2b04      	cmp	r3, #4
 8000766:	d101      	bne.n	800076c <LL_ADC_REG_IsConversionOngoing+0x18>
 8000768:	2301      	movs	r3, #1
 800076a:	e000      	b.n	800076e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	2b08      	cmp	r3, #8
 800078c:	d101      	bne.n	8000792 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800078e:	2301      	movs	r3, #1
 8000790:	e000      	b.n	8000794 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000792:	2300      	movs	r3, #0
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007a8:	2300      	movs	r3, #0
 80007aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d101      	bne.n	80007ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e16b      	b.n	8000a92 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d109      	bne.n	80007dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f004 fe25 	bl	8005418 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff19 	bl	8000618 <LL_ADC_IsDeepPowerDownEnabled>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d004      	beq.n	80007f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff feff 	bl	80005f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff34 	bl	8000668 <LL_ADC_IsInternalRegulatorEnabled>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d113      	bne.n	800082e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff18 	bl	8000640 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000810:	4ba2      	ldr	r3, [pc, #648]	; (8000a9c <HAL_ADC_Init+0x2fc>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	099b      	lsrs	r3, r3, #6
 8000816:	4aa2      	ldr	r2, [pc, #648]	; (8000aa0 <HAL_ADC_Init+0x300>)
 8000818:	fba2 2303 	umull	r2, r3, r2, r3
 800081c:	099b      	lsrs	r3, r3, #6
 800081e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000820:	e002      	b.n	8000828 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	3b01      	subs	r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1f9      	bne.n	8000822 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ff18 	bl	8000668 <LL_ADC_IsInternalRegulatorEnabled>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10d      	bne.n	800085a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000842:	f043 0210 	orr.w	r2, r3, #16
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084e:	f043 0201 	orr.w	r2, r3, #1
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff78 	bl	8000754 <LL_ADC_REG_IsConversionOngoing>
 8000864:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800086a:	f003 0310 	and.w	r3, r3, #16
 800086e:	2b00      	cmp	r3, #0
 8000870:	f040 8106 	bne.w	8000a80 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	2b00      	cmp	r3, #0
 8000878:	f040 8102 	bne.w	8000a80 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000880:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000884:	f043 0202 	orr.w	r2, r3, #2
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff25 	bl	80006e0 <LL_ADC_IsEnabled>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d111      	bne.n	80008c0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800089c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80008a0:	f7ff ff1e 	bl	80006e0 <LL_ADC_IsEnabled>
 80008a4:	4604      	mov	r4, r0
 80008a6:	487f      	ldr	r0, [pc, #508]	; (8000aa4 <HAL_ADC_Init+0x304>)
 80008a8:	f7ff ff1a 	bl	80006e0 <LL_ADC_IsEnabled>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4323      	orrs	r3, r4
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d105      	bne.n	80008c0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	4619      	mov	r1, r3
 80008ba:	487b      	ldr	r0, [pc, #492]	; (8000aa8 <HAL_ADC_Init+0x308>)
 80008bc:	f7ff fd3e 	bl	800033c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7f5b      	ldrb	r3, [r3, #29]
 80008c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80008d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80008d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008e0:	4313      	orrs	r3, r2
 80008e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d106      	bne.n	80008fc <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f2:	3b01      	subs	r3, #1
 80008f4:	045b      	lsls	r3, r3, #17
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000900:	2b00      	cmp	r3, #0
 8000902:	d009      	beq.n	8000918 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000908:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4313      	orrs	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	4b63      	ldr	r3, [pc, #396]	; (8000aac <HAL_ADC_Init+0x30c>)
 8000920:	4013      	ands	r3, r2
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	6812      	ldr	r2, [r2, #0]
 8000926:	69b9      	ldr	r1, [r7, #24]
 8000928:	430b      	orrs	r3, r1
 800092a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	430a      	orrs	r2, r1
 8000940:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ff04 	bl	8000754 <LL_ADC_REG_IsConversionOngoing>
 800094c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff11 	bl	800077a <LL_ADC_INJ_IsConversionOngoing>
 8000958:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d16d      	bne.n	8000a3c <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d16a      	bne.n	8000a3c <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800096a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000972:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000974:	4313      	orrs	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000982:	f023 0302 	bic.w	r3, r3, #2
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	6812      	ldr	r2, [r2, #0]
 800098a:	69b9      	ldr	r1, [r7, #24]
 800098c:	430b      	orrs	r3, r1
 800098e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d017      	beq.n	80009c8 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	691a      	ldr	r2, [r3, #16]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80009a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80009b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	6911      	ldr	r1, [r2, #16]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	430b      	orrs	r3, r1
 80009c2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80009c6:	e013      	b.n	80009f0 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	691a      	ldr	r2, [r3, #16]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	6812      	ldr	r2, [r2, #0]
 80009e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d118      	bne.n	8000a2c <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	691b      	ldr	r3, [r3, #16]
 8000a00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000a04:	f023 0304 	bic.w	r3, r3, #4
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000a10:	4311      	orrs	r1, r2
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000a16:	4311      	orrs	r1, r2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f042 0201 	orr.w	r2, r2, #1
 8000a28:	611a      	str	r2, [r3, #16]
 8000a2a:	e007      	b.n	8000a3c <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	691a      	ldr	r2, [r3, #16]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f022 0201 	bic.w	r2, r2, #1
 8000a3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10c      	bne.n	8000a5e <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f023 010f 	bic.w	r1, r3, #15
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6a1b      	ldr	r3, [r3, #32]
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a5c:	e007      	b.n	8000a6e <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f022 020f 	bic.w	r2, r2, #15
 8000a6c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a72:	f023 0303 	bic.w	r3, r3, #3
 8000a76:	f043 0201 	orr.w	r2, r3, #1
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8000a7e:	e007      	b.n	8000a90 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a84:	f043 0210 	orr.w	r2, r3, #16
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000a90:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	053e2d63 	.word	0x053e2d63
 8000aa4:	50000100 	.word	0x50000100
 8000aa8:	50000300 	.word	0x50000300
 8000aac:	fff04007 	.word	0xfff04007

08000ab0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000abc:	4851      	ldr	r0, [pc, #324]	; (8000c04 <HAL_ADC_Start_DMA+0x154>)
 8000abe:	f7ff fd8b 	bl	80005d8 <LL_ADC_GetMultimode>
 8000ac2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fe43 	bl	8000754 <LL_ADC_REG_IsConversionOngoing>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	f040 808f 	bne.w	8000bf4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d101      	bne.n	8000ae4 <HAL_ADC_Start_DMA+0x34>
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e08a      	b.n	8000bfa <HAL_ADC_Start_DMA+0x14a>
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d005      	beq.n	8000afe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	2b05      	cmp	r3, #5
 8000af6:	d002      	beq.n	8000afe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	2b09      	cmp	r3, #9
 8000afc:	d173      	bne.n	8000be6 <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f000 fc02 	bl	8001308 <ADC_Enable>
 8000b04:	4603      	mov	r3, r0
 8000b06:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000b08:	7dfb      	ldrb	r3, [r7, #23]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d166      	bne.n	8000bdc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b16:	f023 0301 	bic.w	r3, r3, #1
 8000b1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a38      	ldr	r2, [pc, #224]	; (8000c08 <HAL_ADC_Start_DMA+0x158>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d002      	beq.n	8000b32 <HAL_ADC_Start_DMA+0x82>
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	e001      	b.n	8000b36 <HAL_ADC_Start_DMA+0x86>
 8000b32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	6812      	ldr	r2, [r2, #0]
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d002      	beq.n	8000b44 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d105      	bne.n	8000b50 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d006      	beq.n	8000b6a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b60:	f023 0206 	bic.w	r2, r3, #6
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	661a      	str	r2, [r3, #96]	; 0x60
 8000b68:	e002      	b.n	8000b70 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b74:	4a25      	ldr	r2, [pc, #148]	; (8000c0c <HAL_ADC_Start_DMA+0x15c>)
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b7c:	4a24      	ldr	r2, [pc, #144]	; (8000c10 <HAL_ADC_Start_DMA+0x160>)
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b84:	4a23      	ldr	r2, [pc, #140]	; (8000c14 <HAL_ADC_Start_DMA+0x164>)
 8000b86:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	221c      	movs	r2, #28
 8000b8e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2200      	movs	r2, #0
 8000b94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f042 0210 	orr.w	r2, r2, #16
 8000ba6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	68da      	ldr	r2, [r3, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f042 0201 	orr.w	r2, r2, #1
 8000bb6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3340      	adds	r3, #64	; 0x40
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	68ba      	ldr	r2, [r7, #8]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f000 fff2 	bl	8001bb0 <HAL_DMA_Start_IT>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fda9 	bl	800072c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8000bda:	e00d      	b.n	8000bf8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8000be4:	e008      	b.n	8000bf8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000bf2:	e001      	b.n	8000bf8 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	50000300 	.word	0x50000300
 8000c08:	50000100 	.word	0x50000100
 8000c0c:	0800146d 	.word	0x0800146d
 8000c10:	08001545 	.word	0x08001545
 8000c14:	08001561 	.word	0x08001561

08000c18 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b0a6      	sub	sp, #152	; 0x98
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d101      	bne.n	8000c62 <HAL_ADC_ConfigChannel+0x22>
 8000c5e:	2302      	movs	r3, #2
 8000c60:	e348      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x6b4>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2201      	movs	r2, #1
 8000c66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fd70 	bl	8000754 <LL_ADC_REG_IsConversionOngoing>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 832d 	bne.w	80012d6 <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	6859      	ldr	r1, [r3, #4]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	f7ff fc2f 	bl	80004ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fd5e 	bl	8000754 <LL_ADC_REG_IsConversionOngoing>
 8000c98:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd6a 	bl	800077a <LL_ADC_INJ_IsConversionOngoing>
 8000ca6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000caa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 817b 	bne.w	8000faa <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f040 8176 	bne.w	8000faa <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cc6:	d10f      	bne.n	8000ce8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f7ff fc33 	bl	800053e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fbdd 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>
 8000ce6:	e00e      	b.n	8000d06 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	6819      	ldr	r1, [r3, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	f7ff fc22 	bl	800053e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fbcd 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	695a      	ldr	r2, [r3, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	08db      	lsrs	r3, r3, #3
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	d022      	beq.n	8000d6e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	6919      	ldr	r1, [r3, #16]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d38:	f7ff fb34 	bl	80003a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	6919      	ldr	r1, [r3, #16]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	f7ff fb79 	bl	8000440 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6818      	ldr	r0, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	6919      	ldr	r1, [r3, #16]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	7f1b      	ldrb	r3, [r3, #28]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d102      	bne.n	8000d64 <HAL_ADC_ConfigChannel+0x124>
 8000d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d62:	e000      	b.n	8000d66 <HAL_ADC_ConfigChannel+0x126>
 8000d64:	2300      	movs	r3, #0
 8000d66:	461a      	mov	r2, r3
 8000d68:	f7ff fb82 	bl	8000470 <LL_ADC_SetOffsetSaturation>
 8000d6c:	e11d      	b.n	8000faa <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fb37 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d10a      	bne.n	8000d9a <HAL_ADC_ConfigChannel+0x15a>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fb2c 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	0e9b      	lsrs	r3, r3, #26
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	e012      	b.n	8000dc0 <HAL_ADC_ConfigChannel+0x180>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fb21 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000db0:	fa93 f3a3 	rbit	r3, r3
 8000db4:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000db8:	fab3 f383 	clz	r3, r3
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d105      	bne.n	8000dd8 <HAL_ADC_ConfigChannel+0x198>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	0e9b      	lsrs	r3, r3, #26
 8000dd2:	f003 031f 	and.w	r3, r3, #31
 8000dd6:	e00a      	b.n	8000dee <HAL_ADC_ConfigChannel+0x1ae>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000de0:	fa93 f3a3 	rbit	r3, r3
 8000de4:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000de8:	fab3 f383 	clz	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d106      	bne.n	8000e00 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fb08 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2101      	movs	r1, #1
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff faee 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10a      	bne.n	8000e2c <HAL_ADC_ConfigChannel+0x1ec>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fae3 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	0e9b      	lsrs	r3, r3, #26
 8000e26:	f003 021f 	and.w	r2, r3, #31
 8000e2a:	e010      	b.n	8000e4e <HAL_ADC_ConfigChannel+0x20e>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fad8 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e3e:	fa93 f3a3 	rbit	r3, r3
 8000e42:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e46:	fab3 f383 	clz	r3, r3
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d105      	bne.n	8000e66 <HAL_ADC_ConfigChannel+0x226>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	0e9b      	lsrs	r3, r3, #26
 8000e60:	f003 031f 	and.w	r3, r3, #31
 8000e64:	e00a      	b.n	8000e7c <HAL_ADC_ConfigChannel+0x23c>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e76:	fab3 f383 	clz	r3, r3
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d106      	bne.n	8000e8e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2200      	movs	r2, #0
 8000e86:	2101      	movs	r1, #1
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fac1 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2102      	movs	r1, #2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff faa7 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10a      	bne.n	8000eba <HAL_ADC_ConfigChannel+0x27a>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fa9c 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	0e9b      	lsrs	r3, r3, #26
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	e010      	b.n	8000edc <HAL_ADC_ConfigChannel+0x29c>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fa91 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ed4:	fab3 f383 	clz	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	461a      	mov	r2, r3
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d105      	bne.n	8000ef4 <HAL_ADC_ConfigChannel+0x2b4>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	0e9b      	lsrs	r3, r3, #26
 8000eee:	f003 031f 	and.w	r3, r3, #31
 8000ef2:	e00a      	b.n	8000f0a <HAL_ADC_ConfigChannel+0x2ca>
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000efc:	fa93 f3a3 	rbit	r3, r3
 8000f00:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f04:	fab3 f383 	clz	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d106      	bne.n	8000f1c <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2200      	movs	r2, #0
 8000f14:	2102      	movs	r1, #2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fa7a 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2103      	movs	r1, #3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fa60 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10a      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x308>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2103      	movs	r1, #3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fa55 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	0e9b      	lsrs	r3, r3, #26
 8000f42:	f003 021f 	and.w	r2, r3, #31
 8000f46:	e010      	b.n	8000f6a <HAL_ADC_ConfigChannel+0x32a>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2103      	movs	r1, #3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fa4a 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f62:	fab3 f383 	clz	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	461a      	mov	r2, r3
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d105      	bne.n	8000f82 <HAL_ADC_ConfigChannel+0x342>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	0e9b      	lsrs	r3, r3, #26
 8000f7c:	f003 031f 	and.w	r3, r3, #31
 8000f80:	e00a      	b.n	8000f98 <HAL_ADC_ConfigChannel+0x358>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f92:	fab3 f383 	clz	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d106      	bne.n	8000faa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2103      	movs	r1, #3
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fa33 	bl	8000410 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fb96 	bl	80006e0 <LL_ADC_IsEnabled>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f040 810c 	bne.w	80011d4 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	6819      	ldr	r1, [r3, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f7ff fae1 	bl	8000590 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	4aab      	ldr	r2, [pc, #684]	; (8001280 <HAL_ADC_ConfigChannel+0x640>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	f040 80fd 	bne.w	80011d4 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10b      	bne.n	8001002 <HAL_ADC_ConfigChannel+0x3c2>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	0e9b      	lsrs	r3, r3, #26
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	f003 031f 	and.w	r3, r3, #31
 8000ff6:	2b09      	cmp	r3, #9
 8000ff8:	bf94      	ite	ls
 8000ffa:	2301      	movls	r3, #1
 8000ffc:	2300      	movhi	r3, #0
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	e012      	b.n	8001028 <HAL_ADC_ConfigChannel+0x3e8>
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800100a:	fa93 f3a3 	rbit	r3, r3
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001012:	fab3 f383 	clz	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	3301      	adds	r3, #1
 800101a:	f003 031f 	and.w	r3, r3, #31
 800101e:	2b09      	cmp	r3, #9
 8001020:	bf94      	ite	ls
 8001022:	2301      	movls	r3, #1
 8001024:	2300      	movhi	r3, #0
 8001026:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001028:	2b00      	cmp	r3, #0
 800102a:	d064      	beq.n	80010f6 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001034:	2b00      	cmp	r3, #0
 8001036:	d107      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x408>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	0e9b      	lsrs	r3, r3, #26
 800103e:	3301      	adds	r3, #1
 8001040:	069b      	lsls	r3, r3, #26
 8001042:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001046:	e00e      	b.n	8001066 <HAL_ADC_ConfigChannel+0x426>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001058:	fab3 f383 	clz	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	3301      	adds	r3, #1
 8001060:	069b      	lsls	r3, r3, #26
 8001062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <HAL_ADC_ConfigChannel+0x446>
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	0e9b      	lsrs	r3, r3, #26
 8001078:	3301      	adds	r3, #1
 800107a:	f003 031f 	and.w	r3, r3, #31
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	e010      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x468>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	3301      	adds	r3, #1
 800109e:	f003 031f 	and.w	r3, r3, #31
 80010a2:	2101      	movs	r1, #1
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	ea42 0103 	orr.w	r1, r2, r3
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10a      	bne.n	80010ce <HAL_ADC_ConfigChannel+0x48e>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0e9b      	lsrs	r3, r3, #26
 80010be:	3301      	adds	r3, #1
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	051b      	lsls	r3, r3, #20
 80010cc:	e011      	b.n	80010f2 <HAL_ADC_ConfigChannel+0x4b2>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	fab3 f383 	clz	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	3301      	adds	r3, #1
 80010e6:	f003 021f 	and.w	r2, r3, #31
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010f2:	430b      	orrs	r3, r1
 80010f4:	e069      	b.n	80011ca <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d107      	bne.n	8001112 <HAL_ADC_ConfigChannel+0x4d2>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	0e9b      	lsrs	r3, r3, #26
 8001108:	3301      	adds	r3, #1
 800110a:	069b      	lsls	r3, r3, #26
 800110c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001110:	e00e      	b.n	8001130 <HAL_ADC_ConfigChannel+0x4f0>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	fa93 f3a3 	rbit	r3, r3
 800111e:	61fb      	str	r3, [r7, #28]
  return result;
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	fab3 f383 	clz	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	3301      	adds	r3, #1
 800112a:	069b      	lsls	r3, r3, #26
 800112c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001138:	2b00      	cmp	r3, #0
 800113a:	d109      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x510>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	0e9b      	lsrs	r3, r3, #26
 8001142:	3301      	adds	r3, #1
 8001144:	f003 031f 	and.w	r3, r3, #31
 8001148:	2101      	movs	r1, #1
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	e010      	b.n	8001172 <HAL_ADC_ConfigChannel+0x532>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	fa93 f3a3 	rbit	r3, r3
 800115c:	617b      	str	r3, [r7, #20]
  return result;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	fab3 f383 	clz	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	3301      	adds	r3, #1
 8001168:	f003 031f 	and.w	r3, r3, #31
 800116c:	2101      	movs	r1, #1
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	ea42 0103 	orr.w	r1, r2, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10d      	bne.n	800119e <HAL_ADC_ConfigChannel+0x55e>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	0e9b      	lsrs	r3, r3, #26
 8001188:	3301      	adds	r3, #1
 800118a:	f003 021f 	and.w	r2, r3, #31
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	3b1e      	subs	r3, #30
 8001196:	051b      	lsls	r3, r3, #20
 8001198:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800119c:	e014      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x588>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	60fb      	str	r3, [r7, #12]
  return result;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	fab3 f383 	clz	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	3301      	adds	r3, #1
 80011b6:	f003 021f 	and.w	r2, r3, #31
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	3b1e      	subs	r3, #30
 80011c2:	051b      	lsls	r3, r3, #20
 80011c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011c8:	430b      	orrs	r3, r1
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	6892      	ldr	r2, [r2, #8]
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff f9b5 	bl	800053e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <HAL_ADC_ConfigChannel+0x644>)
 80011da:	4013      	ands	r3, r2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 8083 	beq.w	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80011e2:	4829      	ldr	r0, [pc, #164]	; (8001288 <HAL_ADC_ConfigChannel+0x648>)
 80011e4:	f7ff f8d0 	bl	8000388 <LL_ADC_GetCommonPathInternalCh>
 80011e8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a26      	ldr	r2, [pc, #152]	; (800128c <HAL_ADC_ConfigChannel+0x64c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d004      	beq.n	8001200 <HAL_ADC_ConfigChannel+0x5c0>
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a25      	ldr	r2, [pc, #148]	; (8001290 <HAL_ADC_ConfigChannel+0x650>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d126      	bne.n	800124e <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001200:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d120      	bne.n	800124e <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001214:	d168      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800121a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800121e:	4619      	mov	r1, r3
 8001220:	4819      	ldr	r0, [pc, #100]	; (8001288 <HAL_ADC_ConfigChannel+0x648>)
 8001222:	f7ff f89e 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_ADC_ConfigChannel+0x654>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	099b      	lsrs	r3, r3, #6
 800122c:	4a1a      	ldr	r2, [pc, #104]	; (8001298 <HAL_ADC_ConfigChannel+0x658>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	099a      	lsrs	r2, r3, #6
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800123e:	e002      	b.n	8001246 <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	3b01      	subs	r3, #1
 8001244:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f9      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800124c:	e04c      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <HAL_ADC_ConfigChannel+0x65c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d125      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x664>
 8001258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800125c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d11f      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <HAL_ADC_ConfigChannel+0x660>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d03c      	beq.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800126e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001276:	4619      	mov	r1, r3
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <HAL_ADC_ConfigChannel+0x648>)
 800127a:	f7ff f872 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800127e:	e033      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
 8001280:	407f0000 	.word	0x407f0000
 8001284:	80080000 	.word	0x80080000
 8001288:	50000300 	.word	0x50000300
 800128c:	c3210000 	.word	0xc3210000
 8001290:	90c00010 	.word	0x90c00010
 8001294:	20000008 	.word	0x20000008
 8001298:	053e2d63 	.word	0x053e2d63
 800129c:	c7520000 	.word	0xc7520000
 80012a0:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a14      	ldr	r2, [pc, #80]	; (80012fc <HAL_ADC_ConfigChannel+0x6bc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d11c      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80012ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d116      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <HAL_ADC_ConfigChannel+0x6c0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d011      	beq.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012cc:	4619      	mov	r1, r3
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <HAL_ADC_ConfigChannel+0x6c4>)
 80012d0:	f7ff f847 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
 80012d4:	e008      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012da:	f043 0220 	orr.w	r2, r3, #32
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80012f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3798      	adds	r7, #152	; 0x98
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	cb840000 	.word	0xcb840000
 8001300:	50000100 	.word	0x50000100
 8001304:	50000300 	.word	0x50000300

08001308 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f9e3 	bl	80006e0 <LL_ADC_IsEnabled>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d146      	bne.n	80013ae <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <ADC_Enable+0xb0>)
 8001328:	4013      	ands	r3, r2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00d      	beq.n	800134a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001332:	f043 0210 	orr.w	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133e:	f043 0201 	orr.w	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e032      	b.n	80013b0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f99e 	bl	8000690 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001354:	f7fe ffc4 	bl	80002e0 <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800135a:	e021      	b.n	80013a0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f9bd 	bl	80006e0 <LL_ADC_IsEnabled>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d104      	bne.n	8001376 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f98d 	bl	8000690 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001376:	f7fe ffb3 	bl	80002e0 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d90d      	bls.n	80013a0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001388:	f043 0210 	orr.w	r2, r3, #16
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001394:	f043 0201 	orr.w	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e007      	b.n	80013b0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d1d6      	bne.n	800135c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	8000003f 	.word	0x8000003f

080013bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f99c 	bl	8000706 <LL_ADC_IsDisableOngoing>
 80013ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f983 	bl	80006e0 <LL_ADC_IsEnabled>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d040      	beq.n	8001462 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d13d      	bne.n	8001462 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 030d 	and.w	r3, r3, #13
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d10c      	bne.n	800140e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f95d 	bl	80006b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2203      	movs	r2, #3
 8001404:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001406:	f7fe ff6b 	bl	80002e0 <HAL_GetTick>
 800140a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800140c:	e022      	b.n	8001454 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001412:	f043 0210 	orr.w	r2, r3, #16
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141e:	f043 0201 	orr.w	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e01c      	b.n	8001464 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800142a:	f7fe ff59 	bl	80002e0 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d90d      	bls.n	8001454 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143c:	f043 0210 	orr.w	r2, r3, #16
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001448:	f043 0201 	orr.w	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e007      	b.n	8001464 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1e3      	bne.n	800142a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001478:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001482:	2b00      	cmp	r3, #0
 8001484:	d14b      	bne.n	800151e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d021      	beq.n	80014e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f80e 	bl	80004c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d032      	beq.n	8001516 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d12b      	bne.n	8001516 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d11f      	bne.n	8001516 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014da:	f043 0201 	orr.w	r2, r3, #1
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80014e2:	e018      	b.n	8001516 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d111      	bne.n	8001516 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d105      	bne.n	8001516 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	f043 0201 	orr.w	r2, r3, #1
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f003 f952 	bl	80047c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800151c:	e00e      	b.n	800153c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff fb7e 	bl	8000c2c <HAL_ADC_ErrorCallback>
}
 8001530:	e004      	b.n	800153c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	4798      	blx	r3
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f7ff fb60 	bl	8000c18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	f043 0204 	orr.w	r2, r3, #4
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f7ff fb50 	bl	8000c2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <LL_ADC_IsEnabled>:
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <LL_ADC_IsEnabled+0x18>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <LL_ADC_IsEnabled+0x1a>
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <LL_ADC_StartCalibration>:
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80015d6:	4313      	orrs	r3, r2
 80015d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_IsCalibrationOnGoing>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001600:	d101      	bne.n	8001606 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_ADC_REG_IsConversionOngoing>:
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b04      	cmp	r3, #4
 8001626:	d101      	bne.n	800162c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_ADCEx_Calibration_Start+0x1c>
 8001654:	2302      	movs	r3, #2
 8001656:	e04d      	b.n	80016f4 <HAL_ADCEx_Calibration_Start+0xb8>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff feab 	bl	80013bc <ADC_Disable>
 8001666:	4603      	mov	r3, r0
 8001668:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d136      	bne.n	80016de <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001674:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001678:	f023 0302 	bic.w	r3, r3, #2
 800167c:	f043 0202 	orr.w	r2, r3, #2
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6839      	ldr	r1, [r7, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff95 	bl	80015ba <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001690:	e014      	b.n	80016bc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3301      	adds	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4a18      	ldr	r2, [pc, #96]	; (80016fc <HAL_ADCEx_Calibration_Start+0xc0>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d90d      	bls.n	80016bc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	f023 0312 	bic.w	r3, r3, #18
 80016a8:	f043 0210 	orr.w	r2, r3, #16
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e01b      	b.n	80016f4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff93 	bl	80015ec <LL_ADC_IsCalibrationOnGoing>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1e2      	bne.n	8001692 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d0:	f023 0303 	bic.w	r3, r3, #3
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	65da      	str	r2, [r3, #92]	; 0x5c
 80016dc:	e005      	b.n	80016ea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e2:	f043 0210 	orr.w	r2, r3, #16
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	0004de01 	.word	0x0004de01

08001700 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b0a1      	sub	sp, #132	; 0x84
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800171a:	2302      	movs	r3, #2
 800171c:	e087      	b.n	800182e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800172e:	d102      	bne.n	8001736 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001730:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	e001      	b.n	800173a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10b      	bne.n	8001758 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	f043 0220 	orr.w	r2, r3, #32
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e06a      	b.n	800182e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff5a 	bl	8001614 <LL_ADC_REG_IsConversionOngoing>
 8001760:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff54 	bl	8001614 <LL_ADC_REG_IsConversionOngoing>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d14c      	bne.n	800180c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001774:	2b00      	cmp	r3, #0
 8001776:	d149      	bne.n	800180c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800177a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d028      	beq.n	80017d6 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001796:	035b      	lsls	r3, r3, #13
 8001798:	430b      	orrs	r3, r1
 800179a:	431a      	orrs	r2, r3
 800179c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800179e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017a4:	f7ff fef6 	bl	8001594 <LL_ADC_IsEnabled>
 80017a8:	4604      	mov	r4, r0
 80017aa:	4823      	ldr	r0, [pc, #140]	; (8001838 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80017ac:	f7ff fef2 	bl	8001594 <LL_ADC_IsEnabled>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4323      	orrs	r3, r4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d133      	bne.n	8001820 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80017b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80017c0:	f023 030f 	bic.w	r3, r3, #15
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	6811      	ldr	r1, [r2, #0]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	6892      	ldr	r2, [r2, #8]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	431a      	orrs	r2, r3
 80017d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017d2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80017d4:	e024      	b.n	8001820 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80017d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017e2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017e6:	f7ff fed5 	bl	8001594 <LL_ADC_IsEnabled>
 80017ea:	4604      	mov	r4, r0
 80017ec:	4812      	ldr	r0, [pc, #72]	; (8001838 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80017ee:	f7ff fed1 	bl	8001594 <LL_ADC_IsEnabled>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4323      	orrs	r3, r4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d112      	bne.n	8001820 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80017fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001802:	f023 030f 	bic.w	r3, r3, #15
 8001806:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001808:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800180a:	e009      	b.n	8001820 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001810:	f043 0220 	orr.w	r2, r3, #32
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800181e:	e000      	b.n	8001822 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001820:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800182a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800182e:	4618      	mov	r0, r3
 8001830:	3784      	adds	r7, #132	; 0x84
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}
 8001836:	bf00      	nop
 8001838:	50000100 	.word	0x50000100
 800183c:	50000300 	.word	0x50000300

08001840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <__NVIC_GetPriorityGrouping+0x18>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0307 	and.w	r3, r3, #7
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db0b      	blt.n	80018ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	4907      	ldr	r1, [pc, #28]	; (80018dc <__NVIC_EnableIRQ+0x38>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	2001      	movs	r0, #1
 80018c6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000e100 	.word	0xe000e100

080018e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	db0a      	blt.n	800190a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	490c      	ldr	r1, [pc, #48]	; (800192c <__NVIC_SetPriority+0x4c>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	440b      	add	r3, r1
 8001904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001908:	e00a      	b.n	8001920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4908      	ldr	r1, [pc, #32]	; (8001930 <__NVIC_SetPriority+0x50>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	3b04      	subs	r3, #4
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	440b      	add	r3, r1
 800191e:	761a      	strb	r2, [r3, #24]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000e100 	.word	0xe000e100
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f1c3 0307 	rsb	r3, r3, #7
 800194e:	2b04      	cmp	r3, #4
 8001950:	bf28      	it	cs
 8001952:	2304      	movcs	r3, #4
 8001954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3304      	adds	r3, #4
 800195a:	2b06      	cmp	r3, #6
 800195c:	d902      	bls.n	8001964 <NVIC_EncodePriority+0x30>
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3b03      	subs	r3, #3
 8001962:	e000      	b.n	8001966 <NVIC_EncodePriority+0x32>
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	f04f 32ff 	mov.w	r2, #4294967295
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800197c:	f04f 31ff 	mov.w	r1, #4294967295
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43d9      	mvns	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	4313      	orrs	r3, r2
         );
}
 800198e:	4618      	mov	r0, r3
 8001990:	3724      	adds	r7, #36	; 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ac:	d301      	bcc.n	80019b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00f      	b.n	80019d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <SysTick_Config+0x40>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ba:	210f      	movs	r1, #15
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f7ff ff8e 	bl	80018e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <SysTick_Config+0x40>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <SysTick_Config+0x40>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff29 	bl	8001840 <__NVIC_SetPriorityGrouping>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a04:	f7ff ff40 	bl	8001888 <__NVIC_GetPriorityGrouping>
 8001a08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	6978      	ldr	r0, [r7, #20]
 8001a10:	f7ff ff90 	bl	8001934 <NVIC_EncodePriority>
 8001a14:	4602      	mov	r2, r0
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff5f 	bl	80018e0 <__NVIC_SetPriority>
}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff33 	bl	80018a4 <__NVIC_EnableIRQ>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ffa4 	bl	800199c <SysTick_Config>
 8001a54:	4603      	mov	r3, r0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e08d      	b.n	8001b8e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_DMA_Init+0x138>)
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d80f      	bhi.n	8001a9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b45      	ldr	r3, [pc, #276]	; (8001b9c <HAL_DMA_Init+0x13c>)
 8001a86:	4413      	add	r3, r2
 8001a88:	4a45      	ldr	r2, [pc, #276]	; (8001ba0 <HAL_DMA_Init+0x140>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	009a      	lsls	r2, r3, #2
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a42      	ldr	r2, [pc, #264]	; (8001ba4 <HAL_DMA_Init+0x144>)
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a9c:	e00e      	b.n	8001abc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <HAL_DMA_Init+0x148>)
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a3d      	ldr	r2, [pc, #244]	; (8001ba0 <HAL_DMA_Init+0x140>)
 8001aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	009a      	lsls	r2, r3, #2
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a3c      	ldr	r2, [pc, #240]	; (8001bac <HAL_DMA_Init+0x14c>)
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f9b6 	bl	8001e80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b1c:	d102      	bne.n	8001b24 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b38:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d010      	beq.n	8001b64 <HAL_DMA_Init+0x104>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d80c      	bhi.n	8001b64 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f9d6 	bl	8001efc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	e008      	b.n	8001b76 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40020407 	.word	0x40020407
 8001b9c:	bffdfff8 	.word	0xbffdfff8
 8001ba0:	cccccccd 	.word	0xcccccccd
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	bffdfbf8 	.word	0xbffdfbf8
 8001bac:	40020400 	.word	0x40020400

08001bb0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_DMA_Start_IT+0x20>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e066      	b.n	8001c9e <HAL_DMA_Start_IT+0xee>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d155      	bne.n	8001c90 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	68b9      	ldr	r1, [r7, #8]
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f8fb 	bl	8001e04 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d008      	beq.n	8001c28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 020e 	orr.w	r2, r2, #14
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e00f      	b.n	8001c48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0204 	bic.w	r2, r2, #4
 8001c36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 020a 	orr.w	r2, r2, #10
 8001c46:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c64:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c7c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e005      	b.n	8001c9c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d026      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x7a>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d021      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d107      	bne.n	8001cfa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0204 	bic.w	r2, r2, #4
 8001cf8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f003 021f 	and.w	r2, r3, #31
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	2104      	movs	r1, #4
 8001d08:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d071      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d1e:	e06c      	b.n	8001dfa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	2202      	movs	r2, #2
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d02e      	beq.n	8001d92 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d029      	beq.n	8001d92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0320 	and.w	r3, r3, #32
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10b      	bne.n	8001d64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 020a 	bic.w	r2, r2, #10
 8001d5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	2102      	movs	r1, #2
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d038      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d90:	e033      	b.n	8001dfa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d02a      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d025      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 020e 	bic.w	r2, r2, #14
 8001dbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	2101      	movs	r1, #1
 8001dce:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d004      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
}
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e1a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e2c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f003 021f 	and.w	r2, r3, #31
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d108      	bne.n	8001e64 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e62:	e007      	b.n	8001e74 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	60da      	str	r2, [r3, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d802      	bhi.n	8001e9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e001      	b.n	8001e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e9c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	3b08      	subs	r3, #8
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001eac:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	009a      	lsls	r2, r3, #2
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001eca:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40020407 	.word	0x40020407
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020820 	.word	0x40020820
 8001ef4:	cccccccd 	.word	0xcccccccd
 8001ef8:	40020880 	.word	0x40020880

08001efc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	461a      	mov	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f1e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	2201      	movs	r2, #1
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	1000823f 	.word	0x1000823f
 8001f40:	40020940 	.word	0x40020940

08001f44 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e147      	b.n	80021e6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f003 fb32 	bl	80055d4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0210 	bic.w	r2, r2, #16
 8001f7e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f80:	f7fe f9ae 	bl	80002e0 <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001f86:	e012      	b.n	8001fae <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001f88:	f7fe f9aa 	bl	80002e0 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b0a      	cmp	r3, #10
 8001f94:	d90b      	bls.n	8001fae <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e11b      	b.n	80021e6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d0e5      	beq.n	8001f88 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fcc:	f7fe f988 	bl	80002e0 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001fd2:	e012      	b.n	8001ffa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001fd4:	f7fe f984 	bl	80002e0 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b0a      	cmp	r3, #10
 8001fe0:	d90b      	bls.n	8001ffa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e0f5      	b.n	80021e6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0e5      	beq.n	8001fd4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699a      	ldr	r2, [r3, #24]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0202 	orr.w	r2, r2, #2
 8002016:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a74      	ldr	r2, [pc, #464]	; (80021f0 <HAL_FDCAN_Init+0x2ac>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d103      	bne.n	800202a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002022:	4a74      	ldr	r2, [pc, #464]	; (80021f4 <HAL_FDCAN_Init+0x2b0>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7c1b      	ldrb	r3, [r3, #16]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d108      	bne.n	8002044 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002040:	619a      	str	r2, [r3, #24]
 8002042:	e007      	b.n	8002054 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002052:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7c5b      	ldrb	r3, [r3, #17]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d108      	bne.n	800206e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800206a:	619a      	str	r2, [r3, #24]
 800206c:	e007      	b.n	800207e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800207c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7c9b      	ldrb	r3, [r3, #18]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d108      	bne.n	8002098 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002094:	619a      	str	r2, [r3, #24]
 8002096:	e007      	b.n	80020a8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020a6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699a      	ldr	r2, [r3, #24]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80020cc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0210 	bic.w	r2, r2, #16
 80020dc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d108      	bne.n	80020f8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699a      	ldr	r2, [r3, #24]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0204 	orr.w	r2, r2, #4
 80020f4:	619a      	str	r2, [r3, #24]
 80020f6:	e02c      	b.n	8002152 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d028      	beq.n	8002152 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d01c      	beq.n	8002142 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002116:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691a      	ldr	r2, [r3, #16]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0210 	orr.w	r2, r2, #16
 8002126:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d110      	bne.n	8002152 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699a      	ldr	r2, [r3, #24]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0220 	orr.w	r2, r2, #32
 800213e:	619a      	str	r2, [r3, #24]
 8002140:	e007      	b.n	8002152 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699a      	ldr	r2, [r3, #24]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0220 	orr.w	r2, r2, #32
 8002150:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	3b01      	subs	r3, #1
 8002158:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	3b01      	subs	r3, #1
 8002160:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002162:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800216a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	3b01      	subs	r3, #1
 8002174:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800217a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800217c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002186:	d115      	bne.n	80021b4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	3b01      	subs	r3, #1
 8002194:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002196:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	3b01      	subs	r3, #1
 800219e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80021a0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	3b01      	subs	r3, #1
 80021aa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80021b0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80021b2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fcb8 	bl	8002b40 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40006400 	.word	0x40006400
 80021f4:	40006500 	.word	0x40006500

080021f8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002208:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800220a:	7dfb      	ldrb	r3, [r7, #23]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d002      	beq.n	8002216 <HAL_FDCAN_ConfigFilter+0x1e>
 8002210:	7dfb      	ldrb	r3, [r7, #23]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d13d      	bne.n	8002292 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d119      	bne.n	8002252 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800222a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002232:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e01d      	b.n	800228e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	075a      	lsls	r2, r3, #29
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	079a      	lsls	r2, r3, #30
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	4313      	orrs	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3304      	adds	r3, #4
 8002286:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	e006      	b.n	80022a0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002296:	f043 0202 	orr.w	r2, r3, #2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
  }
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d116      	bne.n	80022f4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ce:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	011a      	lsls	r2, r3, #4
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	431a      	orrs	r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	431a      	orrs	r2, r3
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                         (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                                         (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                                         (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e006      	b.n	8002302 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f8:	f043 0204 	orr.w	r2, r3, #4
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
  }
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d11f      	bne.n	8002366 <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d10d      	bne.n	8002348 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002334:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	025a      	lsls	r2, r3, #9
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002346:	e00c      	b.n	8002362 <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002350:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	021a      	lsls	r2, r3, #8
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Return function status */
    return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e006      	b.n	8002374 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236a:	f043 0204 	orr.w	r2, r3, #4
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
  }
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d110      	bne.n	80023b6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e006      	b.n	80023c4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ba:	f043 0204 	orr.w	r2, r3, #4
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
  }
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d12c      	bne.n	8002442 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e023      	b.n	8002450 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002410:	0c1b      	lsrs	r3, r3, #16
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fbe4 	bl	8002bec <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2101      	movs	r1, #1
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	fa01 f202 	lsl.w	r2, r1, r2
 8002430:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002434:	2201      	movs	r2, #1
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	409a      	lsls	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	e006      	b.n	8002450 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002446:	f043 0208 	orr.w	r2, r3, #8
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
  }
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002458:	b480      	push	{r7}
 800245a:	b08b      	sub	sp, #44	; 0x2c
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800246c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800246e:	7efb      	ldrb	r3, [r7, #27]
 8002470:	2b02      	cmp	r3, #2
 8002472:	f040 80bc 	bne.w	80025ee <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	d121      	bne.n	80024c0 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	2b00      	cmp	r3, #0
 800248a:	d107      	bne.n	800249c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002490:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0af      	b.n	80025fc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	4613      	mov	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
 80024be:	e020      	b.n	8002502 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024c8:	f003 030f 	and.w	r3, r3, #15
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d107      	bne.n	80024e0 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e08d      	b.n	80025fc <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	4613      	mov	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	440b      	add	r3, r1
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d107      	bne.n	8002526 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0c9b      	lsrs	r3, r3, #18
 800251c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e005      	b.n	8002532 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	3304      	adds	r3, #4
 800254e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b29a      	uxth	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	0e1b      	lsrs	r3, r3, #24
 8002584:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0fda      	lsrs	r2, r3, #31
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	3304      	adds	r3, #4
 800259a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	e00a      	b.n	80025bc <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	441a      	add	r2, r3
 80025ac:	6839      	ldr	r1, [r7, #0]
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	440b      	add	r3, r1
 80025b2:	7812      	ldrb	r2, [r2, #0]
 80025b4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	3301      	adds	r3, #1
 80025ba:	623b      	str	r3, [r7, #32]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	4a11      	ldr	r2, [pc, #68]	; (8002608 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80025c4:	5cd3      	ldrb	r3, [r2, r3]
 80025c6:	461a      	mov	r2, r3
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d3eb      	bcc.n	80025a6 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d105      	bne.n	80025e0 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80025de:	e004      	b.n	80025ea <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	e006      	b.n	80025fc <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	f043 0208 	orr.w	r2, r3, #8
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
  }
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	372c      	adds	r7, #44	; 0x2c
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	08005edc 	.word	0x08005edc

0800260c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002642:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d003      	beq.n	8002652 <HAL_FDCAN_ActivateNotification+0x22>
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	2b02      	cmp	r3, #2
 800264e:	f040 80c8 	bne.w	80027e2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <HAL_FDCAN_ActivateNotification+0x3e>
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d03b      	beq.n	80026e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8002674:	2b00      	cmp	r3, #0
 8002676:	d004      	beq.n	8002682 <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d031      	beq.n	80026e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8002688:	2b00      	cmp	r3, #0
 800268a:	d004      	beq.n	8002696 <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	d027      	beq.n	80026e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01d      	beq.n	80026e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d004      	beq.n	80026be <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d013      	beq.n	80026e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d107      	bne.n	80026f6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0201 	orr.w	r2, r2, #1
 80026f4:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <HAL_FDCAN_ActivateNotification+0xda>
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d13b      	bne.n	8002782 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d131      	bne.n	8002782 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002724:	2b00      	cmp	r3, #0
 8002726:	d004      	beq.n	8002732 <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d127      	bne.n	8002782 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002738:	2b00      	cmp	r3, #0
 800273a:	d004      	beq.n	8002746 <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d11d      	bne.n	8002782 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	d113      	bne.n	8002782 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00c      	beq.n	8002792 <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0202 	orr.w	r2, r2, #2
 8002790:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	2b00      	cmp	r3, #0
 800279a:	d009      	beq.n	80027b0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	430a      	orrs	r2, r1
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e006      	b.n	80027f0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e6:	f043 0202 	orr.w	r2, r3, #2
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
  }
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002818:	4013      	ands	r3, r2
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	6a3a      	ldr	r2, [r7, #32]
 8002830:	4013      	ands	r3, r2
 8002832:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800283e:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	4013      	ands	r3, r2
 800284a:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002852:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8002856:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800286a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800286e:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4013      	ands	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00d      	beq.n	80028a6 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002894:	2b00      	cmp	r3, #0
 8002896:	d006      	beq.n	80028a6 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2240      	movs	r2, #64	; 0x40
 800289e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f92e 	bl	8002b02 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01b      	beq.n	80028ec <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d014      	beq.n	80028ec <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028ca:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028e2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80028e4:	6939      	ldr	r1, [r7, #16]
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f8ec 	bl	8002ac4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80028fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f8b6 	bl	8002a6e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6a3a      	ldr	r2, [r7, #32]
 800290e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002910:	6a39      	ldr	r1, [r7, #32]
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f001 fed8 	bl	80046c8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d007      	beq.n	800292e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002926:	69f9      	ldr	r1, [r7, #28]
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f8ab 	bl	8002a84 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00e      	beq.n	800295a <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002952:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f8a0 	bl	8002a9a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01a      	beq.n	800299e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d013      	beq.n	800299e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800297e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4013      	ands	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2280      	movs	r2, #128	; 0x80
 8002994:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002996:	68f9      	ldr	r1, [r7, #12]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f888 	bl	8002aae <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00e      	beq.n	80029ca <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029c2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f888 	bl	8002ada <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00e      	beq.n	80029f6 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029ee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f87c 	bl	8002aee <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d011      	beq.n	8002a28 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002a36:	6979      	ldr	r1, [r7, #20]
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f876 	bl	8002b2a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d009      	beq.n	8002a58 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f858 	bl	8002b16 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002a66:	bf00      	nop
 8002a68:	3728      	adds	r7, #40	; 0x28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002b48:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002b4a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b5a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	041a      	lsls	r2, r3, #16
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b80:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	061a      	lsls	r2, r3, #24
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e005      	b.n	8002bce <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d3f3      	bcc.n	8002bc2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	4000a400 	.word	0x4000a400

08002bec <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	; 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10a      	bne.n	8002c18 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002c0a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	e00a      	b.n	8002c2e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002c20:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002c26:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002c28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c2c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002c38:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002c3e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002c44:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	3304      	adds	r3, #4
 8002c76:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	e020      	b.n	8002cc0 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	3303      	adds	r3, #3
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	440b      	add	r3, r1
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002c96:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	440b      	add	r3, r1
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002ca4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	440a      	add	r2, r1
 8002cac:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002cae:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	4a06      	ldr	r2, [pc, #24]	; (8002ce0 <FDCAN_CopyMessageToRAM+0xf4>)
 8002cc8:	5cd3      	ldrb	r3, [r2, r3]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d3d5      	bcc.n	8002c7e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	3724      	adds	r7, #36	; 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	08005edc 	.word	0x08005edc

08002ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cf2:	e15a      	b.n	8002faa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	4013      	ands	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 814c 	beq.w	8002fa4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x38>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b12      	cmp	r3, #18
 8002d1a:	d123      	bne.n	8002d64 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	08da      	lsrs	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3208      	adds	r2, #8
 8002d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	220f      	movs	r2, #15
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3208      	adds	r2, #8
 8002d5e:	6939      	ldr	r1, [r7, #16]
 8002d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0203 	and.w	r2, r3, #3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d00b      	beq.n	8002db8 <HAL_GPIO_Init+0xd4>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d007      	beq.n	8002db8 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dac:	2b11      	cmp	r3, #17
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b12      	cmp	r3, #18
 8002db6:	d130      	bne.n	8002e1a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dee:	2201      	movs	r2, #1
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 0201 	and.w	r2, r3, #1
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	2203      	movs	r2, #3
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80a6 	beq.w	8002fa4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e58:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <HAL_GPIO_Init+0x2e4>)
 8002e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5c:	4a5a      	ldr	r2, [pc, #360]	; (8002fc8 <HAL_GPIO_Init+0x2e4>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6613      	str	r3, [r2, #96]	; 0x60
 8002e64:	4b58      	ldr	r3, [pc, #352]	; (8002fc8 <HAL_GPIO_Init+0x2e4>)
 8002e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e70:	4a56      	ldr	r2, [pc, #344]	; (8002fcc <HAL_GPIO_Init+0x2e8>)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	089b      	lsrs	r3, r3, #2
 8002e76:	3302      	adds	r3, #2
 8002e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e9a:	d01f      	beq.n	8002edc <HAL_GPIO_Init+0x1f8>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a4c      	ldr	r2, [pc, #304]	; (8002fd0 <HAL_GPIO_Init+0x2ec>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d019      	beq.n	8002ed8 <HAL_GPIO_Init+0x1f4>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a4b      	ldr	r2, [pc, #300]	; (8002fd4 <HAL_GPIO_Init+0x2f0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d013      	beq.n	8002ed4 <HAL_GPIO_Init+0x1f0>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a4a      	ldr	r2, [pc, #296]	; (8002fd8 <HAL_GPIO_Init+0x2f4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_GPIO_Init+0x1ec>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a49      	ldr	r2, [pc, #292]	; (8002fdc <HAL_GPIO_Init+0x2f8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d007      	beq.n	8002ecc <HAL_GPIO_Init+0x1e8>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a48      	ldr	r2, [pc, #288]	; (8002fe0 <HAL_GPIO_Init+0x2fc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d101      	bne.n	8002ec8 <HAL_GPIO_Init+0x1e4>
 8002ec4:	2305      	movs	r3, #5
 8002ec6:	e00a      	b.n	8002ede <HAL_GPIO_Init+0x1fa>
 8002ec8:	2306      	movs	r3, #6
 8002eca:	e008      	b.n	8002ede <HAL_GPIO_Init+0x1fa>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	e006      	b.n	8002ede <HAL_GPIO_Init+0x1fa>
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e004      	b.n	8002ede <HAL_GPIO_Init+0x1fa>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e002      	b.n	8002ede <HAL_GPIO_Init+0x1fa>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <HAL_GPIO_Init+0x1fa>
 8002edc:	2300      	movs	r3, #0
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	f002 0203 	and.w	r2, r2, #3
 8002ee4:	0092      	lsls	r2, r2, #2
 8002ee6:	4093      	lsls	r3, r2
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eee:	4937      	ldr	r1, [pc, #220]	; (8002fcc <HAL_GPIO_Init+0x2e8>)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	089b      	lsrs	r3, r3, #2
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002efc:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <HAL_GPIO_Init+0x300>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f20:	4a30      	ldr	r2, [pc, #192]	; (8002fe4 <HAL_GPIO_Init+0x300>)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002f26:	4b2f      	ldr	r3, [pc, #188]	; (8002fe4 <HAL_GPIO_Init+0x300>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f4a:	4a26      	ldr	r2, [pc, #152]	; (8002fe4 <HAL_GPIO_Init+0x300>)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f50:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <HAL_GPIO_Init+0x300>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f74:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <HAL_GPIO_Init+0x300>)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <HAL_GPIO_Init+0x300>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f9e:	4a11      	ldr	r2, [pc, #68]	; (8002fe4 <HAL_GPIO_Init+0x300>)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f47f ae9d 	bne.w	8002cf4 <HAL_GPIO_Init+0x10>
  }
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40010000 	.word	0x40010000
 8002fd0:	48000400 	.word	0x48000400
 8002fd4:	48000800 	.word	0x48000800
 8002fd8:	48000c00 	.word	0x48000c00
 8002fdc:	48001000 	.word	0x48001000
 8002fe0:	48001400 	.word	0x48001400
 8002fe4:	40010400 	.word	0x40010400

08002fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	807b      	strh	r3, [r7, #2]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ff8:	787b      	ldrb	r3, [r7, #1]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ffe:	887a      	ldrh	r2, [r7, #2]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003004:	e002      	b.n	800300c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003006:	887a      	ldrh	r2, [r7, #2]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	887b      	ldrh	r3, [r7, #2]
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003030:	887a      	ldrh	r2, [r7, #2]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003036:	e002      	b.n	800303e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003038:	887a      	ldrh	r2, [r7, #2]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	619a      	str	r2, [r3, #24]
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d141      	bne.n	80030de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800305a:	4b4b      	ldr	r3, [pc, #300]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003066:	d131      	bne.n	80030cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003068:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800306e:	4a46      	ldr	r2, [pc, #280]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003074:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003078:	4b43      	ldr	r3, [pc, #268]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003080:	4a41      	ldr	r2, [pc, #260]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003086:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003088:	4b40      	ldr	r3, [pc, #256]	; (800318c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2232      	movs	r2, #50	; 0x32
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	4a3f      	ldr	r2, [pc, #252]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	0c9b      	lsrs	r3, r3, #18
 800309a:	3301      	adds	r3, #1
 800309c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800309e:	e002      	b.n	80030a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030a6:	4b38      	ldr	r3, [pc, #224]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b2:	d102      	bne.n	80030ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f2      	bne.n	80030a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030ba:	4b33      	ldr	r3, [pc, #204]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c6:	d158      	bne.n	800317a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e057      	b.n	800317c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030cc:	4b2e      	ldr	r3, [pc, #184]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030d2:	4a2d      	ldr	r2, [pc, #180]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030dc:	e04d      	b.n	800317a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e4:	d141      	bne.n	800316a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030e6:	4b28      	ldr	r3, [pc, #160]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f2:	d131      	bne.n	8003158 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030f4:	4b24      	ldr	r3, [pc, #144]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030fa:	4a23      	ldr	r2, [pc, #140]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003100:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003104:	4b20      	ldr	r3, [pc, #128]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800310c:	4a1e      	ldr	r2, [pc, #120]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003112:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003114:	4b1d      	ldr	r3, [pc, #116]	; (800318c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2232      	movs	r2, #50	; 0x32
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	0c9b      	lsrs	r3, r3, #18
 8003126:	3301      	adds	r3, #1
 8003128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800312a:	e002      	b.n	8003132 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3b01      	subs	r3, #1
 8003130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313e:	d102      	bne.n	8003146 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f2      	bne.n	800312c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003152:	d112      	bne.n	800317a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e011      	b.n	800317c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003164:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003168:	e007      	b.n	800317a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800316a:	4b07      	ldr	r3, [pc, #28]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003172:	4a05      	ldr	r2, [pc, #20]	; (8003188 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003174:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003178:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	40007000 	.word	0x40007000
 800318c:	20000008 	.word	0x20000008
 8003190:	431bde83 	.word	0x431bde83

08003194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e308      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d075      	beq.n	800329e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b2:	4ba3      	ldr	r3, [pc, #652]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031bc:	4ba0      	ldr	r3, [pc, #640]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2b0c      	cmp	r3, #12
 80031ca:	d102      	bne.n	80031d2 <HAL_RCC_OscConfig+0x3e>
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d002      	beq.n	80031d8 <HAL_RCC_OscConfig+0x44>
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d10b      	bne.n	80031f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	4b99      	ldr	r3, [pc, #612]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d05b      	beq.n	800329c <HAL_RCC_OscConfig+0x108>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d157      	bne.n	800329c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e2e3      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f8:	d106      	bne.n	8003208 <HAL_RCC_OscConfig+0x74>
 80031fa:	4b91      	ldr	r3, [pc, #580]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a90      	ldr	r2, [pc, #576]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e01d      	b.n	8003244 <HAL_RCC_OscConfig+0xb0>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003210:	d10c      	bne.n	800322c <HAL_RCC_OscConfig+0x98>
 8003212:	4b8b      	ldr	r3, [pc, #556]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a8a      	ldr	r2, [pc, #552]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	4b88      	ldr	r3, [pc, #544]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a87      	ldr	r2, [pc, #540]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e00b      	b.n	8003244 <HAL_RCC_OscConfig+0xb0>
 800322c:	4b84      	ldr	r3, [pc, #528]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a83      	ldr	r2, [pc, #524]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	4b81      	ldr	r3, [pc, #516]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a80      	ldr	r2, [pc, #512]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 800323e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d013      	beq.n	8003274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7fd f848 	bl	80002e0 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003254:	f7fd f844 	bl	80002e0 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	; 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e2a8      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003266:	4b76      	ldr	r3, [pc, #472]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0xc0>
 8003272:	e014      	b.n	800329e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fd f834 	bl	80002e0 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7fd f830 	bl	80002e0 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e294      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800328e:	4b6c      	ldr	r3, [pc, #432]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0xe8>
 800329a:	e000      	b.n	800329e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d075      	beq.n	8003396 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032aa:	4b65      	ldr	r3, [pc, #404]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b4:	4b62      	ldr	r3, [pc, #392]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b0c      	cmp	r3, #12
 80032c2:	d102      	bne.n	80032ca <HAL_RCC_OscConfig+0x136>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d002      	beq.n	80032d0 <HAL_RCC_OscConfig+0x13c>
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d11f      	bne.n	8003310 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032d0:	4b5b      	ldr	r3, [pc, #364]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_OscConfig+0x154>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e267      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e8:	4b55      	ldr	r3, [pc, #340]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	061b      	lsls	r3, r3, #24
 80032f6:	4952      	ldr	r1, [pc, #328]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032fc:	4b51      	ldr	r3, [pc, #324]	; (8003444 <HAL_RCC_OscConfig+0x2b0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fc ffa1 	bl	8000248 <HAL_InitTick>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d043      	beq.n	8003394 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e253      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d023      	beq.n	8003360 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003318:	4b49      	ldr	r3, [pc, #292]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a48      	ldr	r2, [pc, #288]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 800331e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fc ffdc 	bl	80002e0 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332c:	f7fc ffd8 	bl	80002e0 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e23c      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800333e:	4b40      	ldr	r3, [pc, #256]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334a:	4b3d      	ldr	r3, [pc, #244]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	061b      	lsls	r3, r3, #24
 8003358:	4939      	ldr	r1, [pc, #228]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
 800335e:	e01a      	b.n	8003396 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003360:	4b37      	ldr	r3, [pc, #220]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a36      	ldr	r2, [pc, #216]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800336a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fc ffb8 	bl	80002e0 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003374:	f7fc ffb4 	bl	80002e0 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e218      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003386:	4b2e      	ldr	r3, [pc, #184]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x1e0>
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003394:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d03c      	beq.n	800341c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d01c      	beq.n	80033e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033aa:	4b25      	ldr	r3, [pc, #148]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b0:	4a23      	ldr	r2, [pc, #140]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fc ff91 	bl	80002e0 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c2:	f7fc ff8d 	bl	80002e0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e1f1      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033d4:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80033d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0ef      	beq.n	80033c2 <HAL_RCC_OscConfig+0x22e>
 80033e2:	e01b      	b.n	800341c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e4:	4b16      	ldr	r3, [pc, #88]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ea:	4a15      	ldr	r2, [pc, #84]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f4:	f7fc ff74 	bl	80002e0 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033fc:	f7fc ff70 	bl	80002e0 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e1d4      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1ef      	bne.n	80033fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80ab 	beq.w	8003580 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800342e:	4b04      	ldr	r3, [pc, #16]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_RCC_OscConfig+0x2b4>
 800343a:	2301      	movs	r3, #1
 800343c:	e005      	b.n	800344a <HAL_RCC_OscConfig+0x2b6>
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	20000000 	.word	0x20000000
 8003448:	2300      	movs	r3, #0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344e:	4baf      	ldr	r3, [pc, #700]	; (800370c <HAL_RCC_OscConfig+0x578>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	4aae      	ldr	r2, [pc, #696]	; (800370c <HAL_RCC_OscConfig+0x578>)
 8003454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003458:	6593      	str	r3, [r2, #88]	; 0x58
 800345a:	4bac      	ldr	r3, [pc, #688]	; (800370c <HAL_RCC_OscConfig+0x578>)
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003466:	2301      	movs	r3, #1
 8003468:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800346a:	4ba9      	ldr	r3, [pc, #676]	; (8003710 <HAL_RCC_OscConfig+0x57c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d118      	bne.n	80034a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003476:	4ba6      	ldr	r3, [pc, #664]	; (8003710 <HAL_RCC_OscConfig+0x57c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4aa5      	ldr	r2, [pc, #660]	; (8003710 <HAL_RCC_OscConfig+0x57c>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003482:	f7fc ff2d 	bl	80002e0 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348a:	f7fc ff29 	bl	80002e0 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e18d      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349c:	4b9c      	ldr	r3, [pc, #624]	; (8003710 <HAL_RCC_OscConfig+0x57c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d108      	bne.n	80034c2 <HAL_RCC_OscConfig+0x32e>
 80034b0:	4b96      	ldr	r3, [pc, #600]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	4a95      	ldr	r2, [pc, #596]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034c0:	e024      	b.n	800350c <HAL_RCC_OscConfig+0x378>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b05      	cmp	r3, #5
 80034c8:	d110      	bne.n	80034ec <HAL_RCC_OscConfig+0x358>
 80034ca:	4b90      	ldr	r3, [pc, #576]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d0:	4a8e      	ldr	r2, [pc, #568]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80034d2:	f043 0304 	orr.w	r3, r3, #4
 80034d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034da:	4b8c      	ldr	r3, [pc, #560]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e0:	4a8a      	ldr	r2, [pc, #552]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ea:	e00f      	b.n	800350c <HAL_RCC_OscConfig+0x378>
 80034ec:	4b87      	ldr	r3, [pc, #540]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	4a86      	ldr	r2, [pc, #536]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034fc:	4b83      	ldr	r3, [pc, #524]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	4a82      	ldr	r2, [pc, #520]	; (800370c <HAL_RCC_OscConfig+0x578>)
 8003504:	f023 0304 	bic.w	r3, r3, #4
 8003508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d016      	beq.n	8003542 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7fc fee4 	bl	80002e0 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800351a:	e00a      	b.n	8003532 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351c:	f7fc fee0 	bl	80002e0 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e142      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003532:	4b76      	ldr	r3, [pc, #472]	; (800370c <HAL_RCC_OscConfig+0x578>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ed      	beq.n	800351c <HAL_RCC_OscConfig+0x388>
 8003540:	e015      	b.n	800356e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003542:	f7fc fecd 	bl	80002e0 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fc fec9 	bl	80002e0 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e12b      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003560:	4b6a      	ldr	r3, [pc, #424]	; (800370c <HAL_RCC_OscConfig+0x578>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1ed      	bne.n	800354a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800356e:	7ffb      	ldrb	r3, [r7, #31]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d105      	bne.n	8003580 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003574:	4b65      	ldr	r3, [pc, #404]	; (800370c <HAL_RCC_OscConfig+0x578>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	4a64      	ldr	r2, [pc, #400]	; (800370c <HAL_RCC_OscConfig+0x578>)
 800357a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03c      	beq.n	8003606 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01c      	beq.n	80035ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003594:	4b5d      	ldr	r3, [pc, #372]	; (800370c <HAL_RCC_OscConfig+0x578>)
 8003596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800359a:	4a5c      	ldr	r2, [pc, #368]	; (800370c <HAL_RCC_OscConfig+0x578>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fc fe9c 	bl	80002e0 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ac:	f7fc fe98 	bl	80002e0 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e0fc      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035be:	4b53      	ldr	r3, [pc, #332]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80035c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ef      	beq.n	80035ac <HAL_RCC_OscConfig+0x418>
 80035cc:	e01b      	b.n	8003606 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035ce:	4b4f      	ldr	r3, [pc, #316]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80035d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035d4:	4a4d      	ldr	r2, [pc, #308]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035de:	f7fc fe7f 	bl	80002e0 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035e6:	f7fc fe7b 	bl	80002e0 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e0df      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035f8:	4b44      	ldr	r3, [pc, #272]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80035fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1ef      	bne.n	80035e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80d3 	beq.w	80037b6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003610:	4b3e      	ldr	r3, [pc, #248]	; (800370c <HAL_RCC_OscConfig+0x578>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	2b0c      	cmp	r3, #12
 800361a:	f000 808d 	beq.w	8003738 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d15a      	bne.n	80036dc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <HAL_RCC_OscConfig+0x578>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a38      	ldr	r2, [pc, #224]	; (800370c <HAL_RCC_OscConfig+0x578>)
 800362c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fc fe55 	bl	80002e0 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363a:	f7fc fe51 	bl	80002e0 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e0b5      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800364c:	4b2f      	ldr	r3, [pc, #188]	; (800370c <HAL_RCC_OscConfig+0x578>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f0      	bne.n	800363a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003658:	4b2c      	ldr	r3, [pc, #176]	; (800370c <HAL_RCC_OscConfig+0x578>)
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	4b2d      	ldr	r3, [pc, #180]	; (8003714 <HAL_RCC_OscConfig+0x580>)
 800365e:	4013      	ands	r3, r2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6a11      	ldr	r1, [r2, #32]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003668:	3a01      	subs	r2, #1
 800366a:	0112      	lsls	r2, r2, #4
 800366c:	4311      	orrs	r1, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003672:	0212      	lsls	r2, r2, #8
 8003674:	4311      	orrs	r1, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800367a:	0852      	lsrs	r2, r2, #1
 800367c:	3a01      	subs	r2, #1
 800367e:	0552      	lsls	r2, r2, #21
 8003680:	4311      	orrs	r1, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003686:	0852      	lsrs	r2, r2, #1
 8003688:	3a01      	subs	r2, #1
 800368a:	0652      	lsls	r2, r2, #25
 800368c:	4311      	orrs	r1, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003692:	06d2      	lsls	r2, r2, #27
 8003694:	430a      	orrs	r2, r1
 8003696:	491d      	ldr	r1, [pc, #116]	; (800370c <HAL_RCC_OscConfig+0x578>)
 8003698:	4313      	orrs	r3, r2
 800369a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <HAL_RCC_OscConfig+0x578>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1a      	ldr	r2, [pc, #104]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80036a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036a8:	4b18      	ldr	r3, [pc, #96]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a17      	ldr	r2, [pc, #92]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80036ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7fc fe14 	bl	80002e0 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fc fe10 	bl	80002e0 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e074      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0x528>
 80036da:	e06c      	b.n	80037b6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0a      	ldr	r2, [pc, #40]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80036e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036e8:	4b08      	ldr	r3, [pc, #32]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a07      	ldr	r2, [pc, #28]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80036ee:	f023 0303 	bic.w	r3, r3, #3
 80036f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a04      	ldr	r2, [pc, #16]	; (800370c <HAL_RCC_OscConfig+0x578>)
 80036fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003702:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fc fdec 	bl	80002e0 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370a:	e00e      	b.n	800372a <HAL_RCC_OscConfig+0x596>
 800370c:	40021000 	.word	0x40021000
 8003710:	40007000 	.word	0x40007000
 8003714:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003718:	f7fc fde2 	bl	80002e0 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e046      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800372a:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <HAL_RCC_OscConfig+0x62c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x584>
 8003736:	e03e      	b.n	80037b6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e039      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003744:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <HAL_RCC_OscConfig+0x62c>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 0203 	and.w	r2, r3, #3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	429a      	cmp	r2, r3
 8003756:	d12c      	bne.n	80037b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	3b01      	subs	r3, #1
 8003764:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d123      	bne.n	80037b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003776:	429a      	cmp	r2, r3
 8003778:	d11b      	bne.n	80037b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d113      	bne.n	80037b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	3b01      	subs	r3, #1
 8003798:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d109      	bne.n	80037b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a8:	085b      	lsrs	r3, r3, #1
 80037aa:	3b01      	subs	r3, #1
 80037ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d001      	beq.n	80037b6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000

080037c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e11e      	b.n	8003a1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037dc:	4b91      	ldr	r3, [pc, #580]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d910      	bls.n	800380c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b8e      	ldr	r3, [pc, #568]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 020f 	bic.w	r2, r3, #15
 80037f2:	498c      	ldr	r1, [pc, #560]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b8a      	ldr	r3, [pc, #552]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e106      	b.n	8003a1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d073      	beq.n	8003900 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d129      	bne.n	8003874 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003820:	4b81      	ldr	r3, [pc, #516]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0f4      	b.n	8003a1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003830:	f000 f966 	bl	8003b00 <RCC_GetSysClockFreqFromPLLSource>
 8003834:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4a7c      	ldr	r2, [pc, #496]	; (8003a2c <HAL_RCC_ClockConfig+0x268>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d93f      	bls.n	80038be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800383e:	4b7a      	ldr	r3, [pc, #488]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003852:	2b00      	cmp	r3, #0
 8003854:	d033      	beq.n	80038be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800385a:	2b00      	cmp	r3, #0
 800385c:	d12f      	bne.n	80038be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800385e:	4b72      	ldr	r3, [pc, #456]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003866:	4a70      	ldr	r2, [pc, #448]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 8003868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800386c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e024      	b.n	80038be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d107      	bne.n	800388c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800387c:	4b6a      	ldr	r3, [pc, #424]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0c6      	b.n	8003a1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800388c:	4b66      	ldr	r3, [pc, #408]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0be      	b.n	8003a1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800389c:	f000 f8ce 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4a61      	ldr	r2, [pc, #388]	; (8003a2c <HAL_RCC_ClockConfig+0x268>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d909      	bls.n	80038be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038aa:	4b5f      	ldr	r3, [pc, #380]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038b2:	4a5d      	ldr	r2, [pc, #372]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 80038b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038be:	4b5a      	ldr	r3, [pc, #360]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f023 0203 	bic.w	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4957      	ldr	r1, [pc, #348]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d0:	f7fc fd06 	bl	80002e0 <HAL_GetTick>
 80038d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d6:	e00a      	b.n	80038ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d8:	f7fc fd02 	bl	80002e0 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e095      	b.n	8003a1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	4b4e      	ldr	r3, [pc, #312]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 020c 	and.w	r2, r3, #12
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d1eb      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d023      	beq.n	8003954 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003918:	4b43      	ldr	r3, [pc, #268]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a42      	ldr	r2, [pc, #264]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 800391e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003922:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003930:	4b3d      	ldr	r3, [pc, #244]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003938:	4a3b      	ldr	r2, [pc, #236]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 800393a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800393e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003940:	4b39      	ldr	r3, [pc, #228]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	4936      	ldr	r1, [pc, #216]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
 8003952:	e008      	b.n	8003966 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b80      	cmp	r3, #128	; 0x80
 8003958:	d105      	bne.n	8003966 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800395a:	4b33      	ldr	r3, [pc, #204]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	4a32      	ldr	r2, [pc, #200]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 8003960:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003964:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003966:	4b2f      	ldr	r3, [pc, #188]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d21d      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003974:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 020f 	bic.w	r2, r3, #15
 800397c:	4929      	ldr	r1, [pc, #164]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003984:	f7fc fcac 	bl	80002e0 <HAL_GetTick>
 8003988:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	e00a      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800398c:	f7fc fca8 	bl	80002e0 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	f241 3288 	movw	r2, #5000	; 0x1388
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e03b      	b.n	8003a1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <HAL_RCC_ClockConfig+0x260>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d1ed      	bne.n	800398c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4917      	ldr	r1, [pc, #92]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490f      	ldr	r1, [pc, #60]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039ee:	f000 f825 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 80039f2:	4601      	mov	r1, r0
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <HAL_RCC_ClockConfig+0x264>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	4a0c      	ldr	r2, [pc, #48]	; (8003a30 <HAL_RCC_ClockConfig+0x26c>)
 8003a00:	5cd3      	ldrb	r3, [r2, r3]
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	fa21 f303 	lsr.w	r3, r1, r3
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <HAL_RCC_ClockConfig+0x270>)
 8003a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <HAL_RCC_ClockConfig+0x274>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fc fc18 	bl	8000248 <HAL_InitTick>
 8003a18:	4603      	mov	r3, r0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40022000 	.word	0x40022000
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	04c4b400 	.word	0x04c4b400
 8003a30:	08005eec 	.word	0x08005eec
 8003a34:	20000008 	.word	0x20000008
 8003a38:	20000000 	.word	0x20000000

08003a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a42:	4b2c      	ldr	r3, [pc, #176]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d102      	bne.n	8003a54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a4e:	4b2a      	ldr	r3, [pc, #168]	; (8003af8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	e047      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a54:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 030c 	and.w	r3, r3, #12
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d102      	bne.n	8003a66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a60:	4b26      	ldr	r3, [pc, #152]	; (8003afc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	e03e      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a66:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d136      	bne.n	8003ae0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a72:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	3301      	adds	r3, #1
 8003a88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d10c      	bne.n	8003aaa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a90:	4a1a      	ldr	r2, [pc, #104]	; (8003afc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	4a16      	ldr	r2, [pc, #88]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a9a:	68d2      	ldr	r2, [r2, #12]
 8003a9c:	0a12      	lsrs	r2, r2, #8
 8003a9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	617b      	str	r3, [r7, #20]
      break;
 8003aa8:	e00c      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003aaa:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab2:	4a10      	ldr	r2, [pc, #64]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ab4:	68d2      	ldr	r2, [r2, #12]
 8003ab6:	0a12      	lsrs	r2, r2, #8
 8003ab8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003abc:	fb02 f303 	mul.w	r3, r2, r3
 8003ac0:	617b      	str	r3, [r7, #20]
      break;
 8003ac2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	0e5b      	lsrs	r3, r3, #25
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	e001      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ae4:	693b      	ldr	r3, [r7, #16]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	00f42400 	.word	0x00f42400
 8003afc:	007a1200 	.word	0x007a1200

08003b00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b06:	4b1e      	ldr	r3, [pc, #120]	; (8003b80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b10:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d10c      	bne.n	8003b3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b24:	4a17      	ldr	r2, [pc, #92]	; (8003b84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2c:	4a14      	ldr	r2, [pc, #80]	; (8003b80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b2e:	68d2      	ldr	r2, [r2, #12]
 8003b30:	0a12      	lsrs	r2, r2, #8
 8003b32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	617b      	str	r3, [r7, #20]
    break;
 8003b3c:	e00c      	b.n	8003b58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b3e:	4a12      	ldr	r2, [pc, #72]	; (8003b88 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	4a0e      	ldr	r2, [pc, #56]	; (8003b80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b48:	68d2      	ldr	r2, [r2, #12]
 8003b4a:	0a12      	lsrs	r2, r2, #8
 8003b4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b50:	fb02 f303 	mul.w	r3, r2, r3
 8003b54:	617b      	str	r3, [r7, #20]
    break;
 8003b56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b58:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	0e5b      	lsrs	r3, r3, #25
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	3301      	adds	r3, #1
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b72:	687b      	ldr	r3, [r7, #4]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	371c      	adds	r7, #28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	40021000 	.word	0x40021000
 8003b84:	007a1200 	.word	0x007a1200
 8003b88:	00f42400 	.word	0x00f42400

08003b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b94:	2300      	movs	r3, #0
 8003b96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b98:	2300      	movs	r3, #0
 8003b9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8098 	beq.w	8003cda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003baa:	2300      	movs	r3, #0
 8003bac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bae:	4b43      	ldr	r3, [pc, #268]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10d      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bba:	4b40      	ldr	r3, [pc, #256]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbe:	4a3f      	ldr	r2, [pc, #252]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bd6:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a39      	ldr	r2, [pc, #228]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003be2:	f7fc fb7d 	bl	80002e0 <HAL_GetTick>
 8003be6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003be8:	e009      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bea:	f7fc fb79 	bl	80002e0 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d902      	bls.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	74fb      	strb	r3, [r7, #19]
        break;
 8003bfc:	e005      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bfe:	4b30      	ldr	r3, [pc, #192]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ef      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c0a:	7cfb      	ldrb	r3, [r7, #19]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d159      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c10:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d01e      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d019      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c2c:	4b23      	ldr	r3, [pc, #140]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c38:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	4a1f      	ldr	r2, [pc, #124]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c48:	4b1c      	ldr	r3, [pc, #112]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4e:	4a1b      	ldr	r2, [pc, #108]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c58:	4a18      	ldr	r2, [pc, #96]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d016      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6a:	f7fc fb39 	bl	80002e0 <HAL_GetTick>
 8003c6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c70:	e00b      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c72:	f7fc fb35 	bl	80002e0 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d902      	bls.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	74fb      	strb	r3, [r7, #19]
            break;
 8003c88:	e006      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c8a:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0ec      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c98:	7cfb      	ldrb	r3, [r7, #19]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	4903      	ldr	r1, [pc, #12]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cb6:	7cfb      	ldrb	r3, [r7, #19]
 8003cb8:	74bb      	strb	r3, [r7, #18]
 8003cba:	e005      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cc8:	7c7b      	ldrb	r3, [r7, #17]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d105      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cce:	4ba6      	ldr	r3, [pc, #664]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd2:	4aa5      	ldr	r2, [pc, #660]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ce6:	4ba0      	ldr	r3, [pc, #640]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cec:	f023 0203 	bic.w	r2, r3, #3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	499c      	ldr	r1, [pc, #624]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d08:	4b97      	ldr	r3, [pc, #604]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	f023 020c 	bic.w	r2, r3, #12
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	4994      	ldr	r1, [pc, #592]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d2a:	4b8f      	ldr	r3, [pc, #572]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	498b      	ldr	r1, [pc, #556]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d4c:	4b86      	ldr	r3, [pc, #536]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	4983      	ldr	r1, [pc, #524]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d6e:	4b7e      	ldr	r3, [pc, #504]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	497a      	ldr	r1, [pc, #488]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d90:	4b75      	ldr	r3, [pc, #468]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	4972      	ldr	r1, [pc, #456]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003db2:	4b6d      	ldr	r3, [pc, #436]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	4969      	ldr	r1, [pc, #420]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dd4:	4b64      	ldr	r3, [pc, #400]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	4961      	ldr	r1, [pc, #388]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003df6:	4b5c      	ldr	r3, [pc, #368]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	4958      	ldr	r1, [pc, #352]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d015      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e18:	4b53      	ldr	r3, [pc, #332]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	4950      	ldr	r1, [pc, #320]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e36:	d105      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e38:	4b4b      	ldr	r3, [pc, #300]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a4a      	ldr	r2, [pc, #296]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d015      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e50:	4b45      	ldr	r3, [pc, #276]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	4942      	ldr	r1, [pc, #264]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e70:	4b3d      	ldr	r3, [pc, #244]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a3c      	ldr	r2, [pc, #240]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d015      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e88:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	4934      	ldr	r1, [pc, #208]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea8:	4b2f      	ldr	r3, [pc, #188]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a2e      	ldr	r2, [pc, #184]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eb2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d015      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ec0:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ece:	4926      	ldr	r1, [pc, #152]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ede:	d105      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ee0:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4a20      	ldr	r2, [pc, #128]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d015      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	4918      	ldr	r1, [pc, #96]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f16:	d105      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f18:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d015      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f30:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	490a      	ldr	r1, [pc, #40]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f4e:	d105      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a04      	ldr	r2, [pc, #16]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000

08003f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e01d      	b.n	8003fba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f001 fb6a 	bl	800566c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4610      	mov	r0, r2
 8003fac:	f000 fa06 	bl	80043bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <HAL_TIM_Base_Start_IT+0x50>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b06      	cmp	r3, #6
 8003fec:	d00b      	beq.n	8004006 <HAL_TIM_Base_Start_IT+0x42>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff4:	d007      	beq.n	8004006 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	00010007 	.word	0x00010007

08004018 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0201 	bic.w	r2, r2, #1
 800402e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6a1a      	ldr	r2, [r3, #32]
 8004036:	f241 1311 	movw	r3, #4369	; 0x1111
 800403a:	4013      	ands	r3, r2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10f      	bne.n	8004060 <HAL_TIM_Base_Stop_IT+0x48>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6a1a      	ldr	r2, [r3, #32]
 8004046:	f244 4344 	movw	r3, #17476	; 0x4444
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d107      	bne.n	8004060 <HAL_TIM_Base_Stop_IT+0x48>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b02      	cmp	r3, #2
 8004082:	d122      	bne.n	80040ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b02      	cmp	r3, #2
 8004090:	d11b      	bne.n	80040ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f06f 0202 	mvn.w	r2, #2
 800409a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f965 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 80040b6:	e005      	b.n	80040c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f957 	bl	800436c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f968 	bl	8004394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d122      	bne.n	800411e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d11b      	bne.n	800411e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f06f 0204 	mvn.w	r2, #4
 80040ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f93b 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 800410a:	e005      	b.n	8004118 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f92d 	bl	800436c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f93e 	bl	8004394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b08      	cmp	r3, #8
 800412a:	d122      	bne.n	8004172 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b08      	cmp	r3, #8
 8004138:	d11b      	bne.n	8004172 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f06f 0208 	mvn.w	r2, #8
 8004142:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2204      	movs	r2, #4
 8004148:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f911 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 800415e:	e005      	b.n	800416c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f903 	bl	800436c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f914 	bl	8004394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b10      	cmp	r3, #16
 800417e:	d122      	bne.n	80041c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	2b10      	cmp	r3, #16
 800418c:	d11b      	bne.n	80041c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f06f 0210 	mvn.w	r2, #16
 8004196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2208      	movs	r2, #8
 800419c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f8e7 	bl	8004380 <HAL_TIM_IC_CaptureCallback>
 80041b2:	e005      	b.n	80041c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f8d9 	bl	800436c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f8ea 	bl	8004394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d10e      	bne.n	80041f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d107      	bne.n	80041f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f06f 0201 	mvn.w	r2, #1
 80041ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fab3 	bl	8004758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fc:	2b80      	cmp	r3, #128	; 0x80
 80041fe:	d10e      	bne.n	800421e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	2b80      	cmp	r3, #128	; 0x80
 800420c:	d107      	bne.n	800421e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f969 	bl	80044f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422c:	d10e      	bne.n	800424c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004238:	2b80      	cmp	r3, #128	; 0x80
 800423a:	d107      	bne.n	800424c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f95c 	bl	8004504 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004256:	2b40      	cmp	r3, #64	; 0x40
 8004258:	d10e      	bne.n	8004278 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004264:	2b40      	cmp	r3, #64	; 0x40
 8004266:	d107      	bne.n	8004278 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f898 	bl	80043a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b20      	cmp	r3, #32
 8004284:	d10e      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b20      	cmp	r3, #32
 8004292:	d107      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0220 	mvn.w	r2, #32
 800429c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f91c 	bl	80044dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b2:	d10f      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042c2:	d107      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80042cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f922 	bl	8004518 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042e2:	d10f      	bne.n	8004304 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042f2:	d107      	bne.n	8004304 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80042fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f914 	bl	800452c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004312:	d10f      	bne.n	8004334 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004322:	d107      	bne.n	8004334 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800432c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f906 	bl	8004540 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800433e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004342:	d10f      	bne.n	8004364 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800434e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004352:	d107      	bne.n	8004364 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800435c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f8f8 	bl	8004554 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004364:	bf00      	nop
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a3c      	ldr	r2, [pc, #240]	; (80044c0 <TIM_Base_SetConfig+0x104>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00f      	beq.n	80043f4 <TIM_Base_SetConfig+0x38>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043da:	d00b      	beq.n	80043f4 <TIM_Base_SetConfig+0x38>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a39      	ldr	r2, [pc, #228]	; (80044c4 <TIM_Base_SetConfig+0x108>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d007      	beq.n	80043f4 <TIM_Base_SetConfig+0x38>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a38      	ldr	r2, [pc, #224]	; (80044c8 <TIM_Base_SetConfig+0x10c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_Base_SetConfig+0x38>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a37      	ldr	r2, [pc, #220]	; (80044cc <TIM_Base_SetConfig+0x110>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d108      	bne.n	8004406 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a2d      	ldr	r2, [pc, #180]	; (80044c0 <TIM_Base_SetConfig+0x104>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01b      	beq.n	8004446 <TIM_Base_SetConfig+0x8a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004414:	d017      	beq.n	8004446 <TIM_Base_SetConfig+0x8a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a2a      	ldr	r2, [pc, #168]	; (80044c4 <TIM_Base_SetConfig+0x108>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d013      	beq.n	8004446 <TIM_Base_SetConfig+0x8a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a29      	ldr	r2, [pc, #164]	; (80044c8 <TIM_Base_SetConfig+0x10c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00f      	beq.n	8004446 <TIM_Base_SetConfig+0x8a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a28      	ldr	r2, [pc, #160]	; (80044cc <TIM_Base_SetConfig+0x110>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00b      	beq.n	8004446 <TIM_Base_SetConfig+0x8a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a27      	ldr	r2, [pc, #156]	; (80044d0 <TIM_Base_SetConfig+0x114>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d007      	beq.n	8004446 <TIM_Base_SetConfig+0x8a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a26      	ldr	r2, [pc, #152]	; (80044d4 <TIM_Base_SetConfig+0x118>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d003      	beq.n	8004446 <TIM_Base_SetConfig+0x8a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a25      	ldr	r2, [pc, #148]	; (80044d8 <TIM_Base_SetConfig+0x11c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d108      	bne.n	8004458 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a10      	ldr	r2, [pc, #64]	; (80044c0 <TIM_Base_SetConfig+0x104>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00f      	beq.n	80044a4 <TIM_Base_SetConfig+0xe8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a11      	ldr	r2, [pc, #68]	; (80044cc <TIM_Base_SetConfig+0x110>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00b      	beq.n	80044a4 <TIM_Base_SetConfig+0xe8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a10      	ldr	r2, [pc, #64]	; (80044d0 <TIM_Base_SetConfig+0x114>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d007      	beq.n	80044a4 <TIM_Base_SetConfig+0xe8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a0f      	ldr	r2, [pc, #60]	; (80044d4 <TIM_Base_SetConfig+0x118>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <TIM_Base_SetConfig+0xe8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a0e      	ldr	r2, [pc, #56]	; (80044d8 <TIM_Base_SetConfig+0x11c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d103      	bne.n	80044ac <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	615a      	str	r2, [r3, #20]
}
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40012c00 	.word	0x40012c00
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40000800 	.word	0x40000800
 80044cc:	40013400 	.word	0x40013400
 80044d0:	40014000 	.word	0x40014000
 80044d4:	40014400 	.word	0x40014400
 80044d8:	40014800 	.word	0x40014800

080044dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <Config_Setup>:
#include "main.h"
#include "config.h"


void Config_Setup(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0

		Config_1();

#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_0();
 800456c:	f000 f802 	bl	8004574 <Config_0>
	}
	else //if flash is not blank read in values from flash
	{
		Config_Read_Flash();
	}*/
}
 8004570:	bf00      	nop
 8004572:	bd80      	pop	{r7, pc}

08004574 <Config_0>:


void Config_0(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
	MeasureDriverCurrent = 1;
 8004578:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <Config_0+0x7c>)
 800457a:	2201      	movs	r2, #1
 800457c:	701a      	strb	r2, [r3, #0]
	MeasureTemperature = 1;
 800457e:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <Config_0+0x80>)
 8004580:	2201      	movs	r2, #1
 8004582:	701a      	strb	r2, [r3, #0]
	SensorRollingAverages[0] = 1; //AI2
 8004584:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <Config_0+0x84>)
 8004586:	2201      	movs	r2, #1
 8004588:	801a      	strh	r2, [r3, #0]
	SensorRollingAverages[1] = 1; //AI3
 800458a:	4b1b      	ldr	r3, [pc, #108]	; (80045f8 <Config_0+0x84>)
 800458c:	2201      	movs	r2, #1
 800458e:	805a      	strh	r2, [r3, #2]
	SensorRollingAverages[2] = 1; //AI5
 8004590:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <Config_0+0x84>)
 8004592:	2201      	movs	r2, #1
 8004594:	809a      	strh	r2, [r3, #4]
	SensorRollingAverages[3] = 1; //AI6
 8004596:	4b18      	ldr	r3, [pc, #96]	; (80045f8 <Config_0+0x84>)
 8004598:	2201      	movs	r2, #1
 800459a:	80da      	strh	r2, [r3, #6]
	TransferFunctions[0] = VOLTAGE_5V_UNCAL; //AI2
 800459c:	4b17      	ldr	r3, [pc, #92]	; (80045fc <Config_0+0x88>)
 800459e:	2203      	movs	r2, #3
 80045a0:	701a      	strb	r2, [r3, #0]
	TransferFunctions[1] = VOLTAGE_24V_UNCAL; //AI3
 80045a2:	4b16      	ldr	r3, [pc, #88]	; (80045fc <Config_0+0x88>)
 80045a4:	2206      	movs	r2, #6
 80045a6:	705a      	strb	r2, [r3, #1]
	TransferFunctions[2] = VOLTAGE_4V5_UNCAL; //AI5
 80045a8:	4b14      	ldr	r3, [pc, #80]	; (80045fc <Config_0+0x88>)
 80045aa:	2202      	movs	r2, #2
 80045ac:	709a      	strb	r2, [r3, #2]
	TransferFunctions[3] = VOLTAGE_3V3_UNCAL; //AI6
 80045ae:	4b13      	ldr	r3, [pc, #76]	; (80045fc <Config_0+0x88>)
 80045b0:	2201      	movs	r2, #1
 80045b2:	70da      	strb	r2, [r3, #3]

	CanId_Analog = 0x88;
 80045b4:	4b12      	ldr	r3, [pc, #72]	; (8004600 <Config_0+0x8c>)
 80045b6:	2288      	movs	r2, #136	; 0x88
 80045b8:	801a      	strh	r2, [r3, #0]
	AnalogSensorBytes[0] = 1;
 80045ba:	4b12      	ldr	r3, [pc, #72]	; (8004604 <Config_0+0x90>)
 80045bc:	2201      	movs	r2, #1
 80045be:	701a      	strb	r2, [r3, #0]
	AnalogSensorBytes[1] = 2;
 80045c0:	4b10      	ldr	r3, [pc, #64]	; (8004604 <Config_0+0x90>)
 80045c2:	2202      	movs	r2, #2
 80045c4:	705a      	strb	r2, [r3, #1]
	AnalogSensorBytes[2] = 0;
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <Config_0+0x90>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	709a      	strb	r2, [r3, #2]
	AnalogSensorBytes[3] = 2;
 80045cc:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <Config_0+0x90>)
 80045ce:	2202      	movs	r2, #2
 80045d0:	70da      	strb	r2, [r3, #3]
	CanId_Diagnostics = 0x89;
 80045d2:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <Config_0+0x94>)
 80045d4:	2289      	movs	r2, #137	; 0x89
 80045d6:	801a      	strh	r2, [r3, #0]

	SendAnalogPeriod = 10; //in 100us resolution
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <Config_0+0x98>)
 80045da:	220a      	movs	r2, #10
 80045dc:	801a      	strh	r2, [r3, #0]
	CanSyncDelay = 0; //in 10us resolution
 80045de:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <Config_0+0x9c>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	801a      	strh	r2, [r3, #0]
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	20000f80 	.word	0x20000f80
 80045f4:	20000dd0 	.word	0x20000dd0
 80045f8:	20000d5c 	.word	0x20000d5c
 80045fc:	20000ebc 	.word	0x20000ebc
 8004600:	20000e48 	.word	0x20000e48
 8004604:	20000f34 	.word	0x20000f34
 8004608:	20000e38 	.word	0x20000e38
 800460c:	20000e40 	.word	0x20000e40
 8004610:	20000130 	.word	0x20000130

08004614 <main>:
uint8_t canSendErrorFlag;
uint8_t canTimerFlag;


int main(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
	HAL_Init();
 8004618:	f7fb fdfe 	bl	8000218 <HAL_Init>

	SystemClock_Config();
 800461c:	f000 fb84 	bl	8004d28 <SystemClock_Config>

	Config_Setup();
 8004620:	f7ff ffa2 	bl	8004568 <Config_Setup>

	MX_GPIO_Init();
 8004624:	f000 fbe6 	bl	8004df4 <MX_GPIO_Init>
	MX_DMA_Init();
 8004628:	f000 fc24 	bl	8004e74 <MX_DMA_Init>
	MX_ADC1_Init();
 800462c:	f000 fc54 	bl	8004ed8 <MX_ADC1_Init>
	MX_ADC2_Init();
 8004630:	f000 fd08 	bl	8005044 <MX_ADC2_Init>
	MX_FDCAN_Init();
 8004634:	f000 fda4 	bl	8005180 <MX_FDCAN_Init>
	MX_TIM6_Init();
 8004638:	f000 fe36 	bl	80052a8 <MX_TIM6_Init>
	MX_TIM7_Init();
 800463c:	f000 fe60 	bl	8005300 <MX_TIM7_Init>
	MX_TIM16_Init();
 8004640:	f000 fe82 	bl	8005348 <MX_TIM16_Init>

    if (HAL_ADC_Start_DMA(&hadc1, ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK) { Error_Handler(); }
 8004644:	4b19      	ldr	r3, [pc, #100]	; (80046ac <main+0x98>)
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	461a      	mov	r2, r3
 800464a:	4919      	ldr	r1, [pc, #100]	; (80046b0 <main+0x9c>)
 800464c:	4817      	ldr	r0, [pc, #92]	; (80046ac <main+0x98>)
 800464e:	f7fc fa2f 	bl	8000ab0 <HAL_ADC_Start_DMA>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <main+0x48>
 8004658:	f000 fe9e 	bl	8005398 <Error_Handler>
    if (HAL_ADC_Start_DMA(&hadc2, ADC2Data, hadc2.Init.NbrOfConversion) != HAL_OK) { Error_Handler(); }
 800465c:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <main+0xa0>)
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	461a      	mov	r2, r3
 8004662:	4915      	ldr	r1, [pc, #84]	; (80046b8 <main+0xa4>)
 8004664:	4813      	ldr	r0, [pc, #76]	; (80046b4 <main+0xa0>)
 8004666:	f7fc fa23 	bl	8000ab0 <HAL_ADC_Start_DMA>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <main+0x60>
 8004670:	f000 fe92 	bl	8005398 <Error_Handler>


	while (1)
	{
		if (canErrorToTransmit && canSendErrorFlag)
 8004674:	4b11      	ldr	r3, [pc, #68]	; (80046bc <main+0xa8>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00c      	beq.n	8004696 <main+0x82>
 800467c:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <main+0xac>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <main+0x82>
		{
			Send_Error();
 8004684:	f000 face 	bl	8004c24 <Send_Error>
			if(!canErrorToTransmit)
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <main+0xa8>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d102      	bne.n	8004696 <main+0x82>
			{
				canSendErrorFlag=0;
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <main+0xac>)
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
			}
		}

		if (canTimerFlag)
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <main+0xb0>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0ea      	beq.n	8004674 <main+0x60>
		{
			Can_Send_Analog();
 800469e:	f000 f995 	bl	80049cc <Can_Send_Analog>
			canTimerFlag=0;
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <main+0xb0>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
		if (canErrorToTransmit && canSendErrorFlag)
 80046a8:	e7e4      	b.n	8004674 <main+0x60>
 80046aa:	bf00      	nop
 80046ac:	20000e4c 	.word	0x20000e4c
 80046b0:	20000ec0 	.word	0x20000ec0
 80046b4:	20000d64 	.word	0x20000d64
 80046b8:	20000f98 	.word	0x20000f98
 80046bc:	20000e42 	.word	0x20000e42
 80046c0:	20001004 	.word	0x20001004
 80046c4:	20000eb8 	.word	0x20000eb8

080046c8 <HAL_FDCAN_RxFifo0Callback>:
	}
}


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b090      	sub	sp, #64	; 0x40
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t CANRxData[8];

	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d032      	beq.n	8004742 <HAL_FDCAN_RxFifo0Callback+0x7a>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, CANRxData) != HAL_OK)
 80046dc:	f107 030c 	add.w	r3, r7, #12
 80046e0:	f107 0214 	add.w	r2, r7, #20
 80046e4:	2140      	movs	r1, #64	; 0x40
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fd feb6 	bl	8002458 <HAL_FDCAN_GetRxMessage>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <HAL_FDCAN_RxFifo0Callback+0x30>
		{
			Set_Error(ERR_RECIEVE_FAILED);
 80046f2:	2004      	movs	r0, #4
 80046f4:	f000 fa6a 	bl	8004bcc <Set_Error>
		}

		//set any bytes not actaully read to 0 to prevent unknown values being in them
		for(uint32_t i=(RxHeader.DataLength>>16); i<8; i++)
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	0c1b      	lsrs	r3, r3, #16
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046fe:	e008      	b.n	8004712 <HAL_FDCAN_RxFifo0Callback+0x4a>
		{
			CANRxData[i]=0;
 8004700:	f107 020c 	add.w	r2, r7, #12
 8004704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004706:	4413      	add	r3, r2
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=(RxHeader.DataLength>>16); i<8; i++)
 800470c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470e:	3301      	adds	r3, #1
 8004710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004714:	2b07      	cmp	r3, #7
 8004716:	d9f3      	bls.n	8004700 <HAL_FDCAN_RxFifo0Callback+0x38>
		}

		if (RxHeader.Identifier == CANID_SYNC)
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2b80      	cmp	r3, #128	; 0x80
 800471c:	d10e      	bne.n	800473c <HAL_FDCAN_RxFifo0Callback+0x74>
		{
			if(!SendAnalogPeriod)
 800471e:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_FDCAN_RxFifo0Callback+0x84>)
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10d      	bne.n	8004742 <HAL_FDCAN_RxFifo0Callback+0x7a>
			{
				if(CanSyncDelay)
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <HAL_FDCAN_RxFifo0Callback+0x88>)
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_FDCAN_RxFifo0Callback+0x6e>
				{
					HAL_TIM_Base_Start_IT(&htim16);
 800472e:	4809      	ldr	r0, [pc, #36]	; (8004754 <HAL_FDCAN_RxFifo0Callback+0x8c>)
 8004730:	f7ff fc48 	bl	8003fc4 <HAL_TIM_Base_Start_IT>
		else
		{
			Set_Error(ERR_RECIEVED_INVALID_ID);
		}
	}
}
 8004734:	e005      	b.n	8004742 <HAL_FDCAN_RxFifo0Callback+0x7a>
					Can_Send_Analog();
 8004736:	f000 f949 	bl	80049cc <Can_Send_Analog>
}
 800473a:	e002      	b.n	8004742 <HAL_FDCAN_RxFifo0Callback+0x7a>
			Set_Error(ERR_RECIEVED_INVALID_ID);
 800473c:	2003      	movs	r0, #3
 800473e:	f000 fa45 	bl	8004bcc <Set_Error>
}
 8004742:	bf00      	nop
 8004744:	3740      	adds	r7, #64	; 0x40
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000e40 	.word	0x20000e40
 8004750:	20000130 	.word	0x20000130
 8004754:	20001008 	.word	0x20001008

08004758 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a10      	ldr	r2, [pc, #64]	; (80047a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d105      	bne.n	8004776 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_TIM_Base_Stop_IT(&htim16);
 800476a:	4810      	ldr	r0, [pc, #64]	; (80047ac <HAL_TIM_PeriodElapsedCallback+0x54>)
 800476c:	f7ff fc54 	bl	8004018 <HAL_TIM_Base_Stop_IT>
		Can_Send_Analog();
 8004770:	f000 f92c 	bl	80049cc <Can_Send_Analog>
	}
	else
	{
		Error_Handler();
	}
}
 8004774:	e013      	b.n	800479e <HAL_TIM_PeriodElapsedCallback+0x46>
	else if (htim->Instance == TIM7)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a0d      	ldr	r2, [pc, #52]	; (80047b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d103      	bne.n	8004788 <HAL_TIM_PeriodElapsedCallback+0x30>
		canSendErrorFlag=1;
 8004780:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8004782:	2201      	movs	r2, #1
 8004784:	701a      	strb	r2, [r3, #0]
}
 8004786:	e00a      	b.n	800479e <HAL_TIM_PeriodElapsedCallback+0x46>
	else if (htim->Instance == TIM6)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a0a      	ldr	r2, [pc, #40]	; (80047b8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d103      	bne.n	800479a <HAL_TIM_PeriodElapsedCallback+0x42>
		canTimerFlag=1;
 8004792:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8004794:	2201      	movs	r2, #1
 8004796:	701a      	strb	r2, [r3, #0]
}
 8004798:	e001      	b.n	800479e <HAL_TIM_PeriodElapsedCallback+0x46>
		Error_Handler();
 800479a:	f000 fdfd 	bl	8005398 <Error_Handler>
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40014400 	.word	0x40014400
 80047ac:	20001008 	.word	0x20001008
 80047b0:	40001400 	.word	0x40001400
 80047b4:	20001004 	.word	0x20001004
 80047b8:	40001000 	.word	0x40001000
 80047bc:	20000eb8 	.word	0x20000eb8

080047c0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047d0:	d165      	bne.n	800489e <HAL_ADC_ConvCpltCallback+0xde>
	{
		ADCRawData[0][AI2Pos] = ADC1Data[0];
 80047d2:	4b6d      	ldr	r3, [pc, #436]	; (8004988 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a6d      	ldr	r2, [pc, #436]	; (800498c <HAL_ADC_ConvCpltCallback+0x1cc>)
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	496d      	ldr	r1, [pc, #436]	; (8004990 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80047dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AI2Pos++;
 80047e0:	4b69      	ldr	r3, [pc, #420]	; (8004988 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	4a68      	ldr	r2, [pc, #416]	; (8004988 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80047e8:	6013      	str	r3, [r2, #0]
		if (AI2Pos>(SensorRollingAverages[0]-1))
 80047ea:	4b6a      	ldr	r3, [pc, #424]	; (8004994 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	461a      	mov	r2, r3
 80047f2:	4b65      	ldr	r3, [pc, #404]	; (8004988 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d203      	bcs.n	8004802 <HAL_ADC_ConvCpltCallback+0x42>
		{
			AI2Pos = 0;
 80047fa:	4b63      	ldr	r3, [pc, #396]	; (8004988 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	e009      	b.n	8004816 <HAL_ADC_ConvCpltCallback+0x56>
		}
		else if (AI2Written<AI2Pos)
 8004802:	4b65      	ldr	r3, [pc, #404]	; (8004998 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4b60      	ldr	r3, [pc, #384]	; (8004988 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d203      	bcs.n	8004816 <HAL_ADC_ConvCpltCallback+0x56>
		{
			AI2Written = AI2Pos;
 800480e:	4b5e      	ldr	r3, [pc, #376]	; (8004988 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a61      	ldr	r2, [pc, #388]	; (8004998 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8004814:	6013      	str	r3, [r2, #0]
		}

		ADCRawData[1][AI3Pos] = ADC1Data[1];
 8004816:	4b61      	ldr	r3, [pc, #388]	; (800499c <HAL_ADC_ConvCpltCallback+0x1dc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a5c      	ldr	r2, [pc, #368]	; (800498c <HAL_ADC_ConvCpltCallback+0x1cc>)
 800481c:	6852      	ldr	r2, [r2, #4]
 800481e:	495c      	ldr	r1, [pc, #368]	; (8004990 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8004820:	3380      	adds	r3, #128	; 0x80
 8004822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AI3Pos++;
 8004826:	4b5d      	ldr	r3, [pc, #372]	; (800499c <HAL_ADC_ConvCpltCallback+0x1dc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3301      	adds	r3, #1
 800482c:	4a5b      	ldr	r2, [pc, #364]	; (800499c <HAL_ADC_ConvCpltCallback+0x1dc>)
 800482e:	6013      	str	r3, [r2, #0]
		if (AI3Pos>(SensorRollingAverages[1]-1))
 8004830:	4b58      	ldr	r3, [pc, #352]	; (8004994 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8004832:	885b      	ldrh	r3, [r3, #2]
 8004834:	3b01      	subs	r3, #1
 8004836:	461a      	mov	r2, r3
 8004838:	4b58      	ldr	r3, [pc, #352]	; (800499c <HAL_ADC_ConvCpltCallback+0x1dc>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d203      	bcs.n	8004848 <HAL_ADC_ConvCpltCallback+0x88>
		{
			AI3Pos = 0;
 8004840:	4b56      	ldr	r3, [pc, #344]	; (800499c <HAL_ADC_ConvCpltCallback+0x1dc>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e009      	b.n	800485c <HAL_ADC_ConvCpltCallback+0x9c>
		}
		else if (AI3Written<AI3Pos)
 8004848:	4b55      	ldr	r3, [pc, #340]	; (80049a0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4b53      	ldr	r3, [pc, #332]	; (800499c <HAL_ADC_ConvCpltCallback+0x1dc>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d203      	bcs.n	800485c <HAL_ADC_ConvCpltCallback+0x9c>
		{
			AI3Written = AI3Pos;
 8004854:	4b51      	ldr	r3, [pc, #324]	; (800499c <HAL_ADC_ConvCpltCallback+0x1dc>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a51      	ldr	r2, [pc, #324]	; (80049a0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 800485a:	6013      	str	r3, [r2, #0]
		}

		ADCRawData[2][TPos] = ADC1Data[2];
 800485c:	4b51      	ldr	r3, [pc, #324]	; (80049a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a4a      	ldr	r2, [pc, #296]	; (800498c <HAL_ADC_ConvCpltCallback+0x1cc>)
 8004862:	6892      	ldr	r2, [r2, #8]
 8004864:	494a      	ldr	r1, [pc, #296]	; (8004990 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8004866:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800486a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		TPos++;
 800486e:	4b4d      	ldr	r3, [pc, #308]	; (80049a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	4a4b      	ldr	r2, [pc, #300]	; (80049a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8004876:	6013      	str	r3, [r2, #0]
		if (TPos>(T_ROLLING_AVERAGE-1))
 8004878:	4b4a      	ldr	r3, [pc, #296]	; (80049a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b7f      	cmp	r3, #127	; 0x7f
 800487e:	d903      	bls.n	8004888 <HAL_ADC_ConvCpltCallback+0xc8>
		{
			TPos = 0;
 8004880:	4b48      	ldr	r3, [pc, #288]	; (80049a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		Error_Handler();
	}
}
 8004886:	e07a      	b.n	800497e <HAL_ADC_ConvCpltCallback+0x1be>
		else if (TWritten<TPos)
 8004888:	4b47      	ldr	r3, [pc, #284]	; (80049a8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	4b45      	ldr	r3, [pc, #276]	; (80049a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d274      	bcs.n	800497e <HAL_ADC_ConvCpltCallback+0x1be>
			TWritten = TPos;
 8004894:	4b43      	ldr	r3, [pc, #268]	; (80049a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a43      	ldr	r2, [pc, #268]	; (80049a8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 800489a:	6013      	str	r3, [r2, #0]
}
 800489c:	e06f      	b.n	800497e <HAL_ADC_ConvCpltCallback+0x1be>
	else if (hadc->Instance == ADC2)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a42      	ldr	r2, [pc, #264]	; (80049ac <HAL_ADC_ConvCpltCallback+0x1ec>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d168      	bne.n	800497a <HAL_ADC_ConvCpltCallback+0x1ba>
		ADCRawData[3][AI5Pos] = ADC2Data[0];
 80048a8:	4b41      	ldr	r3, [pc, #260]	; (80049b0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a41      	ldr	r2, [pc, #260]	; (80049b4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80048ae:	6812      	ldr	r2, [r2, #0]
 80048b0:	4937      	ldr	r1, [pc, #220]	; (8004990 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80048b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80048b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AI5Pos++;
 80048ba:	4b3d      	ldr	r3, [pc, #244]	; (80049b0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3301      	adds	r3, #1
 80048c0:	4a3b      	ldr	r2, [pc, #236]	; (80049b0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80048c2:	6013      	str	r3, [r2, #0]
		if (AI5Pos>(SensorRollingAverages[2]-1))
 80048c4:	4b33      	ldr	r3, [pc, #204]	; (8004994 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80048c6:	889b      	ldrh	r3, [r3, #4]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	461a      	mov	r2, r3
 80048cc:	4b38      	ldr	r3, [pc, #224]	; (80049b0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d203      	bcs.n	80048dc <HAL_ADC_ConvCpltCallback+0x11c>
			AI5Pos = 0;
 80048d4:	4b36      	ldr	r3, [pc, #216]	; (80049b0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e009      	b.n	80048f0 <HAL_ADC_ConvCpltCallback+0x130>
		else if (AI5Written<AI5Pos)
 80048dc:	4b36      	ldr	r3, [pc, #216]	; (80049b8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4b33      	ldr	r3, [pc, #204]	; (80049b0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d203      	bcs.n	80048f0 <HAL_ADC_ConvCpltCallback+0x130>
			AI5Written = AI5Pos;
 80048e8:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a32      	ldr	r2, [pc, #200]	; (80049b8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80048ee:	6013      	str	r3, [r2, #0]
		ADCRawData[4][AI6Pos] = ADC2Data[1];
 80048f0:	4b32      	ldr	r3, [pc, #200]	; (80049bc <HAL_ADC_ConvCpltCallback+0x1fc>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a2f      	ldr	r2, [pc, #188]	; (80049b4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80048f6:	6852      	ldr	r2, [r2, #4]
 80048f8:	4925      	ldr	r1, [pc, #148]	; (8004990 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80048fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80048fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AI6Pos++;
 8004902:	4b2e      	ldr	r3, [pc, #184]	; (80049bc <HAL_ADC_ConvCpltCallback+0x1fc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3301      	adds	r3, #1
 8004908:	4a2c      	ldr	r2, [pc, #176]	; (80049bc <HAL_ADC_ConvCpltCallback+0x1fc>)
 800490a:	6013      	str	r3, [r2, #0]
		if (AI6Pos>(SensorRollingAverages[3]-1))
 800490c:	4b21      	ldr	r3, [pc, #132]	; (8004994 <HAL_ADC_ConvCpltCallback+0x1d4>)
 800490e:	88db      	ldrh	r3, [r3, #6]
 8004910:	3b01      	subs	r3, #1
 8004912:	461a      	mov	r2, r3
 8004914:	4b29      	ldr	r3, [pc, #164]	; (80049bc <HAL_ADC_ConvCpltCallback+0x1fc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d203      	bcs.n	8004924 <HAL_ADC_ConvCpltCallback+0x164>
			AI6Pos = 0;
 800491c:	4b27      	ldr	r3, [pc, #156]	; (80049bc <HAL_ADC_ConvCpltCallback+0x1fc>)
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e009      	b.n	8004938 <HAL_ADC_ConvCpltCallback+0x178>
		else if (AI6Written<AI6Pos)
 8004924:	4b26      	ldr	r3, [pc, #152]	; (80049c0 <HAL_ADC_ConvCpltCallback+0x200>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	4b24      	ldr	r3, [pc, #144]	; (80049bc <HAL_ADC_ConvCpltCallback+0x1fc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d203      	bcs.n	8004938 <HAL_ADC_ConvCpltCallback+0x178>
			AI6Written = AI6Pos;
 8004930:	4b22      	ldr	r3, [pc, #136]	; (80049bc <HAL_ADC_ConvCpltCallback+0x1fc>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a22      	ldr	r2, [pc, #136]	; (80049c0 <HAL_ADC_ConvCpltCallback+0x200>)
 8004936:	6013      	str	r3, [r2, #0]
		ADCRawData[5][IPos] = ADC1Data[2];
 8004938:	4b22      	ldr	r3, [pc, #136]	; (80049c4 <HAL_ADC_ConvCpltCallback+0x204>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a13      	ldr	r2, [pc, #76]	; (800498c <HAL_ADC_ConvCpltCallback+0x1cc>)
 800493e:	6892      	ldr	r2, [r2, #8]
 8004940:	4913      	ldr	r1, [pc, #76]	; (8004990 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8004942:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		IPos++;
 800494a:	4b1e      	ldr	r3, [pc, #120]	; (80049c4 <HAL_ADC_ConvCpltCallback+0x204>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3301      	adds	r3, #1
 8004950:	4a1c      	ldr	r2, [pc, #112]	; (80049c4 <HAL_ADC_ConvCpltCallback+0x204>)
 8004952:	6013      	str	r3, [r2, #0]
		if (IPos>(I_ROLLING_AVERAGE-1))
 8004954:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <HAL_ADC_ConvCpltCallback+0x204>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b7f      	cmp	r3, #127	; 0x7f
 800495a:	d903      	bls.n	8004964 <HAL_ADC_ConvCpltCallback+0x1a4>
			IPos = 0;
 800495c:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <HAL_ADC_ConvCpltCallback+0x204>)
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
}
 8004962:	e00c      	b.n	800497e <HAL_ADC_ConvCpltCallback+0x1be>
		else if (IWritten<IPos)
 8004964:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <HAL_ADC_ConvCpltCallback+0x208>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <HAL_ADC_ConvCpltCallback+0x204>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d206      	bcs.n	800497e <HAL_ADC_ConvCpltCallback+0x1be>
			IWritten = IPos;
 8004970:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <HAL_ADC_ConvCpltCallback+0x204>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a14      	ldr	r2, [pc, #80]	; (80049c8 <HAL_ADC_ConvCpltCallback+0x208>)
 8004976:	6013      	str	r3, [r2, #0]
}
 8004978:	e001      	b.n	800497e <HAL_ADC_ConvCpltCallback+0x1be>
		Error_Handler();
 800497a:	f000 fd0d 	bl	8005398 <Error_Handler>
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000f88 	.word	0x20000f88
 800498c:	20000ec0 	.word	0x20000ec0
 8004990:	20000138 	.word	0x20000138
 8004994:	20000d5c 	.word	0x20000d5c
 8004998:	20001088 	.word	0x20001088
 800499c:	20000f2c 	.word	0x20000f2c
 80049a0:	20000e44 	.word	0x20000e44
 80049a4:	20000134 	.word	0x20000134
 80049a8:	20000f8c 	.word	0x20000f8c
 80049ac:	50000100 	.word	0x50000100
 80049b0:	20000e3c 	.word	0x20000e3c
 80049b4:	20000f98 	.word	0x20000f98
 80049b8:	20000f84 	.word	0x20000f84
 80049bc:	20000f30 	.word	0x20000f30
 80049c0:	20000d38 	.word	0x20000d38
 80049c4:	20000f7c 	.word	0x20000f7c
 80049c8:	20000f38 	.word	0x20000f38

080049cc <Can_Send_Analog>:


void Can_Send_Analog()
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b094      	sub	sp, #80	; 0x50
 80049d0:	af00      	add	r7, sp, #0
	if(!(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) > 0))
 80049d2:	4875      	ldr	r0, [pc, #468]	; (8004ba8 <Can_Send_Analog+0x1dc>)
 80049d4:	f7fd fe1a 	bl	800260c <HAL_FDCAN_GetTxFifoFreeLevel>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d103      	bne.n	80049e6 <Can_Send_Analog+0x1a>
	{
		Set_Error(ERR_CAN_FIFO_FULL);
 80049de:	2001      	movs	r0, #1
 80049e0:	f000 f8f4 	bl	8004bcc <Set_Error>
		return;
 80049e4:	e0dd      	b.n	8004ba2 <Can_Send_Analog+0x1d6>
	}

	FDCAN_TxHeaderTypeDef TxHeader;

	TxHeader.Identifier = 0x90;
 80049e6:	2390      	movs	r3, #144	; 0x90
 80049e8:	617b      	str	r3, [r7, #20]
	TxHeader.DataLength = (8<<16); //<<16 makes storing the number of bytes not require a switch statement for classic can
 80049ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80049ee:	623b      	str	r3, [r7, #32]

	//clear can tx data so that data from incorrectly configured message is 0
	for(uint32_t i=0; i<8; i++)
 80049f0:	2300      	movs	r3, #0
 80049f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049f4:	e007      	b.n	8004a06 <Can_Send_Analog+0x3a>
	{
		CANTxData[i]=0;
 80049f6:	4a6d      	ldr	r2, [pc, #436]	; (8004bac <Can_Send_Analog+0x1e0>)
 80049f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fa:	4413      	add	r3, r2
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 8004a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a02:	3301      	adds	r3, #1
 8004a04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a08:	2b07      	cmp	r3, #7
 8004a0a:	d9f4      	bls.n	80049f6 <Can_Send_Analog+0x2a>
	}

	uint32_t raws[4] = {0};
 8004a0c:	1d3b      	adds	r3, r7, #4
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	605a      	str	r2, [r3, #4]
 8004a14:	609a      	str	r2, [r3, #8]
 8004a16:	60da      	str	r2, [r3, #12]

	for(uint32_t i=0; i<ROLLING_AVERAGE_MAX; i++)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a1c:	e037      	b.n	8004a8e <Can_Send_Analog+0xc2>
	{
		if (i<=AI2Written)
 8004a1e:	4b64      	ldr	r3, [pc, #400]	; (8004bb0 <Can_Send_Analog+0x1e4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d806      	bhi.n	8004a36 <Can_Send_Analog+0x6a>
		{
			raws[0]+=ADCRawData[0][i];
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	4962      	ldr	r1, [pc, #392]	; (8004bb4 <Can_Send_Analog+0x1e8>)
 8004a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a32:	4413      	add	r3, r2
 8004a34:	607b      	str	r3, [r7, #4]
		}
		if (i<=AI3Written)
 8004a36:	4b60      	ldr	r3, [pc, #384]	; (8004bb8 <Can_Send_Analog+0x1ec>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d807      	bhi.n	8004a50 <Can_Send_Analog+0x84>
		{
			raws[1]+=ADCRawData[1][i];
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	495c      	ldr	r1, [pc, #368]	; (8004bb4 <Can_Send_Analog+0x1e8>)
 8004a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a46:	3380      	adds	r3, #128	; 0x80
 8004a48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]
		}
		if (i<=AI5Written)
 8004a50:	4b5a      	ldr	r3, [pc, #360]	; (8004bbc <Can_Send_Analog+0x1f0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d808      	bhi.n	8004a6c <Can_Send_Analog+0xa0>
		{
			raws[2]+=ADCRawData[3][i];
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4955      	ldr	r1, [pc, #340]	; (8004bb4 <Can_Send_Analog+0x1e8>)
 8004a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a60:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004a64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a68:	4413      	add	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
		}
		if (i<=AI6Written)
 8004a6c:	4b54      	ldr	r3, [pc, #336]	; (8004bc0 <Can_Send_Analog+0x1f4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d808      	bhi.n	8004a88 <Can_Send_Analog+0xbc>
		{
			raws[3]+=ADCRawData[4][i];
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	494e      	ldr	r1, [pc, #312]	; (8004bb4 <Can_Send_Analog+0x1e8>)
 8004a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004a80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a84:	4413      	add	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0; i<ROLLING_AVERAGE_MAX; i++)
 8004a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a90:	2b7f      	cmp	r3, #127	; 0x7f
 8004a92:	d9c4      	bls.n	8004a1e <Can_Send_Analog+0x52>
		}
	}
	raws[0]/=(AI2Written+1); raws[1]/=(AI3Written+1); raws[2]/=(AI5Written+1); raws[3]/=(AI6Written+1);
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	4b46      	ldr	r3, [pc, #280]	; (8004bb0 <Can_Send_Analog+0x1e4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	4b44      	ldr	r3, [pc, #272]	; (8004bb8 <Can_Send_Analog+0x1ec>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	60bb      	str	r3, [r7, #8]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4b42      	ldr	r3, [pc, #264]	; (8004bbc <Can_Send_Analog+0x1f0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <Can_Send_Analog+0x1f4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	613b      	str	r3, [r7, #16]

	uint32_t bytePos=0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint32_t i=0; i<4; i++)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ad4:	e044      	b.n	8004b60 <Can_Send_Analog+0x194>
	{
		if (AnalogSensorBytes[i])
 8004ad6:	4a3b      	ldr	r2, [pc, #236]	; (8004bc4 <Can_Send_Analog+0x1f8>)
 8004ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ada:	4413      	add	r3, r2
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d038      	beq.n	8004b54 <Can_Send_Analog+0x188>
		{
			uint32_t transmit=TF_Select(AnalogSensorBytes[i], TransferFunctions[i], raws[i]);
 8004ae2:	4a38      	ldr	r2, [pc, #224]	; (8004bc4 <Can_Send_Analog+0x1f8>)
 8004ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae6:	4413      	add	r3, r2
 8004ae8:	7818      	ldrb	r0, [r3, #0]
 8004aea:	4a37      	ldr	r2, [pc, #220]	; (8004bc8 <Can_Send_Analog+0x1fc>)
 8004aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aee:	4413      	add	r3, r2
 8004af0:	7819      	ldrb	r1, [r3, #0]
 8004af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004afa:	4413      	add	r3, r2
 8004afc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	f000 fe90 	bl	8005828 <TF_Select>
 8004b08:	63b8      	str	r0, [r7, #56]	; 0x38
			for(uint32_t j=0; j<AnalogSensorBytes[i]; j++)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b0e:	e019      	b.n	8004b44 <Can_Send_Analog+0x178>
			{
				CANTxData[bytePos] = transmit >> ((AnalogSensorBytes[i]-(j+1))*8);
 8004b10:	4a2c      	ldr	r2, [pc, #176]	; (8004bc4 <Can_Send_Analog+0x1f8>)
 8004b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b14:	4413      	add	r3, r2
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004b22:	3b01      	subs	r3, #1
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2c:	b2d9      	uxtb	r1, r3
 8004b2e:	4a1f      	ldr	r2, [pc, #124]	; (8004bac <Can_Send_Analog+0x1e0>)
 8004b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b32:	4413      	add	r3, r2
 8004b34:	460a      	mov	r2, r1
 8004b36:	701a      	strb	r2, [r3, #0]
				bytePos++;
 8004b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	647b      	str	r3, [r7, #68]	; 0x44
			for(uint32_t j=0; j<AnalogSensorBytes[i]; j++)
 8004b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b40:	3301      	adds	r3, #1
 8004b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b44:	4a1f      	ldr	r2, [pc, #124]	; (8004bc4 <Can_Send_Analog+0x1f8>)
 8004b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b48:	4413      	add	r3, r2
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d3dd      	bcc.n	8004b10 <Can_Send_Analog+0x144>
			}
		}

		if (bytePos>7)
 8004b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b56:	2b07      	cmp	r3, #7
 8004b58:	d806      	bhi.n	8004b68 <Can_Send_Analog+0x19c>
	for(uint32_t i=0; i<4; i++)
 8004b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8004b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d9b7      	bls.n	8004ad6 <Can_Send_Analog+0x10a>
 8004b66:	e000      	b.n	8004b6a <Can_Send_Analog+0x19e>
		{
			break;
 8004b68:	bf00      	nop
		}
	}

	TxHeader.IdType = FDCAN_STANDARD_ID;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61bb      	str	r3, [r7, #24]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004b72:	2300      	movs	r3, #0
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8004b76:	2300      	movs	r3, #0
 8004b78:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	633b      	str	r3, [r7, #48]	; 0x30
	TxHeader.MessageMarker = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34

	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 8004b86:	f107 0314 	add.w	r3, r7, #20
 8004b8a:	4a08      	ldr	r2, [pc, #32]	; (8004bac <Can_Send_Analog+0x1e0>)
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4806      	ldr	r0, [pc, #24]	; (8004ba8 <Can_Send_Analog+0x1dc>)
 8004b90:	f7fd fc1e 	bl	80023d0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <Can_Send_Analog+0x1d6>
	{
		Set_Error(ERR_SEND_FAILED);
 8004b9a:	2002      	movs	r0, #2
 8004b9c:	f000 f816 	bl	8004bcc <Set_Error>
		return;
 8004ba0:	bf00      	nop
	}
}
 8004ba2:	3750      	adds	r7, #80	; 0x50
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20000dd4 	.word	0x20000dd4
 8004bac:	20000f90 	.word	0x20000f90
 8004bb0:	20001088 	.word	0x20001088
 8004bb4:	20000138 	.word	0x20000138
 8004bb8:	20000e44 	.word	0x20000e44
 8004bbc:	20000f84 	.word	0x20000f84
 8004bc0:	20000d38 	.word	0x20000d38
 8004bc4:	20000f34 	.word	0x20000f34
 8004bc8:	20000ebc 	.word	0x20000ebc

08004bcc <Set_Error>:
		return;
	}
}

void Set_Error(uint32_t error)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	canErrors[(error/32)]  |= (1<<(error%32));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	4a10      	ldr	r2, [pc, #64]	; (8004c1c <Set_Error+0x50>)
 8004bda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	f001 011f 	and.w	r1, r1, #31
 8004be4:	2001      	movs	r0, #1
 8004be6:	fa00 f101 	lsl.w	r1, r0, r1
 8004bea:	430a      	orrs	r2, r1
 8004bec:	490b      	ldr	r1, [pc, #44]	; (8004c1c <Set_Error+0x50>)
 8004bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	canErrorToTransmit |= (1<<(error/32));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	b25a      	sxtb	r2, r3
 8004bfe:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <Set_Error+0x54>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	b25b      	sxtb	r3, r3
 8004c04:	4313      	orrs	r3, r2
 8004c06:	b25b      	sxtb	r3, r3
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <Set_Error+0x54>)
 8004c0c:	701a      	strb	r2, [r3, #0]
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	20000d3c 	.word	0x20000d3c
 8004c20:	20000e42 	.word	0x20000e42

08004c24 <Send_Error>:

void Send_Error(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	; 0x28
 8004c28:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<8; i++)
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2e:	e06d      	b.n	8004d0c <Send_Error+0xe8>
	{
		if (canErrorToTransmit&(1<<i))
 8004c30:	4b39      	ldr	r3, [pc, #228]	; (8004d18 <Send_Error+0xf4>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	fa42 f303 	asr.w	r3, r2, r3
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d060      	beq.n	8004d06 <Send_Error+0xe2>
		{
			if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) > 0)
 8004c44:	4835      	ldr	r0, [pc, #212]	; (8004d1c <Send_Error+0xf8>)
 8004c46:	f7fd fce1 	bl	800260c <HAL_FDCAN_GetTxFifoFreeLevel>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d05a      	beq.n	8004d06 <Send_Error+0xe2>
			{
				FDCAN_TxHeaderTypeDef TxHeader;

				TxHeader.Identifier = CANID_ERROR;
 8004c50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004c54:	603b      	str	r3, [r7, #0]
				TxHeader.DataLength = FDCAN_DLC_BYTES_6;
 8004c56:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8004c5a:	60fb      	str	r3, [r7, #12]

				CANTxData[0]=ID;
 8004c5c:	4b30      	ldr	r3, [pc, #192]	; (8004d20 <Send_Error+0xfc>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	701a      	strb	r2, [r3, #0]
				CANTxData[1]=i;
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <Send_Error+0xfc>)
 8004c68:	705a      	strb	r2, [r3, #1]
				CANTxData[2]=(canErrors[i]>>24)&0xFF;
 8004c6a:	4a2e      	ldr	r2, [pc, #184]	; (8004d24 <Send_Error+0x100>)
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c72:	0e1b      	lsrs	r3, r3, #24
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	4b2a      	ldr	r3, [pc, #168]	; (8004d20 <Send_Error+0xfc>)
 8004c78:	709a      	strb	r2, [r3, #2]
				CANTxData[3]=(canErrors[i]>>16)&0xFF;
 8004c7a:	4a2a      	ldr	r2, [pc, #168]	; (8004d24 <Send_Error+0x100>)
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c82:	0c1b      	lsrs	r3, r3, #16
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	4b26      	ldr	r3, [pc, #152]	; (8004d20 <Send_Error+0xfc>)
 8004c88:	70da      	strb	r2, [r3, #3]
				CANTxData[4]=(canErrors[i]>>8)&0xFF;
 8004c8a:	4a26      	ldr	r2, [pc, #152]	; (8004d24 <Send_Error+0x100>)
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	4b22      	ldr	r3, [pc, #136]	; (8004d20 <Send_Error+0xfc>)
 8004c98:	711a      	strb	r2, [r3, #4]
				CANTxData[5]=(canErrors[i]>>0)&0xFF;
 8004c9a:	4a22      	ldr	r2, [pc, #136]	; (8004d24 <Send_Error+0x100>)
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	4b1e      	ldr	r3, [pc, #120]	; (8004d20 <Send_Error+0xfc>)
 8004ca6:	715a      	strb	r2, [r3, #5]

				TxHeader.IdType = FDCAN_STANDARD_ID;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	607b      	str	r3, [r7, #4]
				TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60bb      	str	r3, [r7, #8]
				TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	613b      	str	r3, [r7, #16]
				TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
				TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61bb      	str	r3, [r7, #24]
				TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61fb      	str	r3, [r7, #28]
				TxHeader.MessageMarker = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	623b      	str	r3, [r7, #32]

				if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 8004cc4:	463b      	mov	r3, r7
 8004cc6:	4a16      	ldr	r2, [pc, #88]	; (8004d20 <Send_Error+0xfc>)
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4814      	ldr	r0, [pc, #80]	; (8004d1c <Send_Error+0xf8>)
 8004ccc:	f7fd fb80 	bl	80023d0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <Send_Error+0xba>
				{
					Set_Error(ERR_SEND_FAILED);
 8004cd6:	2002      	movs	r0, #2
 8004cd8:	f7ff ff78 	bl	8004bcc <Set_Error>
 8004cdc:	e019      	b.n	8004d12 <Send_Error+0xee>
					return;
				}
				else
				{
					//if we sent the error message clear the error so that if it only occurs once the error is not sent continuously
					canErrors[i]=0;
 8004cde:	4a11      	ldr	r2, [pc, #68]	; (8004d24 <Send_Error+0x100>)
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					canErrorToTransmit &= ~(1<<i);
 8004ce8:	2201      	movs	r2, #1
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	b25b      	sxtb	r3, r3
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	b25a      	sxtb	r2, r3
 8004cf6:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <Send_Error+0xf4>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	b25b      	sxtb	r3, r3
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	b25b      	sxtb	r3, r3
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <Send_Error+0xf4>)
 8004d04:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	3301      	adds	r3, #1
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	2b07      	cmp	r3, #7
 8004d10:	d98e      	bls.n	8004c30 <Send_Error+0xc>
				}
			}
		}
	}
}
 8004d12:	3728      	adds	r7, #40	; 0x28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20000e42 	.word	0x20000e42
 8004d1c:	20000dd4 	.word	0x20000dd4
 8004d20:	20000f90 	.word	0x20000f90
 8004d24:	20000d3c 	.word	0x20000d3c

08004d28 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b0a4      	sub	sp, #144	; 0x90
 8004d2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d32:	2238      	movs	r2, #56	; 0x38
 8004d34:	2100      	movs	r1, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	f001 f8bc 	bl	8005eb4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d4c:	463b      	mov	r3, r7
 8004d4e:	2244      	movs	r2, #68	; 0x44
 8004d50:	2100      	movs	r1, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	f001 f8ae 	bl	8005eb4 <memset>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f7fe f977 	bl	800304c <HAL_PWREx_ControlVoltageScaling>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004d62:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004d66:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004d70:	2304      	movs	r3, #4
 8004d72:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8004d74:	2355      	movs	r3, #85	; 0x55
 8004d76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004d80:	2302      	movs	r3, #2
 8004d82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004d86:	2302      	movs	r3, #2
 8004d88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fe f9ff 	bl	8003194 <HAL_RCC_OscConfig>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8004d9c:	f000 fafc 	bl	8005398 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8004da0:	230f      	movs	r3, #15
 8004da2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004da4:	2303      	movs	r3, #3
 8004da6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004da8:	2300      	movs	r3, #0
 8004daa:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004dac:	2300      	movs	r3, #0
 8004dae:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004db0:	2300      	movs	r3, #0
 8004db2:	657b      	str	r3, [r7, #84]	; 0x54
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8004db4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004db8:	2108      	movs	r1, #8
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe fd02 	bl	80037c4 <HAL_RCC_ClockConfig>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8004dc6:	f000 fae7 	bl	8005398 <Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
 8004dca:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8004dce:	603b      	str	r3, [r7, #0]
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004dd4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dda:	463b      	mov	r3, r7
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fe fed5 	bl	8003b8c <HAL_RCCEx_PeriphCLKConfig>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8004de8:	f000 fad6 	bl	8005398 <Error_Handler>
	}
}
 8004dec:	bf00      	nop
 8004dee:	3790      	adds	r7, #144	; 0x90
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dfa:	f107 030c 	add.w	r3, r7, #12
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	605a      	str	r2, [r3, #4]
 8004e04:	609a      	str	r2, [r3, #8]
 8004e06:	60da      	str	r2, [r3, #12]
 8004e08:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004e0a:	4b19      	ldr	r3, [pc, #100]	; (8004e70 <MX_GPIO_Init+0x7c>)
 8004e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0e:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <MX_GPIO_Init+0x7c>)
 8004e10:	f043 0320 	orr.w	r3, r3, #32
 8004e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e16:	4b16      	ldr	r3, [pc, #88]	; (8004e70 <MX_GPIO_Init+0x7c>)
 8004e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	60bb      	str	r3, [r7, #8]
 8004e20:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004e22:	4b13      	ldr	r3, [pc, #76]	; (8004e70 <MX_GPIO_Init+0x7c>)
 8004e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e26:	4a12      	ldr	r2, [pc, #72]	; (8004e70 <MX_GPIO_Init+0x7c>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e2e:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <MX_GPIO_Init+0x7c>)
 8004e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	607b      	str	r3, [r7, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e44:	f7fe f8d0 	bl	8002fe8 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004e48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e5a:	f107 030c 	add.w	r3, r7, #12
 8004e5e:	4619      	mov	r1, r3
 8004e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e64:	f7fd ff3e 	bl	8002ce4 <HAL_GPIO_Init>
}
 8004e68:	bf00      	nop
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40021000 	.word	0x40021000

08004e74 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004e7a:	4b16      	ldr	r3, [pc, #88]	; (8004ed4 <MX_DMA_Init+0x60>)
 8004e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7e:	4a15      	ldr	r2, [pc, #84]	; (8004ed4 <MX_DMA_Init+0x60>)
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	6493      	str	r3, [r2, #72]	; 0x48
 8004e86:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <MX_DMA_Init+0x60>)
 8004e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	607b      	str	r3, [r7, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004e92:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <MX_DMA_Init+0x60>)
 8004e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e96:	4a0f      	ldr	r2, [pc, #60]	; (8004ed4 <MX_DMA_Init+0x60>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	6493      	str	r3, [r2, #72]	; 0x48
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <MX_DMA_Init+0x60>)
 8004ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2100      	movs	r1, #0
 8004eae:	200b      	movs	r0, #11
 8004eb0:	f7fc fda1 	bl	80019f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004eb4:	200b      	movs	r0, #11
 8004eb6:	f7fc fdb8 	bl	8001a2a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	200c      	movs	r0, #12
 8004ec0:	f7fc fd99 	bl	80019f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004ec4:	200c      	movs	r0, #12
 8004ec6:	f7fc fdb0 	bl	8001a2a <HAL_NVIC_EnableIRQ>
}
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40021000 	.word	0x40021000

08004ed8 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08c      	sub	sp, #48	; 0x30
 8004edc:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode = {0};
 8004ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	605a      	str	r2, [r3, #4]
 8004ee8:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8004eea:	1d3b      	adds	r3, r7, #4
 8004eec:	2220      	movs	r2, #32
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 ffdf 	bl	8005eb4 <memset>

	hadc1.Instance = ADC1;
 8004ef6:	4b4e      	ldr	r3, [pc, #312]	; (8005030 <MX_ADC1_Init+0x158>)
 8004ef8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004efc:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8004efe:	4b4c      	ldr	r3, [pc, #304]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004f04:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004f06:	4b4a      	ldr	r3, [pc, #296]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f0c:	4b48      	ldr	r3, [pc, #288]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8004f12:	4b47      	ldr	r3, [pc, #284]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004f18:	4b45      	ldr	r3, [pc, #276]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004f1e:	4b44      	ldr	r3, [pc, #272]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f20:	2204      	movs	r2, #4
 8004f22:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8004f24:	4b42      	ldr	r3, [pc, #264]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8004f2a:	4b41      	ldr	r3, [pc, #260]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	775a      	strb	r2, [r3, #29]
	if (MeasureTemperature) { hadc1.Init.NbrOfConversion = 3; }
 8004f30:	4b40      	ldr	r3, [pc, #256]	; (8005034 <MX_ADC1_Init+0x15c>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <MX_ADC1_Init+0x68>
 8004f38:	4b3d      	ldr	r3, [pc, #244]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f3a:	2203      	movs	r2, #3
 8004f3c:	621a      	str	r2, [r3, #32]
 8004f3e:	e002      	b.n	8004f46 <MX_ADC1_Init+0x6e>
	else { hadc1.Init.NbrOfConversion = 2; }
 8004f40:	4b3b      	ldr	r3, [pc, #236]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f42:	2202      	movs	r2, #2
 8004f44:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004f46:	4b3a      	ldr	r3, [pc, #232]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f4e:	4b38      	ldr	r3, [pc, #224]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f54:	4b36      	ldr	r3, [pc, #216]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8004f5a:	4b35      	ldr	r3, [pc, #212]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004f62:	4b33      	ldr	r3, [pc, #204]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f68:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8004f6a:	4b31      	ldr	r3, [pc, #196]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004f72:	482f      	ldr	r0, [pc, #188]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f74:	f7fb fc14 	bl	80007a0 <HAL_ADC_Init>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <MX_ADC1_Init+0xaa>
	{
		Error_Handler();
 8004f7e:	f000 fa0b 	bl	8005398 <Error_Handler>
	}

	multimode.Mode = ADC_MODE_INDEPENDENT;
 8004f82:	2300      	movs	r3, #0
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8004f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_12CYCLES;
 8004f8c:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f96:	4619      	mov	r1, r3
 8004f98:	4825      	ldr	r0, [pc, #148]	; (8005030 <MX_ADC1_Init+0x158>)
 8004f9a:	f7fc fbb1 	bl	8001700 <HAL_ADCEx_MultiModeConfigChannel>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <MX_ADC1_Init+0xd0>
	{
		Error_Handler();
 8004fa4:	f000 f9f8 	bl	8005398 <Error_Handler>
	}


	sConfig.Channel = ADC_CHANNEL_3; //AI2, PA2
 8004fa8:	4b23      	ldr	r3, [pc, #140]	; (8005038 <MX_ADC1_Init+0x160>)
 8004faa:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004fac:	2306      	movs	r3, #6
 8004fae:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004fb0:	2307      	movs	r3, #7
 8004fb2:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004fb4:	237f      	movs	r3, #127	; 0x7f
 8004fb6:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004fb8:	2304      	movs	r3, #4
 8004fba:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004fc0:	1d3b      	adds	r3, r7, #4
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	481a      	ldr	r0, [pc, #104]	; (8005030 <MX_ADC1_Init+0x158>)
 8004fc6:	f7fb fe3b 	bl	8000c40 <HAL_ADC_ConfigChannel>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <MX_ADC1_Init+0xfc>
	{
		Error_Handler();
 8004fd0:	f000 f9e2 	bl	8005398 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_4; //AI3, PA3
 8004fd4:	4b19      	ldr	r3, [pc, #100]	; (800503c <MX_ADC1_Init+0x164>)
 8004fd6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8004fd8:	230c      	movs	r3, #12
 8004fda:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004fdc:	1d3b      	adds	r3, r7, #4
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4813      	ldr	r0, [pc, #76]	; (8005030 <MX_ADC1_Init+0x158>)
 8004fe2:	f7fb fe2d 	bl	8000c40 <HAL_ADC_ConfigChannel>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <MX_ADC1_Init+0x118>
	{
		Error_Handler();
 8004fec:	f000 f9d4 	bl	8005398 <Error_Handler>
	}

	if (MeasureTemperature)
 8004ff0:	4b10      	ldr	r3, [pc, #64]	; (8005034 <MX_ADC1_Init+0x15c>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00d      	beq.n	8005014 <MX_ADC1_Init+0x13c>
	{
		sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1; //internal temperature
 8004ff8:	4b11      	ldr	r3, [pc, #68]	; (8005040 <MX_ADC1_Init+0x168>)
 8004ffa:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_3;
 8004ffc:	2312      	movs	r3, #18
 8004ffe:	60bb      	str	r3, [r7, #8]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005000:	1d3b      	adds	r3, r7, #4
 8005002:	4619      	mov	r1, r3
 8005004:	480a      	ldr	r0, [pc, #40]	; (8005030 <MX_ADC1_Init+0x158>)
 8005006:	f7fb fe1b 	bl	8000c40 <HAL_ADC_ConfigChannel>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <MX_ADC1_Init+0x13c>
		{
			Error_Handler();
 8005010:	f000 f9c2 	bl	8005398 <Error_Handler>
		}
	}

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8005014:	217f      	movs	r1, #127	; 0x7f
 8005016:	4806      	ldr	r0, [pc, #24]	; (8005030 <MX_ADC1_Init+0x158>)
 8005018:	f7fc fb10 	bl	800163c <HAL_ADCEx_Calibration_Start>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <MX_ADC1_Init+0x14e>
	{
		Error_Handler();
 8005022:	f000 f9b9 	bl	8005398 <Error_Handler>
	}
}
 8005026:	bf00      	nop
 8005028:	3730      	adds	r7, #48	; 0x30
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000e4c 	.word	0x20000e4c
 8005034:	20000dd0 	.word	0x20000dd0
 8005038:	0c900008 	.word	0x0c900008
 800503c:	10c00010 	.word	0x10c00010
 8005040:	c3210000 	.word	0xc3210000

08005044 <MX_ADC2_Init>:

static void MX_ADC2_Init(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800504a:	463b      	mov	r3, r7
 800504c:	2220      	movs	r2, #32
 800504e:	2100      	movs	r1, #0
 8005050:	4618      	mov	r0, r3
 8005052:	f000 ff2f 	bl	8005eb4 <memset>

	hadc2.Instance = ADC2;
 8005056:	4b44      	ldr	r3, [pc, #272]	; (8005168 <MX_ADC2_Init+0x124>)
 8005058:	4a44      	ldr	r2, [pc, #272]	; (800516c <MX_ADC2_Init+0x128>)
 800505a:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800505c:	4b42      	ldr	r3, [pc, #264]	; (8005168 <MX_ADC2_Init+0x124>)
 800505e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005062:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005064:	4b40      	ldr	r3, [pc, #256]	; (8005168 <MX_ADC2_Init+0x124>)
 8005066:	2200      	movs	r2, #0
 8005068:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800506a:	4b3f      	ldr	r3, [pc, #252]	; (8005168 <MX_ADC2_Init+0x124>)
 800506c:	2200      	movs	r2, #0
 800506e:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8005070:	4b3d      	ldr	r3, [pc, #244]	; (8005168 <MX_ADC2_Init+0x124>)
 8005072:	2200      	movs	r2, #0
 8005074:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005076:	4b3c      	ldr	r3, [pc, #240]	; (8005168 <MX_ADC2_Init+0x124>)
 8005078:	2201      	movs	r2, #1
 800507a:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800507c:	4b3a      	ldr	r3, [pc, #232]	; (8005168 <MX_ADC2_Init+0x124>)
 800507e:	2204      	movs	r2, #4
 8005080:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8005082:	4b39      	ldr	r3, [pc, #228]	; (8005168 <MX_ADC2_Init+0x124>)
 8005084:	2200      	movs	r2, #0
 8005086:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8005088:	4b37      	ldr	r3, [pc, #220]	; (8005168 <MX_ADC2_Init+0x124>)
 800508a:	2201      	movs	r2, #1
 800508c:	775a      	strb	r2, [r3, #29]
	if (MeasureDriverCurrent) { hadc2.Init.NbrOfConversion = 3; }
 800508e:	4b38      	ldr	r3, [pc, #224]	; (8005170 <MX_ADC2_Init+0x12c>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <MX_ADC2_Init+0x5a>
 8005096:	4b34      	ldr	r3, [pc, #208]	; (8005168 <MX_ADC2_Init+0x124>)
 8005098:	2203      	movs	r2, #3
 800509a:	621a      	str	r2, [r3, #32]
 800509c:	e002      	b.n	80050a4 <MX_ADC2_Init+0x60>
	else { hadc2.Init.NbrOfConversion = 2; }
 800509e:	4b32      	ldr	r3, [pc, #200]	; (8005168 <MX_ADC2_Init+0x124>)
 80050a0:	2202      	movs	r2, #2
 80050a2:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80050a4:	4b30      	ldr	r3, [pc, #192]	; (8005168 <MX_ADC2_Init+0x124>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80050ac:	4b2e      	ldr	r3, [pc, #184]	; (8005168 <MX_ADC2_Init+0x124>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80050b2:	4b2d      	ldr	r3, [pc, #180]	; (8005168 <MX_ADC2_Init+0x124>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	; 0x30
	hadc2.Init.DMAContinuousRequests = ENABLE;
 80050b8:	4b2b      	ldr	r3, [pc, #172]	; (8005168 <MX_ADC2_Init+0x124>)
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80050c0:	4b29      	ldr	r3, [pc, #164]	; (8005168 <MX_ADC2_Init+0x124>)
 80050c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050c6:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 80050c8:	4b27      	ldr	r3, [pc, #156]	; (8005168 <MX_ADC2_Init+0x124>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80050d0:	4825      	ldr	r0, [pc, #148]	; (8005168 <MX_ADC2_Init+0x124>)
 80050d2:	f7fb fb65 	bl	80007a0 <HAL_ADC_Init>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <MX_ADC2_Init+0x9c>
	{
		Error_Handler();
 80050dc:	f000 f95c 	bl	8005398 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_13; //AI5, PA5
 80050e0:	4b24      	ldr	r3, [pc, #144]	; (8005174 <MX_ADC2_Init+0x130>)
 80050e2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80050e4:	2306      	movs	r3, #6
 80050e6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80050e8:	2307      	movs	r3, #7
 80050ea:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80050ec:	237f      	movs	r3, #127	; 0x7f
 80050ee:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80050f0:	2304      	movs	r3, #4
 80050f2:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80050f8:	463b      	mov	r3, r7
 80050fa:	4619      	mov	r1, r3
 80050fc:	481a      	ldr	r0, [pc, #104]	; (8005168 <MX_ADC2_Init+0x124>)
 80050fe:	f7fb fd9f 	bl	8000c40 <HAL_ADC_ConfigChannel>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <MX_ADC2_Init+0xc8>
	{
		Error_Handler();
 8005108:	f000 f946 	bl	8005398 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_3; //AI6, PA6
 800510c:	4b1a      	ldr	r3, [pc, #104]	; (8005178 <MX_ADC2_Init+0x134>)
 800510e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8005110:	230c      	movs	r3, #12
 8005112:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005114:	463b      	mov	r3, r7
 8005116:	4619      	mov	r1, r3
 8005118:	4813      	ldr	r0, [pc, #76]	; (8005168 <MX_ADC2_Init+0x124>)
 800511a:	f7fb fd91 	bl	8000c40 <HAL_ADC_ConfigChannel>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <MX_ADC2_Init+0xe4>
	{
		Error_Handler();
 8005124:	f000 f938 	bl	8005398 <Error_Handler>
	}

	if (MeasureDriverCurrent)
 8005128:	4b11      	ldr	r3, [pc, #68]	; (8005170 <MX_ADC2_Init+0x12c>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00d      	beq.n	800514c <MX_ADC2_Init+0x108>
	{
		sConfig.Channel = ADC_CHANNEL_4; //current feedback from driver
 8005130:	4b12      	ldr	r3, [pc, #72]	; (800517c <MX_ADC2_Init+0x138>)
 8005132:	603b      	str	r3, [r7, #0]
		sConfig.Rank = ADC_REGULAR_RANK_3;
 8005134:	2312      	movs	r3, #18
 8005136:	607b      	str	r3, [r7, #4]
		if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005138:	463b      	mov	r3, r7
 800513a:	4619      	mov	r1, r3
 800513c:	480a      	ldr	r0, [pc, #40]	; (8005168 <MX_ADC2_Init+0x124>)
 800513e:	f7fb fd7f 	bl	8000c40 <HAL_ADC_ConfigChannel>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <MX_ADC2_Init+0x108>
		{
			Error_Handler();
 8005148:	f000 f926 	bl	8005398 <Error_Handler>
		}
	}

	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 800514c:	217f      	movs	r1, #127	; 0x7f
 800514e:	4806      	ldr	r0, [pc, #24]	; (8005168 <MX_ADC2_Init+0x124>)
 8005150:	f7fc fa74 	bl	800163c <HAL_ADCEx_Calibration_Start>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <MX_ADC2_Init+0x11a>
	{
		Error_Handler();
 800515a:	f000 f91d 	bl	8005398 <Error_Handler>
	}
}
 800515e:	bf00      	nop
 8005160:	3720      	adds	r7, #32
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000d64 	.word	0x20000d64
 800516c:	50000100 	.word	0x50000100
 8005170:	20000f80 	.word	0x20000f80
 8005174:	36902000 	.word	0x36902000
 8005178:	0c900008 	.word	0x0c900008
 800517c:	10c00010 	.word	0x10c00010

08005180 <MX_FDCAN_Init>:

static void MX_FDCAN_Init(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef	sFilterConfig;

	hfdcan.Instance = FDCAN1;
 8005186:	4b46      	ldr	r3, [pc, #280]	; (80052a0 <MX_FDCAN_Init+0x120>)
 8005188:	4a46      	ldr	r2, [pc, #280]	; (80052a4 <MX_FDCAN_Init+0x124>)
 800518a:	601a      	str	r2, [r3, #0]
	hfdcan.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800518c:	4b44      	ldr	r3, [pc, #272]	; (80052a0 <MX_FDCAN_Init+0x120>)
 800518e:	2200      	movs	r2, #0
 8005190:	605a      	str	r2, [r3, #4]
	hfdcan.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8005192:	4b43      	ldr	r3, [pc, #268]	; (80052a0 <MX_FDCAN_Init+0x120>)
 8005194:	2200      	movs	r2, #0
 8005196:	609a      	str	r2, [r3, #8]
	hfdcan.Init.Mode = FDCAN_MODE_NORMAL;
 8005198:	4b41      	ldr	r3, [pc, #260]	; (80052a0 <MX_FDCAN_Init+0x120>)
 800519a:	2200      	movs	r2, #0
 800519c:	60da      	str	r2, [r3, #12]
	hfdcan.Init.AutoRetransmission = DISABLE;
 800519e:	4b40      	ldr	r3, [pc, #256]	; (80052a0 <MX_FDCAN_Init+0x120>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	741a      	strb	r2, [r3, #16]
	hfdcan.Init.TransmitPause = DISABLE;
 80051a4:	4b3e      	ldr	r3, [pc, #248]	; (80052a0 <MX_FDCAN_Init+0x120>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	745a      	strb	r2, [r3, #17]
	hfdcan.Init.ProtocolException = DISABLE;
 80051aa:	4b3d      	ldr	r3, [pc, #244]	; (80052a0 <MX_FDCAN_Init+0x120>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	749a      	strb	r2, [r3, #18]
	hfdcan.Init.NominalPrescaler = 1;
 80051b0:	4b3b      	ldr	r3, [pc, #236]	; (80052a0 <MX_FDCAN_Init+0x120>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	615a      	str	r2, [r3, #20]
	hfdcan.Init.NominalSyncJumpWidth = 1;
 80051b6:	4b3a      	ldr	r3, [pc, #232]	; (80052a0 <MX_FDCAN_Init+0x120>)
 80051b8:	2201      	movs	r2, #1
 80051ba:	619a      	str	r2, [r3, #24]
	hfdcan.Init.NominalTimeSeg1 = 13;
 80051bc:	4b38      	ldr	r3, [pc, #224]	; (80052a0 <MX_FDCAN_Init+0x120>)
 80051be:	220d      	movs	r2, #13
 80051c0:	61da      	str	r2, [r3, #28]
	hfdcan.Init.NominalTimeSeg2 = 2;
 80051c2:	4b37      	ldr	r3, [pc, #220]	; (80052a0 <MX_FDCAN_Init+0x120>)
 80051c4:	2202      	movs	r2, #2
 80051c6:	621a      	str	r2, [r3, #32]
	hfdcan.Init.DataPrescaler = 1;
 80051c8:	4b35      	ldr	r3, [pc, #212]	; (80052a0 <MX_FDCAN_Init+0x120>)
 80051ca:	2201      	movs	r2, #1
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan.Init.DataSyncJumpWidth = 1;
 80051ce:	4b34      	ldr	r3, [pc, #208]	; (80052a0 <MX_FDCAN_Init+0x120>)
 80051d0:	2201      	movs	r2, #1
 80051d2:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan.Init.DataTimeSeg1 = 1;
 80051d4:	4b32      	ldr	r3, [pc, #200]	; (80052a0 <MX_FDCAN_Init+0x120>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan.Init.DataTimeSeg2 = 1;
 80051da:	4b31      	ldr	r3, [pc, #196]	; (80052a0 <MX_FDCAN_Init+0x120>)
 80051dc:	2201      	movs	r2, #1
 80051de:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan.Init.StdFiltersNbr = 28;
 80051e0:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <MX_FDCAN_Init+0x120>)
 80051e2:	221c      	movs	r2, #28
 80051e4:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan.Init.ExtFiltersNbr = 0;
 80051e6:	4b2e      	ldr	r3, [pc, #184]	; (80052a0 <MX_FDCAN_Init+0x120>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80051ec:	4b2c      	ldr	r3, [pc, #176]	; (80052a0 <MX_FDCAN_Init+0x120>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan) != HAL_OK)
 80051f2:	482b      	ldr	r0, [pc, #172]	; (80052a0 <MX_FDCAN_Init+0x120>)
 80051f4:	f7fc fea6 	bl	8001f44 <HAL_FDCAN_Init>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <MX_FDCAN_Init+0x82>
	{
		Error_Handler();
 80051fe:	f000 f8cb 	bl	8005398 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8005202:	2201      	movs	r2, #1
 8005204:	2140      	movs	r1, #64	; 0x40
 8005206:	4826      	ldr	r0, [pc, #152]	; (80052a0 <MX_FDCAN_Init+0x120>)
 8005208:	f7fd f881 	bl	800230e <HAL_FDCAN_ConfigRxFifoOverwrite>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <MX_FDCAN_Init+0x96>
	{
		Error_Handler();
 8005212:	f000 f8c1 	bl	8005398 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8005216:	2201      	movs	r2, #1
 8005218:	2141      	movs	r1, #65	; 0x41
 800521a:	4821      	ldr	r0, [pc, #132]	; (80052a0 <MX_FDCAN_Init+0x120>)
 800521c:	f7fd f877 	bl	800230e <HAL_FDCAN_ConfigRxFifoOverwrite>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <MX_FDCAN_Init+0xaa>
	{
		Error_Handler();
 8005226:	f000 f8b7 	bl	8005398 <Error_Handler>
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
	{
		Error_Handler();
	}*/ //no config yet

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800522a:	2300      	movs	r3, #0
 800522c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 1;
 800522e:	2301      	movs	r3, #1
 8005230:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8005232:	2302      	movs	r3, #2
 8005234:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8005236:	2301      	movs	r3, #1
 8005238:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_SYNC;
 800523a:	2380      	movs	r3, #128	; 0x80
 800523c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 800523e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005242:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 8005244:	463b      	mov	r3, r7
 8005246:	4619      	mov	r1, r3
 8005248:	4815      	ldr	r0, [pc, #84]	; (80052a0 <MX_FDCAN_Init+0x120>)
 800524a:	f7fc ffd5 	bl	80021f8 <HAL_FDCAN_ConfigFilter>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <MX_FDCAN_Init+0xd8>
	{
		Error_Handler();
 8005254:	f000 f8a0 	bl	8005398 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 8005258:	2301      	movs	r3, #1
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	2301      	movs	r3, #1
 800525e:	2202      	movs	r2, #2
 8005260:	2102      	movs	r1, #2
 8005262:	480f      	ldr	r0, [pc, #60]	; (80052a0 <MX_FDCAN_Init+0x120>)
 8005264:	f7fd f822 	bl	80022ac <HAL_FDCAN_ConfigGlobalFilter>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <MX_FDCAN_Init+0xf2>
	{
		Error_Handler();
 800526e:	f000 f893 	bl	8005398 <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan) != HAL_OK)
 8005272:	480b      	ldr	r0, [pc, #44]	; (80052a0 <MX_FDCAN_Init+0x120>)
 8005274:	f7fd f884 	bl	8002380 <HAL_FDCAN_Start>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <MX_FDCAN_Init+0x102>
	{
		Error_Handler();
 800527e:	f000 f88b 	bl	8005398 <Error_Handler>
	}
	if(HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8005282:	2200      	movs	r2, #0
 8005284:	2101      	movs	r1, #1
 8005286:	4806      	ldr	r0, [pc, #24]	; (80052a0 <MX_FDCAN_Init+0x120>)
 8005288:	f7fd f9d2 	bl	8002630 <HAL_FDCAN_ActivateNotification>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <MX_FDCAN_Init+0x116>
	{
		Error_Handler();
 8005292:	f000 f881 	bl	8005398 <Error_Handler>
	}
}
 8005296:	bf00      	nop
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000dd4 	.word	0x20000dd4
 80052a4:	40006400 	.word	0x40006400

080052a8 <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
	htim6.Instance = TIM6;
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <MX_TIM6_Init+0x4c>)
 80052ae:	4a12      	ldr	r2, [pc, #72]	; (80052f8 <MX_TIM6_Init+0x50>)
 80052b0:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 16999; //100us resolution
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <MX_TIM6_Init+0x4c>)
 80052b4:	f244 2267 	movw	r2, #16999	; 0x4267
 80052b8:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052ba:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <MX_TIM6_Init+0x4c>)
 80052bc:	2200      	movs	r2, #0
 80052be:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = SendAnalogPeriod;
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <MX_TIM6_Init+0x54>)
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <MX_TIM6_Init+0x4c>)
 80052c8:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052ca:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <MX_TIM6_Init+0x4c>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80052d0:	4808      	ldr	r0, [pc, #32]	; (80052f4 <MX_TIM6_Init+0x4c>)
 80052d2:	f7fe fe4b 	bl	8003f6c <HAL_TIM_Base_Init>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <MX_TIM6_Init+0x38>
	{
		Error_Handler();
 80052dc:	f000 f85c 	bl	8005398 <Error_Handler>
	}

	if (SendAnalogPeriod) { HAL_TIM_Base_Start_IT(&htim6); }
 80052e0:	4b06      	ldr	r3, [pc, #24]	; (80052fc <MX_TIM6_Init+0x54>)
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <MX_TIM6_Init+0x46>
 80052e8:	4802      	ldr	r0, [pc, #8]	; (80052f4 <MX_TIM6_Init+0x4c>)
 80052ea:	f7fe fe6b 	bl	8003fc4 <HAL_TIM_Base_Start_IT>
}
 80052ee:	bf00      	nop
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000f3c 	.word	0x20000f3c
 80052f8:	40001000 	.word	0x40001000
 80052fc:	20000e40 	.word	0x20000e40

08005300 <MX_TIM7_Init>:

static void MX_TIM7_Init(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
	htim7.Instance = TIM7;
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <MX_TIM7_Init+0x40>)
 8005306:	4a0f      	ldr	r2, [pc, #60]	; (8005344 <MX_TIM7_Init+0x44>)
 8005308:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 16999; //100us resolution
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <MX_TIM7_Init+0x40>)
 800530c:	f244 2267 	movw	r2, #16999	; 0x4267
 8005310:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005312:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <MX_TIM7_Init+0x40>)
 8005314:	2200      	movs	r2, #0
 8005316:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 10000; //1 second
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <MX_TIM7_Init+0x40>)
 800531a:	f242 7210 	movw	r2, #10000	; 0x2710
 800531e:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <MX_TIM7_Init+0x40>)
 8005322:	2200      	movs	r2, #0
 8005324:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005326:	4806      	ldr	r0, [pc, #24]	; (8005340 <MX_TIM7_Init+0x40>)
 8005328:	f7fe fe20 	bl	8003f6c <HAL_TIM_Base_Init>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <MX_TIM7_Init+0x36>
	{
		Error_Handler();
 8005332:	f000 f831 	bl	8005398 <Error_Handler>
	}

	HAL_TIM_Base_Start_IT(&htim7);
 8005336:	4802      	ldr	r0, [pc, #8]	; (8005340 <MX_TIM7_Init+0x40>)
 8005338:	f7fe fe44 	bl	8003fc4 <HAL_TIM_Base_Start_IT>
}
 800533c:	bf00      	nop
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20001048 	.word	0x20001048
 8005344:	40001400 	.word	0x40001400

08005348 <MX_TIM16_Init>:

static void MX_TIM16_Init(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
	htim16.Instance = TIM16;
 800534c:	4b0f      	ldr	r3, [pc, #60]	; (800538c <MX_TIM16_Init+0x44>)
 800534e:	4a10      	ldr	r2, [pc, #64]	; (8005390 <MX_TIM16_Init+0x48>)
 8005350:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 1699; //10us resolution
 8005352:	4b0e      	ldr	r3, [pc, #56]	; (800538c <MX_TIM16_Init+0x44>)
 8005354:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8005358:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800535a:	4b0c      	ldr	r3, [pc, #48]	; (800538c <MX_TIM16_Init+0x44>)
 800535c:	2200      	movs	r2, #0
 800535e:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = CanSyncDelay;
 8005360:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <MX_TIM16_Init+0x4c>)
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	461a      	mov	r2, r3
 8005366:	4b09      	ldr	r3, [pc, #36]	; (800538c <MX_TIM16_Init+0x44>)
 8005368:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800536a:	4b08      	ldr	r3, [pc, #32]	; (800538c <MX_TIM16_Init+0x44>)
 800536c:	2200      	movs	r2, #0
 800536e:	611a      	str	r2, [r3, #16]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005370:	4b06      	ldr	r3, [pc, #24]	; (800538c <MX_TIM16_Init+0x44>)
 8005372:	2200      	movs	r2, #0
 8005374:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005376:	4805      	ldr	r0, [pc, #20]	; (800538c <MX_TIM16_Init+0x44>)
 8005378:	f7fe fdf8 	bl	8003f6c <HAL_TIM_Base_Init>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <MX_TIM16_Init+0x3e>
	{
		Error_Handler();
 8005382:	f000 f809 	bl	8005398 <Error_Handler>
	}
}
 8005386:	bf00      	nop
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20001008 	.word	0x20001008
 8005390:	40014400 	.word	0x40014400
 8005394:	20000130 	.word	0x20000130

08005398 <Error_Handler>:


void Error_Handler(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 800539c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053a4:	f7fd fe38 	bl	8003018 <HAL_GPIO_TogglePin>
		HAL_Delay(33);
 80053a8:	2021      	movs	r0, #33	; 0x21
 80053aa:	f7fa ffa5 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80053ae:	e7f5      	b.n	800539c <Error_Handler+0x4>

080053b0 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80053b4:	4b05      	ldr	r3, [pc, #20]	; (80053cc <LL_PWR_DisableDeadBatteryPD+0x1c>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4a04      	ldr	r2, [pc, #16]	; (80053cc <LL_PWR_DisableDeadBatteryPD+0x1c>)
 80053ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053be:	6093      	str	r3, [r2, #8]
}
 80053c0:	bf00      	nop
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40007000 	.word	0x40007000

080053d0 <HAL_MspInit>:
//externs
extern DMA_HandleTypeDef hdma_adc1;
extern DMA_HandleTypeDef hdma_adc2;

void HAL_MspInit(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80053d6:	4b0f      	ldr	r3, [pc, #60]	; (8005414 <HAL_MspInit+0x44>)
 80053d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053da:	4a0e      	ldr	r2, [pc, #56]	; (8005414 <HAL_MspInit+0x44>)
 80053dc:	f043 0301 	orr.w	r3, r3, #1
 80053e0:	6613      	str	r3, [r2, #96]	; 0x60
 80053e2:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <HAL_MspInit+0x44>)
 80053e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	607b      	str	r3, [r7, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 80053ee:	4b09      	ldr	r3, [pc, #36]	; (8005414 <HAL_MspInit+0x44>)
 80053f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f2:	4a08      	ldr	r2, [pc, #32]	; (8005414 <HAL_MspInit+0x44>)
 80053f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f8:	6593      	str	r3, [r2, #88]	; 0x58
 80053fa:	4b06      	ldr	r3, [pc, #24]	; (8005414 <HAL_MspInit+0x44>)
 80053fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	683b      	ldr	r3, [r7, #0]

	LL_PWR_DisableDeadBatteryPD();
 8005406:	f7ff ffd3 	bl	80053b0 <LL_PWR_DisableDeadBatteryPD>
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000

08005418 <HAL_ADC_MspInit>:

//counter to keep track of how many peripherals require ADC12 clock, so that deinitializing ADC1 allows ADC2 to run
static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08c      	sub	sp, #48	; 0x30
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005420:	f107 031c 	add.w	r3, r7, #28
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	609a      	str	r2, [r3, #8]
 800542c:	60da      	str	r2, [r3, #12]
 800542e:	611a      	str	r2, [r3, #16]
	if(hadc->Instance==ADC1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005438:	d15a      	bne.n	80054f0 <HAL_ADC_MspInit+0xd8>
	{
		HAL_RCC_ADC12_CLK_ENABLED++;
 800543a:	4b5f      	ldr	r3, [pc, #380]	; (80055b8 <HAL_ADC_MspInit+0x1a0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3301      	adds	r3, #1
 8005440:	4a5d      	ldr	r2, [pc, #372]	; (80055b8 <HAL_ADC_MspInit+0x1a0>)
 8005442:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_ADC12_CLK_ENABLED==1)
 8005444:	4b5c      	ldr	r3, [pc, #368]	; (80055b8 <HAL_ADC_MspInit+0x1a0>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d10b      	bne.n	8005464 <HAL_ADC_MspInit+0x4c>
		{
			__HAL_RCC_ADC12_CLK_ENABLE();
 800544c:	4b5b      	ldr	r3, [pc, #364]	; (80055bc <HAL_ADC_MspInit+0x1a4>)
 800544e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005450:	4a5a      	ldr	r2, [pc, #360]	; (80055bc <HAL_ADC_MspInit+0x1a4>)
 8005452:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005456:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005458:	4b58      	ldr	r3, [pc, #352]	; (80055bc <HAL_ADC_MspInit+0x1a4>)
 800545a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800545c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	69bb      	ldr	r3, [r7, #24]
		}
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8005464:	4b55      	ldr	r3, [pc, #340]	; (80055bc <HAL_ADC_MspInit+0x1a4>)
 8005466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005468:	4a54      	ldr	r2, [pc, #336]	; (80055bc <HAL_ADC_MspInit+0x1a4>)
 800546a:	f043 0301 	orr.w	r3, r3, #1
 800546e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005470:	4b52      	ldr	r3, [pc, #328]	; (80055bc <HAL_ADC_MspInit+0x1a4>)
 8005472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	697b      	ldr	r3, [r7, #20]

		GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800547c:	230c      	movs	r3, #12
 800547e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005480:	2303      	movs	r3, #3
 8005482:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005484:	2300      	movs	r3, #0
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005488:	f107 031c 	add.w	r3, r7, #28
 800548c:	4619      	mov	r1, r3
 800548e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005492:	f7fd fc27 	bl	8002ce4 <HAL_GPIO_Init>

		hdma_adc1.Instance = DMA1_Channel1;
 8005496:	4b4a      	ldr	r3, [pc, #296]	; (80055c0 <HAL_ADC_MspInit+0x1a8>)
 8005498:	4a4a      	ldr	r2, [pc, #296]	; (80055c4 <HAL_ADC_MspInit+0x1ac>)
 800549a:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800549c:	4b48      	ldr	r3, [pc, #288]	; (80055c0 <HAL_ADC_MspInit+0x1a8>)
 800549e:	2205      	movs	r2, #5
 80054a0:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054a2:	4b47      	ldr	r3, [pc, #284]	; (80055c0 <HAL_ADC_MspInit+0x1a8>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80054a8:	4b45      	ldr	r3, [pc, #276]	; (80055c0 <HAL_ADC_MspInit+0x1a8>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80054ae:	4b44      	ldr	r3, [pc, #272]	; (80055c0 <HAL_ADC_MspInit+0x1a8>)
 80054b0:	2280      	movs	r2, #128	; 0x80
 80054b2:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80054b4:	4b42      	ldr	r3, [pc, #264]	; (80055c0 <HAL_ADC_MspInit+0x1a8>)
 80054b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ba:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80054bc:	4b40      	ldr	r3, [pc, #256]	; (80055c0 <HAL_ADC_MspInit+0x1a8>)
 80054be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054c2:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80054c4:	4b3e      	ldr	r3, [pc, #248]	; (80055c0 <HAL_ADC_MspInit+0x1a8>)
 80054c6:	2220      	movs	r2, #32
 80054c8:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80054ca:	4b3d      	ldr	r3, [pc, #244]	; (80055c0 <HAL_ADC_MspInit+0x1a8>)
 80054cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054d0:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80054d2:	483b      	ldr	r0, [pc, #236]	; (80055c0 <HAL_ADC_MspInit+0x1a8>)
 80054d4:	f7fc fac4 	bl	8001a60 <HAL_DMA_Init>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_ADC_MspInit+0xca>
		{
			Error_Handler();
 80054de:	f7ff ff5b 	bl	8005398 <Error_Handler>
		}

		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a36      	ldr	r2, [pc, #216]	; (80055c0 <HAL_ADC_MspInit+0x1a8>)
 80054e6:	655a      	str	r2, [r3, #84]	; 0x54
 80054e8:	4a35      	ldr	r2, [pc, #212]	; (80055c0 <HAL_ADC_MspInit+0x1a8>)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6293      	str	r3, [r2, #40]	; 0x28
		  Error_Handler();
		}

		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
	}
}
 80054ee:	e05e      	b.n	80055ae <HAL_ADC_MspInit+0x196>
	else if(hadc->Instance==ADC2)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a34      	ldr	r2, [pc, #208]	; (80055c8 <HAL_ADC_MspInit+0x1b0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d159      	bne.n	80055ae <HAL_ADC_MspInit+0x196>
		HAL_RCC_ADC12_CLK_ENABLED++;
 80054fa:	4b2f      	ldr	r3, [pc, #188]	; (80055b8 <HAL_ADC_MspInit+0x1a0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3301      	adds	r3, #1
 8005500:	4a2d      	ldr	r2, [pc, #180]	; (80055b8 <HAL_ADC_MspInit+0x1a0>)
 8005502:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_ADC12_CLK_ENABLED==1)
 8005504:	4b2c      	ldr	r3, [pc, #176]	; (80055b8 <HAL_ADC_MspInit+0x1a0>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d10b      	bne.n	8005524 <HAL_ADC_MspInit+0x10c>
		  __HAL_RCC_ADC12_CLK_ENABLE();
 800550c:	4b2b      	ldr	r3, [pc, #172]	; (80055bc <HAL_ADC_MspInit+0x1a4>)
 800550e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005510:	4a2a      	ldr	r2, [pc, #168]	; (80055bc <HAL_ADC_MspInit+0x1a4>)
 8005512:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005516:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005518:	4b28      	ldr	r3, [pc, #160]	; (80055bc <HAL_ADC_MspInit+0x1a4>)
 800551a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800551c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8005524:	4b25      	ldr	r3, [pc, #148]	; (80055bc <HAL_ADC_MspInit+0x1a4>)
 8005526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005528:	4a24      	ldr	r2, [pc, #144]	; (80055bc <HAL_ADC_MspInit+0x1a4>)
 800552a:	f043 0320 	orr.w	r3, r3, #32
 800552e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005530:	4b22      	ldr	r3, [pc, #136]	; (80055bc <HAL_ADC_MspInit+0x1a4>)
 8005532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800553c:	23e0      	movs	r3, #224	; 0xe0
 800553e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005540:	2303      	movs	r3, #3
 8005542:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005544:	2300      	movs	r3, #0
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005548:	f107 031c 	add.w	r3, r7, #28
 800554c:	4619      	mov	r1, r3
 800554e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005552:	f7fd fbc7 	bl	8002ce4 <HAL_GPIO_Init>
		hdma_adc2.Instance = DMA1_Channel2;
 8005556:	4b1d      	ldr	r3, [pc, #116]	; (80055cc <HAL_ADC_MspInit+0x1b4>)
 8005558:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <HAL_ADC_MspInit+0x1b8>)
 800555a:	601a      	str	r2, [r3, #0]
		hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800555c:	4b1b      	ldr	r3, [pc, #108]	; (80055cc <HAL_ADC_MspInit+0x1b4>)
 800555e:	2224      	movs	r2, #36	; 0x24
 8005560:	605a      	str	r2, [r3, #4]
		hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005562:	4b1a      	ldr	r3, [pc, #104]	; (80055cc <HAL_ADC_MspInit+0x1b4>)
 8005564:	2200      	movs	r2, #0
 8005566:	609a      	str	r2, [r3, #8]
		hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005568:	4b18      	ldr	r3, [pc, #96]	; (80055cc <HAL_ADC_MspInit+0x1b4>)
 800556a:	2200      	movs	r2, #0
 800556c:	60da      	str	r2, [r3, #12]
		hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800556e:	4b17      	ldr	r3, [pc, #92]	; (80055cc <HAL_ADC_MspInit+0x1b4>)
 8005570:	2280      	movs	r2, #128	; 0x80
 8005572:	611a      	str	r2, [r3, #16]
		hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005574:	4b15      	ldr	r3, [pc, #84]	; (80055cc <HAL_ADC_MspInit+0x1b4>)
 8005576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800557a:	615a      	str	r2, [r3, #20]
		hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800557c:	4b13      	ldr	r3, [pc, #76]	; (80055cc <HAL_ADC_MspInit+0x1b4>)
 800557e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005582:	619a      	str	r2, [r3, #24]
		hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005584:	4b11      	ldr	r3, [pc, #68]	; (80055cc <HAL_ADC_MspInit+0x1b4>)
 8005586:	2220      	movs	r2, #32
 8005588:	61da      	str	r2, [r3, #28]
		hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800558a:	4b10      	ldr	r3, [pc, #64]	; (80055cc <HAL_ADC_MspInit+0x1b4>)
 800558c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005590:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005592:	480e      	ldr	r0, [pc, #56]	; (80055cc <HAL_ADC_MspInit+0x1b4>)
 8005594:	f7fc fa64 	bl	8001a60 <HAL_DMA_Init>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <HAL_ADC_MspInit+0x18a>
		  Error_Handler();
 800559e:	f7ff fefb 	bl	8005398 <Error_Handler>
		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a09      	ldr	r2, [pc, #36]	; (80055cc <HAL_ADC_MspInit+0x1b4>)
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54
 80055a8:	4a08      	ldr	r2, [pc, #32]	; (80055cc <HAL_ADC_MspInit+0x1b4>)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6293      	str	r3, [r2, #40]	; 0x28
}
 80055ae:	bf00      	nop
 80055b0:	3730      	adds	r7, #48	; 0x30
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000128 	.word	0x20000128
 80055bc:	40021000 	.word	0x40021000
 80055c0:	20000ecc 	.word	0x20000ecc
 80055c4:	40020008 	.word	0x40020008
 80055c8:	50000100 	.word	0x50000100
 80055cc:	20000fa4 	.word	0x20000fa4
 80055d0:	4002001c 	.word	0x4002001c

080055d4 <HAL_FDCAN_MspInit>:
	}
}


void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	; 0x28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055dc:	f107 0314 	add.w	r3, r7, #20
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	609a      	str	r2, [r3, #8]
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a1c      	ldr	r2, [pc, #112]	; (8005664 <HAL_FDCAN_MspInit+0x90>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d131      	bne.n	800565a <HAL_FDCAN_MspInit+0x86>
  {
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80055f6:	4b1c      	ldr	r3, [pc, #112]	; (8005668 <HAL_FDCAN_MspInit+0x94>)
 80055f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fa:	4a1b      	ldr	r2, [pc, #108]	; (8005668 <HAL_FDCAN_MspInit+0x94>)
 80055fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005600:	6593      	str	r3, [r2, #88]	; 0x58
 8005602:	4b19      	ldr	r3, [pc, #100]	; (8005668 <HAL_FDCAN_MspInit+0x94>)
 8005604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800560e:	4b16      	ldr	r3, [pc, #88]	; (8005668 <HAL_FDCAN_MspInit+0x94>)
 8005610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005612:	4a15      	ldr	r2, [pc, #84]	; (8005668 <HAL_FDCAN_MspInit+0x94>)
 8005614:	f043 0301 	orr.w	r3, r3, #1
 8005618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800561a:	4b13      	ldr	r3, [pc, #76]	; (8005668 <HAL_FDCAN_MspInit+0x94>)
 800561c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005626:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800562a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800562c:	2302      	movs	r3, #2
 800562e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005634:	2300      	movs	r3, #0
 8005636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005638:	2309      	movs	r3, #9
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800563c:	f107 0314 	add.w	r3, r7, #20
 8005640:	4619      	mov	r1, r3
 8005642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005646:	f7fd fb4d 	bl	8002ce4 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800564a:	2200      	movs	r2, #0
 800564c:	2100      	movs	r1, #0
 800564e:	2015      	movs	r0, #21
 8005650:	f7fc f9d1 	bl	80019f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8005654:	2015      	movs	r0, #21
 8005656:	f7fc f9e8 	bl	8001a2a <HAL_NVIC_EnableIRQ>
  }
}
 800565a:	bf00      	nop
 800565c:	3728      	adds	r7, #40	; 0x28
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40006400 	.word	0x40006400
 8005668:	40021000 	.word	0x40021000

0800566c <HAL_TIM_Base_MspInit>:
    HAL_NVIC_DisableIRQ(FDCAN1_IT0_IRQn);
  }
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	if(htim_base->Instance==TIM6)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a27      	ldr	r2, [pc, #156]	; (8005718 <HAL_TIM_Base_MspInit+0xac>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d114      	bne.n	80056a8 <HAL_TIM_Base_MspInit+0x3c>
	{
		__HAL_RCC_TIM6_CLK_ENABLE();
 800567e:	4b27      	ldr	r3, [pc, #156]	; (800571c <HAL_TIM_Base_MspInit+0xb0>)
 8005680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005682:	4a26      	ldr	r2, [pc, #152]	; (800571c <HAL_TIM_Base_MspInit+0xb0>)
 8005684:	f043 0310 	orr.w	r3, r3, #16
 8005688:	6593      	str	r3, [r2, #88]	; 0x58
 800568a:	4b24      	ldr	r3, [pc, #144]	; (800571c <HAL_TIM_Base_MspInit+0xb0>)
 800568c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	697b      	ldr	r3, [r7, #20]
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005696:	2200      	movs	r2, #0
 8005698:	2100      	movs	r1, #0
 800569a:	2036      	movs	r0, #54	; 0x36
 800569c:	f7fc f9ab 	bl	80019f6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80056a0:	2036      	movs	r0, #54	; 0x36
 80056a2:	f7fc f9c2 	bl	8001a2a <HAL_NVIC_EnableIRQ>
	{
		__HAL_RCC_TIM16_CLK_ENABLE();
		HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
	}
}
 80056a6:	e032      	b.n	800570e <HAL_TIM_Base_MspInit+0xa2>
	else if(htim_base->Instance==TIM7)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <HAL_TIM_Base_MspInit+0xb4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d114      	bne.n	80056dc <HAL_TIM_Base_MspInit+0x70>
		__HAL_RCC_TIM7_CLK_ENABLE();
 80056b2:	4b1a      	ldr	r3, [pc, #104]	; (800571c <HAL_TIM_Base_MspInit+0xb0>)
 80056b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b6:	4a19      	ldr	r2, [pc, #100]	; (800571c <HAL_TIM_Base_MspInit+0xb0>)
 80056b8:	f043 0320 	orr.w	r3, r3, #32
 80056bc:	6593      	str	r3, [r2, #88]	; 0x58
 80056be:	4b17      	ldr	r3, [pc, #92]	; (800571c <HAL_TIM_Base_MspInit+0xb0>)
 80056c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	693b      	ldr	r3, [r7, #16]
		HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80056ca:	2200      	movs	r2, #0
 80056cc:	2100      	movs	r1, #0
 80056ce:	2037      	movs	r0, #55	; 0x37
 80056d0:	f7fc f991 	bl	80019f6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80056d4:	2037      	movs	r0, #55	; 0x37
 80056d6:	f7fc f9a8 	bl	8001a2a <HAL_NVIC_EnableIRQ>
}
 80056da:	e018      	b.n	800570e <HAL_TIM_Base_MspInit+0xa2>
	else if(htim_base->Instance==TIM16)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a10      	ldr	r2, [pc, #64]	; (8005724 <HAL_TIM_Base_MspInit+0xb8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d113      	bne.n	800570e <HAL_TIM_Base_MspInit+0xa2>
		__HAL_RCC_TIM16_CLK_ENABLE();
 80056e6:	4b0d      	ldr	r3, [pc, #52]	; (800571c <HAL_TIM_Base_MspInit+0xb0>)
 80056e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ea:	4a0c      	ldr	r2, [pc, #48]	; (800571c <HAL_TIM_Base_MspInit+0xb0>)
 80056ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f0:	6613      	str	r3, [r2, #96]	; 0x60
 80056f2:	4b0a      	ldr	r3, [pc, #40]	; (800571c <HAL_TIM_Base_MspInit+0xb0>)
 80056f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80056fe:	2200      	movs	r2, #0
 8005700:	2100      	movs	r1, #0
 8005702:	2019      	movs	r0, #25
 8005704:	f7fc f977 	bl	80019f6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005708:	2019      	movs	r0, #25
 800570a:	f7fc f98e 	bl	8001a2a <HAL_NVIC_EnableIRQ>
}
 800570e:	bf00      	nop
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40001000 	.word	0x40001000
 800571c:	40021000 	.word	0x40021000
 8005720:	40001400 	.word	0x40001400
 8005724:	40014400 	.word	0x40014400

08005728 <DMA1_Channel1_IRQHandler>:
extern TIM_HandleTypeDef htim6;
extern TIM_HandleTypeDef htim7;
extern TIM_HandleTypeDef htim16;

void DMA1_Channel1_IRQHandler(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 800572c:	4802      	ldr	r0, [pc, #8]	; (8005738 <DMA1_Channel1_IRQHandler+0x10>)
 800572e:	f7fc faba 	bl	8001ca6 <HAL_DMA_IRQHandler>
}
 8005732:	bf00      	nop
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000ecc 	.word	0x20000ecc

0800573c <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 8005740:	4802      	ldr	r0, [pc, #8]	; (800574c <DMA1_Channel2_IRQHandler+0x10>)
 8005742:	f7fc fab0 	bl	8001ca6 <HAL_DMA_IRQHandler>
}
 8005746:	bf00      	nop
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20000fa4 	.word	0x20000fa4

08005750 <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(&hfdcan);
 8005754:	4802      	ldr	r0, [pc, #8]	; (8005760 <FDCAN1_IT0_IRQHandler+0x10>)
 8005756:	f7fd f851 	bl	80027fc <HAL_FDCAN_IRQHandler>
}
 800575a:	bf00      	nop
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000dd4 	.word	0x20000dd4

08005764 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 8005768:	4802      	ldr	r0, [pc, #8]	; (8005774 <TIM6_DAC_IRQHandler+0x10>)
 800576a:	f7fe fc80 	bl	800406e <HAL_TIM_IRQHandler>
}
 800576e:	bf00      	nop
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000f3c 	.word	0x20000f3c

08005778 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim7);
 800577c:	4802      	ldr	r0, [pc, #8]	; (8005788 <TIM7_IRQHandler+0x10>)
 800577e:	f7fe fc76 	bl	800406e <HAL_TIM_IRQHandler>
}
 8005782:	bf00      	nop
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20001048 	.word	0x20001048

0800578c <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim16);
 8005790:	4802      	ldr	r0, [pc, #8]	; (800579c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005792:	f7fe fc6c 	bl	800406e <HAL_TIM_IRQHandler>
}
 8005796:	bf00      	nop
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20001008 	.word	0x20001008

080057a0 <NMI_Handler>:


void NMI_Handler(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0

}
 80057a4:	bf00      	nop
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HardFault_Handler>:

void HardFault_Handler(void)
{
 80057ae:	b480      	push	{r7}
 80057b0:	af00      	add	r7, sp, #0
	while (1)
 80057b2:	e7fe      	b.n	80057b2 <HardFault_Handler+0x4>

080057b4 <MemManage_Handler>:

	}
}

void MemManage_Handler(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
	while (1)
 80057b8:	e7fe      	b.n	80057b8 <MemManage_Handler+0x4>

080057ba <BusFault_Handler>:

	}
}

void BusFault_Handler(void)
{
 80057ba:	b480      	push	{r7}
 80057bc:	af00      	add	r7, sp, #0
	while (1)
 80057be:	e7fe      	b.n	80057be <BusFault_Handler+0x4>

080057c0 <UsageFault_Handler>:

	}
}

void UsageFault_Handler(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  while (1)
 80057c4:	e7fe      	b.n	80057c4 <UsageFault_Handler+0x4>

080057c6 <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 80057c6:	b480      	push	{r7}
 80057c8:	af00      	add	r7, sp, #0

}
 80057ca:	bf00      	nop
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0

}
 80057d8:	bf00      	nop
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <PendSV_Handler>:

void PendSV_Handler(void)
{
 80057e2:	b480      	push	{r7}
 80057e4:	af00      	add	r7, sp, #0

}
 80057e6:	bf00      	nop
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80057f4:	f7fa fd62 	bl	80002bc <HAL_IncTick>
}
 80057f8:	bf00      	nop
 80057fa:	bd80      	pop	{r7, pc}

080057fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005800:	4b08      	ldr	r3, [pc, #32]	; (8005824 <SystemInit+0x28>)
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005806:	4a07      	ldr	r2, [pc, #28]	; (8005824 <SystemInit+0x28>)
 8005808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800580c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005810:	4b04      	ldr	r3, [pc, #16]	; (8005824 <SystemInit+0x28>)
 8005812:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005816:	609a      	str	r2, [r3, #8]
#endif
}
 8005818:	bf00      	nop
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	e000ed00 	.word	0xe000ed00

08005828 <TF_Select>:
										100, 200, 250, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500 }; //in .1 °C
uint32_t NTC_NTC1_360_LUT[2*16] =	{	233, 359, 439, 588, 753, 1023, 1333, 1665, 2008, 2324, 2617, 2874, 3093, 3275, 3425, 3546,
										100, 200, 250, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500	};

uint32_t TF_Select(uint8_t bytes, uint8_t sensor, uint16_t raw)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	71fb      	strb	r3, [r7, #7]
 8005832:	460b      	mov	r3, r1
 8005834:	71bb      	strb	r3, [r7, #6]
 8005836:	4613      	mov	r3, r2
 8005838:	80bb      	strh	r3, [r7, #4]
	uint32_t transmit = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]

	switch(sensor)
 800583e:	79bb      	ldrb	r3, [r7, #6]
 8005840:	3b01      	subs	r3, #1
 8005842:	2b08      	cmp	r3, #8
 8005844:	d85c      	bhi.n	8005900 <TF_Select+0xd8>
 8005846:	a201      	add	r2, pc, #4	; (adr r2, 800584c <TF_Select+0x24>)
 8005848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584c:	08005871 	.word	0x08005871
 8005850:	08005881 	.word	0x08005881
 8005854:	08005891 	.word	0x08005891
 8005858:	080058a1 	.word	0x080058a1
 800585c:	080058b1 	.word	0x080058b1
 8005860:	080058c1 	.word	0x080058c1
 8005864:	080058d1 	.word	0x080058d1
 8005868:	080058e1 	.word	0x080058e1
 800586c:	080058f1 	.word	0x080058f1
	{
	case VOLTAGE_3V3_UNCAL:
		transmit = TF_Voltage(bytes, sensor, raw);
 8005870:	88ba      	ldrh	r2, [r7, #4]
 8005872:	79b9      	ldrb	r1, [r7, #6]
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f84c 	bl	8005914 <TF_Voltage>
 800587c:	60f8      	str	r0, [r7, #12]
		break;
 800587e:	e043      	b.n	8005908 <TF_Select+0xe0>
	case VOLTAGE_4V5_UNCAL:
		transmit = TF_Voltage(bytes, sensor, raw);
 8005880:	88ba      	ldrh	r2, [r7, #4]
 8005882:	79b9      	ldrb	r1, [r7, #6]
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f844 	bl	8005914 <TF_Voltage>
 800588c:	60f8      	str	r0, [r7, #12]
		break;
 800588e:	e03b      	b.n	8005908 <TF_Select+0xe0>
	case VOLTAGE_5V_UNCAL:
		transmit = TF_Voltage(bytes, sensor, raw);
 8005890:	88ba      	ldrh	r2, [r7, #4]
 8005892:	79b9      	ldrb	r1, [r7, #6]
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f83c 	bl	8005914 <TF_Voltage>
 800589c:	60f8      	str	r0, [r7, #12]
		break;
 800589e:	e033      	b.n	8005908 <TF_Select+0xe0>
	case VOLTAGE_9V_UNCAL:
		transmit = TF_Voltage(bytes, sensor, raw);
 80058a0:	88ba      	ldrh	r2, [r7, #4]
 80058a2:	79b9      	ldrb	r1, [r7, #6]
 80058a4:	79fb      	ldrb	r3, [r7, #7]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 f834 	bl	8005914 <TF_Voltage>
 80058ac:	60f8      	str	r0, [r7, #12]
		break;
 80058ae:	e02b      	b.n	8005908 <TF_Select+0xe0>
	case VOLTAGE_12V_UNCAL:
		transmit = TF_Voltage(bytes, sensor, raw);
 80058b0:	88ba      	ldrh	r2, [r7, #4]
 80058b2:	79b9      	ldrb	r1, [r7, #6]
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 f82c 	bl	8005914 <TF_Voltage>
 80058bc:	60f8      	str	r0, [r7, #12]
		break;
 80058be:	e023      	b.n	8005908 <TF_Select+0xe0>
	case VOLTAGE_24V_UNCAL:
		transmit = TF_Voltage(bytes, sensor, raw);
 80058c0:	88ba      	ldrh	r2, [r7, #4]
 80058c2:	79b9      	ldrb	r1, [r7, #6]
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 f824 	bl	8005914 <TF_Voltage>
 80058cc:	60f8      	str	r0, [r7, #12]
		break;
 80058ce:	e01b      	b.n	8005908 <TF_Select+0xe0>
	case VOLTAGE_30V_UNCAL:
		transmit = TF_Voltage(bytes, sensor, raw);
 80058d0:	88ba      	ldrh	r2, [r7, #4]
 80058d2:	79b9      	ldrb	r1, [r7, #6]
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 f81c 	bl	8005914 <TF_Voltage>
 80058dc:	60f8      	str	r0, [r7, #12]
		break;
 80058de:	e013      	b.n	8005908 <TF_Select+0xe0>
	case NTC_NTC1_680:
		transmit = TF_NTC(bytes, sensor, raw);
 80058e0:	88ba      	ldrh	r2, [r7, #4]
 80058e2:	79b9      	ldrb	r1, [r7, #6]
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 f996 	bl	8005c18 <TF_NTC>
 80058ec:	60f8      	str	r0, [r7, #12]
		break;
 80058ee:	e00b      	b.n	8005908 <TF_Select+0xe0>
	case NTC_NTC1_360:
		transmit = TF_NTC(bytes, sensor, raw);
 80058f0:	88ba      	ldrh	r2, [r7, #4]
 80058f2:	79b9      	ldrb	r1, [r7, #6]
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 f98e 	bl	8005c18 <TF_NTC>
 80058fc:	60f8      	str	r0, [r7, #12]
		break;
 80058fe:	e003      	b.n	8005908 <TF_Select+0xe0>
	default:
		Set_Error(ERR_INCORRECT_TF);
 8005900:	2022      	movs	r0, #34	; 0x22
 8005902:	f7ff f963 	bl	8004bcc <Set_Error>
		break;
 8005906:	bf00      	nop
	}

	return transmit;
 8005908:	68fb      	ldr	r3, [r7, #12]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop

08005914 <TF_Voltage>:


//note that these will overflow if higher than 12 bit resolution on the adc is used
uint32_t TF_Voltage(uint8_t bytes, uint8_t divider, uint16_t raw)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	71fb      	strb	r3, [r7, #7]
 800591e:	460b      	mov	r3, r1
 8005920:	71bb      	strb	r3, [r7, #6]
 8005922:	4613      	mov	r3, r2
 8005924:	80bb      	strh	r3, [r7, #4]
	uint32_t voltage = 0;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]

	switch(divider) //calculate voltage in uV
 800592a:	79bb      	ldrb	r3, [r7, #6]
 800592c:	3b01      	subs	r3, #1
 800592e:	2b06      	cmp	r3, #6
 8005930:	f200 8152 	bhi.w	8005bd8 <TF_Voltage+0x2c4>
 8005934:	a201      	add	r2, pc, #4	; (adr r2, 800593c <TF_Voltage+0x28>)
 8005936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593a:	bf00      	nop
 800593c:	08005959 	.word	0x08005959
 8005940:	080059b1 	.word	0x080059b1
 8005944:	08005a0f 	.word	0x08005a0f
 8005948:	08005a6b 	.word	0x08005a6b
 800594c:	08005ac9 	.word	0x08005ac9
 8005950:	08005b25 	.word	0x08005b25
 8005954:	08005b81 	.word	0x08005b81
	{
	case VOLTAGE_3V3_UNCAL:
		voltage = (raw*103125)/128; // C = 3.3*1000000/2^12 //3.3/2^12 gives in V
 8005958:	88bb      	ldrh	r3, [r7, #4]
 800595a:	4aa4      	ldr	r2, [pc, #656]	; (8005bec <TF_Voltage+0x2d8>)
 800595c:	fb02 f303 	mul.w	r3, r2, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	da00      	bge.n	8005966 <TF_Voltage+0x52>
 8005964:	337f      	adds	r3, #127	; 0x7f
 8005966:	11db      	asrs	r3, r3, #7
 8005968:	60fb      	str	r3, [r7, #12]
		switch(bytes)
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d002      	beq.n	8005976 <TF_Voltage+0x62>
 8005970:	2b02      	cmp	r3, #2
 8005972:	d00d      	beq.n	8005990 <TF_Voltage+0x7c>
 8005974:	e017      	b.n	80059a6 <TF_Voltage+0x92>
		{
		case 1:
			voltage+=500000;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 800597c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005980:	60fb      	str	r3, [r7, #12]
			voltage/=1000000; //voltage in 100's of mV
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4a9a      	ldr	r2, [pc, #616]	; (8005bf0 <TF_Voltage+0x2dc>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	0c9b      	lsrs	r3, r3, #18
 800598c:	60fb      	str	r3, [r7, #12]
			break;
 800598e:	e00e      	b.n	80059ae <TF_Voltage+0x9a>
		case 2:
			voltage+=500;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005996:	60fb      	str	r3, [r7, #12]
			voltage/=1000; //voltage in mV
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4a96      	ldr	r2, [pc, #600]	; (8005bf4 <TF_Voltage+0x2e0>)
 800599c:	fba2 2303 	umull	r2, r3, r2, r3
 80059a0:	099b      	lsrs	r3, r3, #6
 80059a2:	60fb      	str	r3, [r7, #12]
			break;
 80059a4:	e003      	b.n	80059ae <TF_Voltage+0x9a>
		default:
			Set_Error(ERR_WRONG_BYTES);
 80059a6:	2021      	movs	r0, #33	; 0x21
 80059a8:	f7ff f910 	bl	8004bcc <Set_Error>
			break;
 80059ac:	bf00      	nop
		}
		break;
 80059ae:	e117      	b.n	8005be0 <TF_Voltage+0x2cc>
	case VOLTAGE_4V5_UNCAL:
		voltage = (raw*55327)/50; // C*(1.21+3.24)/3.24
 80059b0:	88bb      	ldrh	r3, [r7, #4]
 80059b2:	f64d 021f 	movw	r2, #55327	; 0xd81f
 80059b6:	fb02 f303 	mul.w	r3, r2, r3
 80059ba:	4a8f      	ldr	r2, [pc, #572]	; (8005bf8 <TF_Voltage+0x2e4>)
 80059bc:	fb82 1203 	smull	r1, r2, r2, r3
 80059c0:	1112      	asrs	r2, r2, #4
 80059c2:	17db      	asrs	r3, r3, #31
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	60fb      	str	r3, [r7, #12]
		switch(bytes)
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d002      	beq.n	80059d4 <TF_Voltage+0xc0>
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d00d      	beq.n	80059ee <TF_Voltage+0xda>
 80059d2:	e017      	b.n	8005a04 <TF_Voltage+0xf0>
		{
		case 1:
			voltage+=500000;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 80059da:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80059de:	60fb      	str	r3, [r7, #12]
			voltage/=1000000; //voltage in 100's of mV
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4a83      	ldr	r2, [pc, #524]	; (8005bf0 <TF_Voltage+0x2dc>)
 80059e4:	fba2 2303 	umull	r2, r3, r2, r3
 80059e8:	0c9b      	lsrs	r3, r3, #18
 80059ea:	60fb      	str	r3, [r7, #12]
			break;
 80059ec:	e00e      	b.n	8005a0c <TF_Voltage+0xf8>
		case 2:
			voltage+=500;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80059f4:	60fb      	str	r3, [r7, #12]
			voltage/=1000; //voltage in mV
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a7e      	ldr	r2, [pc, #504]	; (8005bf4 <TF_Voltage+0x2e0>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	099b      	lsrs	r3, r3, #6
 8005a00:	60fb      	str	r3, [r7, #12]
			break;
 8005a02:	e003      	b.n	8005a0c <TF_Voltage+0xf8>
		default:
			Set_Error(ERR_WRONG_BYTES);
 8005a04:	2021      	movs	r0, #33	; 0x21
 8005a06:	f7ff f8e1 	bl	8004bcc <Set_Error>
			break;
 8005a0a:	bf00      	nop
		}
		break;
 8005a0c:	e0e8      	b.n	8005be0 <TF_Voltage+0x2cc>
	case VOLTAGE_5V_UNCAL:
		voltage = (raw*247667)/20; // C*(1.74+3.24)/3.24
 8005a0e:	88bb      	ldrh	r3, [r7, #4]
 8005a10:	4a7a      	ldr	r2, [pc, #488]	; (8005bfc <TF_Voltage+0x2e8>)
 8005a12:	fb02 f303 	mul.w	r3, r2, r3
 8005a16:	4a7a      	ldr	r2, [pc, #488]	; (8005c00 <TF_Voltage+0x2ec>)
 8005a18:	fb82 1203 	smull	r1, r2, r2, r3
 8005a1c:	10d2      	asrs	r2, r2, #3
 8005a1e:	17db      	asrs	r3, r3, #31
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	60fb      	str	r3, [r7, #12]
		switch(bytes)
 8005a24:	79fb      	ldrb	r3, [r7, #7]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d002      	beq.n	8005a30 <TF_Voltage+0x11c>
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d00d      	beq.n	8005a4a <TF_Voltage+0x136>
 8005a2e:	e017      	b.n	8005a60 <TF_Voltage+0x14c>
		{
		case 1:
			voltage+=500000;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 8005a36:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005a3a:	60fb      	str	r3, [r7, #12]
			voltage/=1000000; //voltage in 100's of mV
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4a6c      	ldr	r2, [pc, #432]	; (8005bf0 <TF_Voltage+0x2dc>)
 8005a40:	fba2 2303 	umull	r2, r3, r2, r3
 8005a44:	0c9b      	lsrs	r3, r3, #18
 8005a46:	60fb      	str	r3, [r7, #12]
			break;
 8005a48:	e00e      	b.n	8005a68 <TF_Voltage+0x154>
		case 2:
			voltage+=500;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005a50:	60fb      	str	r3, [r7, #12]
			voltage/=1000; //voltage in mV
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4a67      	ldr	r2, [pc, #412]	; (8005bf4 <TF_Voltage+0x2e0>)
 8005a56:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5a:	099b      	lsrs	r3, r3, #6
 8005a5c:	60fb      	str	r3, [r7, #12]
			break;
 8005a5e:	e003      	b.n	8005a68 <TF_Voltage+0x154>
		default:
			Set_Error(ERR_WRONG_BYTES);
 8005a60:	2021      	movs	r0, #33	; 0x21
 8005a62:	f7ff f8b3 	bl	8004bcc <Set_Error>
			break;
 8005a66:	bf00      	nop
		}
		break;
 8005a68:	e0ba      	b.n	8005be0 <TF_Voltage+0x2cc>
	case VOLTAGE_9V_UNCAL:
		voltage = (raw*44759)/20; // C*(5.76+3.24)/3.24
 8005a6a:	88bb      	ldrh	r3, [r7, #4]
 8005a6c:	f64a 62d7 	movw	r2, #44759	; 0xaed7
 8005a70:	fb02 f303 	mul.w	r3, r2, r3
 8005a74:	4a62      	ldr	r2, [pc, #392]	; (8005c00 <TF_Voltage+0x2ec>)
 8005a76:	fb82 1203 	smull	r1, r2, r2, r3
 8005a7a:	10d2      	asrs	r2, r2, #3
 8005a7c:	17db      	asrs	r3, r3, #31
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	60fb      	str	r3, [r7, #12]
		switch(bytes)
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d002      	beq.n	8005a8e <TF_Voltage+0x17a>
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d00d      	beq.n	8005aa8 <TF_Voltage+0x194>
 8005a8c:	e017      	b.n	8005abe <TF_Voltage+0x1aa>
		{
		case 1:
			voltage+=500000;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 8005a94:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005a98:	60fb      	str	r3, [r7, #12]
			voltage/=1000000; //voltage in 100's of mV
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4a54      	ldr	r2, [pc, #336]	; (8005bf0 <TF_Voltage+0x2dc>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	0c9b      	lsrs	r3, r3, #18
 8005aa4:	60fb      	str	r3, [r7, #12]
			break;
 8005aa6:	e00e      	b.n	8005ac6 <TF_Voltage+0x1b2>
		case 2:
			voltage+=500;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005aae:	60fb      	str	r3, [r7, #12]
			voltage/=1000; //voltage in mV
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4a50      	ldr	r2, [pc, #320]	; (8005bf4 <TF_Voltage+0x2e0>)
 8005ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab8:	099b      	lsrs	r3, r3, #6
 8005aba:	60fb      	str	r3, [r7, #12]
			break;
 8005abc:	e003      	b.n	8005ac6 <TF_Voltage+0x1b2>
		default:
			Set_Error(ERR_WRONG_BYTES);
 8005abe:	2021      	movs	r0, #33	; 0x21
 8005ac0:	f7ff f884 	bl	8004bcc <Set_Error>
			break;
 8005ac4:	bf00      	nop
		}
		break;
 8005ac6:	e08b      	b.n	8005be0 <TF_Voltage+0x2cc>
	case VOLTAGE_12V_UNCAL:
		voltage = (raw*301129)/100; // C*(8.87+3.24)/3.24
 8005ac8:	88bb      	ldrh	r3, [r7, #4]
 8005aca:	4a4e      	ldr	r2, [pc, #312]	; (8005c04 <TF_Voltage+0x2f0>)
 8005acc:	fb02 f303 	mul.w	r3, r2, r3
 8005ad0:	4a49      	ldr	r2, [pc, #292]	; (8005bf8 <TF_Voltage+0x2e4>)
 8005ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8005ad6:	1152      	asrs	r2, r2, #5
 8005ad8:	17db      	asrs	r3, r3, #31
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	60fb      	str	r3, [r7, #12]
		switch(bytes)
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d002      	beq.n	8005aea <TF_Voltage+0x1d6>
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d00d      	beq.n	8005b04 <TF_Voltage+0x1f0>
 8005ae8:	e017      	b.n	8005b1a <TF_Voltage+0x206>
		{
		case 1:
			voltage+=500000;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 8005af0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005af4:	60fb      	str	r3, [r7, #12]
			voltage/=1000000; //voltage in 100's of mV
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4a3d      	ldr	r2, [pc, #244]	; (8005bf0 <TF_Voltage+0x2dc>)
 8005afa:	fba2 2303 	umull	r2, r3, r2, r3
 8005afe:	0c9b      	lsrs	r3, r3, #18
 8005b00:	60fb      	str	r3, [r7, #12]
			break;
 8005b02:	e00e      	b.n	8005b22 <TF_Voltage+0x20e>
		case 2:
			voltage+=500;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005b0a:	60fb      	str	r3, [r7, #12]
			voltage/=1000; //voltage in mV
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4a39      	ldr	r2, [pc, #228]	; (8005bf4 <TF_Voltage+0x2e0>)
 8005b10:	fba2 2303 	umull	r2, r3, r2, r3
 8005b14:	099b      	lsrs	r3, r3, #6
 8005b16:	60fb      	str	r3, [r7, #12]
			break;
 8005b18:	e003      	b.n	8005b22 <TF_Voltage+0x20e>
		default:
			Set_Error(ERR_WRONG_BYTES);
 8005b1a:	2021      	movs	r0, #33	; 0x21
 8005b1c:	f7ff f856 	bl	8004bcc <Set_Error>
			break;
 8005b20:	bf00      	nop
		}
		break;
 8005b22:	e05d      	b.n	8005be0 <TF_Voltage+0x2cc>
	case VOLTAGE_24V_UNCAL:
		voltage = (raw*150689)/25; // C*(21+3.24)/3.24
 8005b24:	88bb      	ldrh	r3, [r7, #4]
 8005b26:	4a38      	ldr	r2, [pc, #224]	; (8005c08 <TF_Voltage+0x2f4>)
 8005b28:	fb02 f303 	mul.w	r3, r2, r3
 8005b2c:	4a32      	ldr	r2, [pc, #200]	; (8005bf8 <TF_Voltage+0x2e4>)
 8005b2e:	fb82 1203 	smull	r1, r2, r2, r3
 8005b32:	10d2      	asrs	r2, r2, #3
 8005b34:	17db      	asrs	r3, r3, #31
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	60fb      	str	r3, [r7, #12]
		switch(bytes)
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d002      	beq.n	8005b46 <TF_Voltage+0x232>
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d00d      	beq.n	8005b60 <TF_Voltage+0x24c>
 8005b44:	e017      	b.n	8005b76 <TF_Voltage+0x262>
		{
		case 1:
			voltage+=500000;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 8005b4c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005b50:	60fb      	str	r3, [r7, #12]
			voltage/=1000000; //voltage in 100's of mV
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a26      	ldr	r2, [pc, #152]	; (8005bf0 <TF_Voltage+0x2dc>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	0c9b      	lsrs	r3, r3, #18
 8005b5c:	60fb      	str	r3, [r7, #12]
			break;
 8005b5e:	e00e      	b.n	8005b7e <TF_Voltage+0x26a>
		case 2:
			voltage+=500;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005b66:	60fb      	str	r3, [r7, #12]
			voltage/=1000; //voltage in mV
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4a22      	ldr	r2, [pc, #136]	; (8005bf4 <TF_Voltage+0x2e0>)
 8005b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b70:	099b      	lsrs	r3, r3, #6
 8005b72:	60fb      	str	r3, [r7, #12]
			break;
 8005b74:	e003      	b.n	8005b7e <TF_Voltage+0x26a>
		default:
			Set_Error(ERR_WRONG_BYTES);
 8005b76:	2021      	movs	r0, #33	; 0x21
 8005b78:	f7ff f828 	bl	8004bcc <Set_Error>
			break;
 8005b7c:	bf00      	nop
		}
		break;
 8005b7e:	e02f      	b.n	8005be0 <TF_Voltage+0x2cc>
	case VOLTAGE_30V_UNCAL:
		voltage = (raw*744493)/100; // C*(26.7+3.24)/3.24
 8005b80:	88bb      	ldrh	r3, [r7, #4]
 8005b82:	4a22      	ldr	r2, [pc, #136]	; (8005c0c <TF_Voltage+0x2f8>)
 8005b84:	fb02 f303 	mul.w	r3, r2, r3
 8005b88:	4a1b      	ldr	r2, [pc, #108]	; (8005bf8 <TF_Voltage+0x2e4>)
 8005b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8005b8e:	1152      	asrs	r2, r2, #5
 8005b90:	17db      	asrs	r3, r3, #31
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	60fb      	str	r3, [r7, #12]
		switch(bytes)
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d002      	beq.n	8005ba2 <TF_Voltage+0x28e>
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d00b      	beq.n	8005bb8 <TF_Voltage+0x2a4>
 8005ba0:	e015      	b.n	8005bce <TF_Voltage+0x2ba>
		{
		case 1:
			voltage+=5000000;
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4b1a      	ldr	r3, [pc, #104]	; (8005c10 <TF_Voltage+0x2fc>)
 8005ba6:	4413      	add	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
			voltage/=10000000; //voltage in V
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4a19      	ldr	r2, [pc, #100]	; (8005c14 <TF_Voltage+0x300>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	0d9b      	lsrs	r3, r3, #22
 8005bb4:	60fb      	str	r3, [r7, #12]
			break;
 8005bb6:	e00e      	b.n	8005bd6 <TF_Voltage+0x2c2>
		case 2:
			voltage+=500;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005bbe:	60fb      	str	r3, [r7, #12]
			voltage/=1000; //voltage in mV
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a0c      	ldr	r2, [pc, #48]	; (8005bf4 <TF_Voltage+0x2e0>)
 8005bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc8:	099b      	lsrs	r3, r3, #6
 8005bca:	60fb      	str	r3, [r7, #12]
			break;
 8005bcc:	e003      	b.n	8005bd6 <TF_Voltage+0x2c2>
		default:
			Set_Error(ERR_WRONG_BYTES);
 8005bce:	2021      	movs	r0, #33	; 0x21
 8005bd0:	f7fe fffc 	bl	8004bcc <Set_Error>
			break;
 8005bd4:	bf00      	nop
		}
		break;
 8005bd6:	e003      	b.n	8005be0 <TF_Voltage+0x2cc>
	default:
		Set_Error(ERR_INCORRECT_TF_VOLTAGE);
 8005bd8:	2023      	movs	r0, #35	; 0x23
 8005bda:	f7fe fff7 	bl	8004bcc <Set_Error>
		break;
 8005bde:	bf00      	nop
	}

	return voltage;
 8005be0:	68fb      	ldr	r3, [r7, #12]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	000192d5 	.word	0x000192d5
 8005bf0:	431bde83 	.word	0x431bde83
 8005bf4:	10624dd3 	.word	0x10624dd3
 8005bf8:	51eb851f 	.word	0x51eb851f
 8005bfc:	0003c773 	.word	0x0003c773
 8005c00:	66666667 	.word	0x66666667
 8005c04:	00049849 	.word	0x00049849
 8005c08:	00024ca1 	.word	0x00024ca1
 8005c0c:	000b5c2d 	.word	0x000b5c2d
 8005c10:	004c4b40 	.word	0x004c4b40
 8005c14:	6b5fca6b 	.word	0x6b5fca6b

08005c18 <TF_NTC>:

uint32_t TF_NTC(uint8_t bytes, uint8_t resistor, uint16_t raw)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	71fb      	strb	r3, [r7, #7]
 8005c22:	460b      	mov	r3, r1
 8005c24:	71bb      	strb	r3, [r7, #6]
 8005c26:	4613      	mov	r3, r2
 8005c28:	80bb      	strh	r3, [r7, #4]
	uint32_t temperature = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]

	switch(resistor)
 8005c2e:	79bb      	ldrb	r3, [r7, #6]
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d002      	beq.n	8005c3a <TF_NTC+0x22>
 8005c34:	2b09      	cmp	r3, #9
 8005c36:	d008      	beq.n	8005c4a <TF_NTC+0x32>
 8005c38:	e00f      	b.n	8005c5a <TF_NTC+0x42>
	{
	case NTC_NTC1_680:
		temperature = LUT(raw, NTC_NTC1_680_LUT, 4);
 8005c3a:	88bb      	ldrh	r3, [r7, #4]
 8005c3c:	2204      	movs	r2, #4
 8005c3e:	490b      	ldr	r1, [pc, #44]	; (8005c6c <TF_NTC+0x54>)
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 f817 	bl	8005c74 <LUT>
 8005c46:	60f8      	str	r0, [r7, #12]
		break;
 8005c48:	e00b      	b.n	8005c62 <TF_NTC+0x4a>
	case NTC_NTC1_360:
		temperature = LUT(raw, NTC_NTC1_360_LUT, 4);
 8005c4a:	88bb      	ldrh	r3, [r7, #4]
 8005c4c:	2204      	movs	r2, #4
 8005c4e:	4908      	ldr	r1, [pc, #32]	; (8005c70 <TF_NTC+0x58>)
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 f80f 	bl	8005c74 <LUT>
 8005c56:	60f8      	str	r0, [r7, #12]
		break;
 8005c58:	e003      	b.n	8005c62 <TF_NTC+0x4a>
	default:
		Set_Error(ERR_INCORRECT_TF_NTC);
 8005c5a:	2024      	movs	r0, #36	; 0x24
 8005c5c:	f7fe ffb6 	bl	8004bcc <Set_Error>
		break;
 8005c60:	bf00      	nop
	}

	return temperature;
 8005c62:	68fb      	ldr	r3, [r7, #12]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	2000000c 	.word	0x2000000c
 8005c70:	2000008c 	.word	0x2000008c

08005c74 <LUT>:


uint32_t LUT(uint16_t input, uint32_t* LUT, uint8_t LUT_length_LN2)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	6039      	str	r1, [r7, #0]
 8005c7e:	80fb      	strh	r3, [r7, #6]
 8005c80:	4613      	mov	r3, r2
 8005c82:	717b      	strb	r3, [r7, #5]
	uint32_t result = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]

	uint8_t length = 2;
 8005c88:	2302      	movs	r3, #2
 8005c8a:	77fb      	strb	r3, [r7, #31]
	for(uint32_t i=0; i<(LUT_length_LN2-1); i++) { length*=2; }
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	61bb      	str	r3, [r7, #24]
 8005c90:	e005      	b.n	8005c9e <LUT+0x2a>
 8005c92:	7ffb      	ldrb	r3, [r7, #31]
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	77fb      	strb	r3, [r7, #31]
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	797b      	ldrb	r3, [r7, #5]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d3f3      	bcc.n	8005c92 <LUT+0x1e>

	uint8_t bound_low = 0;
 8005caa:	2300      	movs	r3, #0
 8005cac:	75fb      	strb	r3, [r7, #23]
	uint8_t bound_high = length-1;
 8005cae:	7ffb      	ldrb	r3, [r7, #31]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	75bb      	strb	r3, [r7, #22]
	uint8_t mid = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	757b      	strb	r3, [r7, #21]

	if (LUT[bound_low]>input)
 8005cb8:	7dfb      	ldrb	r3, [r7, #23]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d907      	bls.n	8005cd8 <LUT+0x64>
	{
		return LUT[bound_low+length];
 8005cc8:	7dfa      	ldrb	r2, [r7, #23]
 8005cca:	7ffb      	ldrb	r3, [r7, #31]
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	e09b      	b.n	8005e10 <LUT+0x19c>
	}
	else if (LUT[bound_high]<input)
 8005cd8:	7dbb      	ldrb	r3, [r7, #22]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	4413      	add	r3, r2
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	88fb      	ldrh	r3, [r7, #6]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d207      	bcs.n	8005cf8 <LUT+0x84>
	{
		return LUT[bound_high+length];
 8005ce8:	7dba      	ldrb	r2, [r7, #22]
 8005cea:	7ffb      	ldrb	r3, [r7, #31]
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	e08b      	b.n	8005e10 <LUT+0x19c>
	}

	for(uint32_t i=0; i<LUT_length_LN2; i++)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	e043      	b.n	8005d86 <LUT+0x112>
	{
		mid = ((bound_high-bound_low)/2)+bound_low;
 8005cfe:	7dba      	ldrb	r2, [r7, #22]
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	0fda      	lsrs	r2, r3, #31
 8005d06:	4413      	add	r3, r2
 8005d08:	105b      	asrs	r3, r3, #1
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
 8005d0e:	4413      	add	r3, r2
 8005d10:	757b      	strb	r3, [r7, #21]

		switch( (LUT[mid]>input) | ((LUT[mid+1]<input)<<1))
 8005d12:	7d7b      	ldrb	r3, [r7, #21]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	4413      	add	r3, r2
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	88fb      	ldrh	r3, [r7, #6]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	bf8c      	ite	hi
 8005d22:	2301      	movhi	r3, #1
 8005d24:	2300      	movls	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	4619      	mov	r1, r3
 8005d2a:	7d7b      	ldrb	r3, [r7, #21]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	4413      	add	r3, r2
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d201      	bcs.n	8005d40 <LUT+0xcc>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e000      	b.n	8005d42 <LUT+0xce>
 8005d40:	2300      	movs	r3, #0
 8005d42:	430b      	orrs	r3, r1
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d818      	bhi.n	8005d7a <LUT+0x106>
 8005d48:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <LUT+0xdc>)
 8005d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4e:	bf00      	nop
 8005d50:	08005d61 	.word	0x08005d61
 8005d54:	08005d67 	.word	0x08005d67
 8005d58:	08005d6d 	.word	0x08005d6d
 8005d5c:	08005d75 	.word	0x08005d75
		{
		case 0: //result between mid and mid+1
			i=LUT_length_LN2; //mid is correct, so exit the loop
 8005d60:	797b      	ldrb	r3, [r7, #5]
 8005d62:	613b      	str	r3, [r7, #16]
			break;
 8005d64:	e00c      	b.n	8005d80 <LUT+0x10c>
		case 1: //input < mid value
			bound_high = mid;
 8005d66:	7d7b      	ldrb	r3, [r7, #21]
 8005d68:	75bb      	strb	r3, [r7, #22]
			break;
 8005d6a:	e009      	b.n	8005d80 <LUT+0x10c>
		case 2: //input > mid+1 value
			bound_low = mid+1;
 8005d6c:	7d7b      	ldrb	r3, [r7, #21]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	75fb      	strb	r3, [r7, #23]
			break;
 8005d72:	e005      	b.n	8005d80 <LUT+0x10c>
		case 3: //impossible case
			Error_Handler();
 8005d74:	f7ff fb10 	bl	8005398 <Error_Handler>
			break;
 8005d78:	e002      	b.n	8005d80 <LUT+0x10c>
		default:
			Error_Handler();
 8005d7a:	f7ff fb0d 	bl	8005398 <Error_Handler>
			break;
 8005d7e:	bf00      	nop
	for(uint32_t i=0; i<LUT_length_LN2; i++)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	3301      	adds	r3, #1
 8005d84:	613b      	str	r3, [r7, #16]
 8005d86:	797b      	ldrb	r3, [r7, #5]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d3b7      	bcc.n	8005cfe <LUT+0x8a>
		}
	}

	result = (int)((((float)(input-LUT[mid]))/((float)(LUT[mid+1]-LUT[mid])))*(LUT[mid+1+length]-LUT[mid+length]))+LUT[mid+length];
 8005d8e:	88fa      	ldrh	r2, [r7, #6]
 8005d90:	7d7b      	ldrb	r3, [r7, #21]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	440b      	add	r3, r1
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	ee07 3a90 	vmov	s15, r3
 8005da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da4:	7d7b      	ldrb	r3, [r7, #21]
 8005da6:	3301      	adds	r3, #1
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	4413      	add	r3, r2
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	7d7b      	ldrb	r3, [r7, #21]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	6839      	ldr	r1, [r7, #0]
 8005db6:	440b      	add	r3, r1
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	ee07 3a90 	vmov	s15, r3
 8005dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc8:	7d7b      	ldrb	r3, [r7, #21]
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	7ffb      	ldrb	r3, [r7, #31]
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	7d79      	ldrb	r1, [r7, #21]
 8005dda:	7ffb      	ldrb	r3, [r7, #31]
 8005ddc:	440b      	add	r3, r1
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	440b      	add	r3, r1
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	ee07 3a90 	vmov	s15, r3
 8005dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005df8:	ee17 1a90 	vmov	r1, s15
 8005dfc:	7d7a      	ldrb	r2, [r7, #21]
 8005dfe:	7ffb      	ldrb	r3, [r7, #31]
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	4413      	add	r3, r2
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	440b      	add	r3, r1
 8005e0c:	60fb      	str	r3, [r7, #12]

	return result;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3720      	adds	r7, #32
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005e18:	480d      	ldr	r0, [pc, #52]	; (8005e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005e1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e1c:	480d      	ldr	r0, [pc, #52]	; (8005e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8005e1e:	490e      	ldr	r1, [pc, #56]	; (8005e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e20:	4a0e      	ldr	r2, [pc, #56]	; (8005e5c <LoopForever+0xe>)
  movs r3, #0
 8005e22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005e24:	e002      	b.n	8005e2c <LoopCopyDataInit>

08005e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e2a:	3304      	adds	r3, #4

08005e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e30:	d3f9      	bcc.n	8005e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e32:	4a0b      	ldr	r2, [pc, #44]	; (8005e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e34:	4c0b      	ldr	r4, [pc, #44]	; (8005e64 <LoopForever+0x16>)
  movs r3, #0
 8005e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e38:	e001      	b.n	8005e3e <LoopFillZerobss>

08005e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e3c:	3204      	adds	r2, #4

08005e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e40:	d3fb      	bcc.n	8005e3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005e42:	f7ff fcdb 	bl	80057fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e46:	f000 f811 	bl	8005e6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005e4a:	f7fe fbe3 	bl	8004614 <main>

08005e4e <LoopForever>:

LoopForever:
    b LoopForever
 8005e4e:	e7fe      	b.n	8005e4e <LoopForever>
  ldr   r0, =_estack
 8005e50:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e58:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8005e5c:	08005f04 	.word	0x08005f04
  ldr r2, =_sbss
 8005e60:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8005e64:	2000108c 	.word	0x2000108c

08005e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005e68:	e7fe      	b.n	8005e68 <ADC1_2_IRQHandler>
	...

08005e6c <__libc_init_array>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	4e0d      	ldr	r6, [pc, #52]	; (8005ea4 <__libc_init_array+0x38>)
 8005e70:	4c0d      	ldr	r4, [pc, #52]	; (8005ea8 <__libc_init_array+0x3c>)
 8005e72:	1ba4      	subs	r4, r4, r6
 8005e74:	10a4      	asrs	r4, r4, #2
 8005e76:	2500      	movs	r5, #0
 8005e78:	42a5      	cmp	r5, r4
 8005e7a:	d109      	bne.n	8005e90 <__libc_init_array+0x24>
 8005e7c:	4e0b      	ldr	r6, [pc, #44]	; (8005eac <__libc_init_array+0x40>)
 8005e7e:	4c0c      	ldr	r4, [pc, #48]	; (8005eb0 <__libc_init_array+0x44>)
 8005e80:	f000 f820 	bl	8005ec4 <_init>
 8005e84:	1ba4      	subs	r4, r4, r6
 8005e86:	10a4      	asrs	r4, r4, #2
 8005e88:	2500      	movs	r5, #0
 8005e8a:	42a5      	cmp	r5, r4
 8005e8c:	d105      	bne.n	8005e9a <__libc_init_array+0x2e>
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e94:	4798      	blx	r3
 8005e96:	3501      	adds	r5, #1
 8005e98:	e7ee      	b.n	8005e78 <__libc_init_array+0xc>
 8005e9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e9e:	4798      	blx	r3
 8005ea0:	3501      	adds	r5, #1
 8005ea2:	e7f2      	b.n	8005e8a <__libc_init_array+0x1e>
 8005ea4:	08005efc 	.word	0x08005efc
 8005ea8:	08005efc 	.word	0x08005efc
 8005eac:	08005efc 	.word	0x08005efc
 8005eb0:	08005f00 	.word	0x08005f00

08005eb4 <memset>:
 8005eb4:	4402      	add	r2, r0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d100      	bne.n	8005ebe <memset+0xa>
 8005ebc:	4770      	bx	lr
 8005ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8005ec2:	e7f9      	b.n	8005eb8 <memset+0x4>

08005ec4 <_init>:
 8005ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec6:	bf00      	nop
 8005ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eca:	bc08      	pop	{r3}
 8005ecc:	469e      	mov	lr, r3
 8005ece:	4770      	bx	lr

08005ed0 <_fini>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr
