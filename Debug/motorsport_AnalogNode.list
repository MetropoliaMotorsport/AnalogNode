
motorsport_AnalogNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001830  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001a08  08001a08  00011a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a18  08001a18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a18  08001a18  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a18  08001a18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a18  08001a18  00011a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a1c  08001a1c  00011a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08001a2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08001a2c  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007de3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001256  00000000  00000000  00027e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b8  00000000  00000000  00029078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000710  00000000  00000000  00029830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c0de  00000000  00000000  00029f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000059be  00000000  00000000  0004601e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b2565  00000000  00000000  0004b9dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fdf41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eb0  00000000  00000000  000fdfbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080019f0 	.word	0x080019f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080019f0 	.word	0x080019f0

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f000 f93c 	bl	80004a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f001 fb11 	bl	8001860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f93a 	bl	80004ea <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f000 f914 	bl	80004b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000008 	.word	0x20000008
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	20000028 	.word	0x20000028
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000028 	.word	0x20000028

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f003 0307 	and.w	r3, r3, #7
 800034a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <__NVIC_SetPriorityGrouping+0x44>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000352:	68ba      	ldr	r2, [r7, #8]
 8000354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000358:	4013      	ands	r3, r2
 800035a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <__NVIC_SetPriorityGrouping+0x44>)
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	60d3      	str	r3, [r2, #12]
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <__NVIC_GetPriorityGrouping+0x18>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	0a1b      	lsrs	r3, r3, #8
 800038e:	f003 0307 	and.w	r3, r3, #7
}
 8000392:	4618      	mov	r0, r3
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	6039      	str	r1, [r7, #0]
 80003aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	db0a      	blt.n	80003ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	490c      	ldr	r1, [pc, #48]	; (80003ec <__NVIC_SetPriority+0x4c>)
 80003ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003be:	0112      	lsls	r2, r2, #4
 80003c0:	b2d2      	uxtb	r2, r2
 80003c2:	440b      	add	r3, r1
 80003c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003c8:	e00a      	b.n	80003e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4908      	ldr	r1, [pc, #32]	; (80003f0 <__NVIC_SetPriority+0x50>)
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	f003 030f 	and.w	r3, r3, #15
 80003d6:	3b04      	subs	r3, #4
 80003d8:	0112      	lsls	r2, r2, #4
 80003da:	b2d2      	uxtb	r2, r2
 80003dc:	440b      	add	r3, r1
 80003de:	761a      	strb	r2, [r3, #24]
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	e000e100 	.word	0xe000e100
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b089      	sub	sp, #36	; 0x24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f003 0307 	and.w	r3, r3, #7
 8000406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000408:	69fb      	ldr	r3, [r7, #28]
 800040a:	f1c3 0307 	rsb	r3, r3, #7
 800040e:	2b04      	cmp	r3, #4
 8000410:	bf28      	it	cs
 8000412:	2304      	movcs	r3, #4
 8000414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000416:	69fb      	ldr	r3, [r7, #28]
 8000418:	3304      	adds	r3, #4
 800041a:	2b06      	cmp	r3, #6
 800041c:	d902      	bls.n	8000424 <NVIC_EncodePriority+0x30>
 800041e:	69fb      	ldr	r3, [r7, #28]
 8000420:	3b03      	subs	r3, #3
 8000422:	e000      	b.n	8000426 <NVIC_EncodePriority+0x32>
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000428:	f04f 32ff 	mov.w	r2, #4294967295
 800042c:	69bb      	ldr	r3, [r7, #24]
 800042e:	fa02 f303 	lsl.w	r3, r2, r3
 8000432:	43da      	mvns	r2, r3
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	401a      	ands	r2, r3
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800043c:	f04f 31ff 	mov.w	r1, #4294967295
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	fa01 f303 	lsl.w	r3, r1, r3
 8000446:	43d9      	mvns	r1, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800044c:	4313      	orrs	r3, r2
         );
}
 800044e:	4618      	mov	r0, r3
 8000450:	3724      	adds	r7, #36	; 0x24
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
	...

0800045c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	3b01      	subs	r3, #1
 8000468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800046c:	d301      	bcc.n	8000472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800046e:	2301      	movs	r3, #1
 8000470:	e00f      	b.n	8000492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000472:	4a0a      	ldr	r2, [pc, #40]	; (800049c <SysTick_Config+0x40>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3b01      	subs	r3, #1
 8000478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800047a:	210f      	movs	r1, #15
 800047c:	f04f 30ff 	mov.w	r0, #4294967295
 8000480:	f7ff ff8e 	bl	80003a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <SysTick_Config+0x40>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800048a:	4b04      	ldr	r3, [pc, #16]	; (800049c <SysTick_Config+0x40>)
 800048c:	2207      	movs	r2, #7
 800048e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000490:	2300      	movs	r3, #0
}
 8000492:	4618      	mov	r0, r3
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	e000e010 	.word	0xe000e010

080004a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f7ff ff47 	bl	800033c <__NVIC_SetPriorityGrouping>
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b086      	sub	sp, #24
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	4603      	mov	r3, r0
 80004be:	60b9      	str	r1, [r7, #8]
 80004c0:	607a      	str	r2, [r7, #4]
 80004c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004c4:	f7ff ff5e 	bl	8000384 <__NVIC_GetPriorityGrouping>
 80004c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	68b9      	ldr	r1, [r7, #8]
 80004ce:	6978      	ldr	r0, [r7, #20]
 80004d0:	f7ff ff90 	bl	80003f4 <NVIC_EncodePriority>
 80004d4:	4602      	mov	r2, r0
 80004d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004da:	4611      	mov	r1, r2
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff ff5f 	bl	80003a0 <__NVIC_SetPriority>
}
 80004e2:	bf00      	nop
 80004e4:	3718      	adds	r7, #24
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b082      	sub	sp, #8
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f7ff ffb2 	bl	800045c <SysTick_Config>
 80004f8:	4603      	mov	r3, r0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b08a      	sub	sp, #40	; 0x28
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000510:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800051c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800051e:	4013      	ands	r3, r2
 8000520:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000528:	f003 0307 	and.w	r3, r3, #7
 800052c:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000534:	6a3a      	ldr	r2, [r7, #32]
 8000536:	4013      	ands	r3, r2
 8000538:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000540:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000544:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800054c:	69fa      	ldr	r2, [r7, #28]
 800054e:	4013      	ands	r3, r2
 8000550:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000558:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800055c:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000564:	69ba      	ldr	r2, [r7, #24]
 8000566:	4013      	ands	r3, r2
 8000568:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000570:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000574:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	4013      	ands	r3, r2
 8000580:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800058c:	2b00      	cmp	r3, #0
 800058e:	d00d      	beq.n	80005ac <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800059a:	2b00      	cmp	r3, #0
 800059c:	d006      	beq.n	80005ac <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2240      	movs	r2, #64	; 0x40
 80005a4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 f939 	bl	800081e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80005b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d01b      	beq.n	80005f2 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80005c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d014      	beq.n	80005f2 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005d0:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	4013      	ands	r3, r2
 80005de:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80005ea:	6939      	ldr	r1, [r7, #16]
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f8f7 	bl	80007e0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80005f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d007      	beq.n	8000608 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005fe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8000600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f8b6 	bl	8000774 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8000608:	6a3b      	ldr	r3, [r7, #32]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d007      	beq.n	800061e <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6a3a      	ldr	r2, [r7, #32]
 8000614:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8000616:	6a39      	ldr	r1, [r7, #32]
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 f8b6 	bl	800078a <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d007      	beq.n	8000634 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	69fa      	ldr	r2, [r7, #28]
 800062a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800062c:	69f9      	ldr	r1, [r7, #28]
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f8b6 	bl	80007a0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800063a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800063e:	2b00      	cmp	r3, #0
 8000640:	d00e      	beq.n	8000660 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800064c:	2b00      	cmp	r3, #0
 800064e:	d007      	beq.n	8000660 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000658:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f8ab 	bl	80007b6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066a:	2b00      	cmp	r3, #0
 800066c:	d01a      	beq.n	80006a4 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000678:	2b00      	cmp	r3, #0
 800067a:	d013      	beq.n	80006a4 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000684:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	4013      	ands	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800069c:	68f9      	ldr	r1, [r7, #12]
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f893 	bl	80007ca <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d00e      	beq.n	80006d0 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d007      	beq.n	80006d0 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006c8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f893 	bl	80007f6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00e      	beq.n	80006fc <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d007      	beq.n	80006fc <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006f4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f000 f887 	bl	800080a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	2b00      	cmp	r3, #0
 8000708:	d011      	beq.n	800072e <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00a      	beq.n	800072e <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000720:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d007      	beq.n	8000744 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800073c:	6979      	ldr	r1, [r7, #20]
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f000 f881 	bl	8000846 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d009      	beq.n	800075e <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	69ba      	ldr	r2, [r7, #24]
 8000750:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	431a      	orrs	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000762:	2b00      	cmp	r3, #0
 8000764:	d002      	beq.n	800076c <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 f863 	bl	8000832 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800078a:	b480      	push	{r7}
 800078c:	b083      	sub	sp, #12
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800086a:	e15a      	b.n	8000b22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	2101      	movs	r1, #1
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	fa01 f303 	lsl.w	r3, r1, r3
 8000878:	4013      	ands	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2b00      	cmp	r3, #0
 8000880:	f000 814c 	beq.w	8000b1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	2b02      	cmp	r3, #2
 800088a:	d003      	beq.n	8000894 <HAL_GPIO_Init+0x38>
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2b12      	cmp	r3, #18
 8000892:	d123      	bne.n	80008dc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	08da      	lsrs	r2, r3, #3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3208      	adds	r2, #8
 800089c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	f003 0307 	and.w	r3, r3, #7
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	220f      	movs	r2, #15
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	43db      	mvns	r3, r3
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	4013      	ands	r3, r2
 80008b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	691a      	ldr	r2, [r3, #16]
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	08da      	lsrs	r2, r3, #3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3208      	adds	r2, #8
 80008d6:	6939      	ldr	r1, [r7, #16]
 80008d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	2203      	movs	r2, #3
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4013      	ands	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f003 0203 	and.w	r2, r3, #3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4313      	orrs	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d00b      	beq.n	8000930 <HAL_GPIO_Init+0xd4>
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d007      	beq.n	8000930 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000924:	2b11      	cmp	r3, #17
 8000926:	d003      	beq.n	8000930 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2b12      	cmp	r3, #18
 800092e:	d130      	bne.n	8000992 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2203      	movs	r2, #3
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68da      	ldr	r2, [r3, #12]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4313      	orrs	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000966:	2201      	movs	r2, #1
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	091b      	lsrs	r3, r3, #4
 800097c:	f003 0201 	and.w	r2, r3, #1
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	2203      	movs	r2, #3
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43db      	mvns	r3, r3
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4013      	ands	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 80a6 	beq.w	8000b1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d0:	4b5b      	ldr	r3, [pc, #364]	; (8000b40 <HAL_GPIO_Init+0x2e4>)
 80009d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d4:	4a5a      	ldr	r2, [pc, #360]	; (8000b40 <HAL_GPIO_Init+0x2e4>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6613      	str	r3, [r2, #96]	; 0x60
 80009dc:	4b58      	ldr	r3, [pc, #352]	; (8000b40 <HAL_GPIO_Init+0x2e4>)
 80009de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009e8:	4a56      	ldr	r2, [pc, #344]	; (8000b44 <HAL_GPIO_Init+0x2e8>)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	3302      	adds	r3, #2
 80009f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f003 0303 	and.w	r3, r3, #3
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	220f      	movs	r2, #15
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a12:	d01f      	beq.n	8000a54 <HAL_GPIO_Init+0x1f8>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a4c      	ldr	r2, [pc, #304]	; (8000b48 <HAL_GPIO_Init+0x2ec>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d019      	beq.n	8000a50 <HAL_GPIO_Init+0x1f4>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a4b      	ldr	r2, [pc, #300]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d013      	beq.n	8000a4c <HAL_GPIO_Init+0x1f0>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a4a      	ldr	r2, [pc, #296]	; (8000b50 <HAL_GPIO_Init+0x2f4>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d00d      	beq.n	8000a48 <HAL_GPIO_Init+0x1ec>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a49      	ldr	r2, [pc, #292]	; (8000b54 <HAL_GPIO_Init+0x2f8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d007      	beq.n	8000a44 <HAL_GPIO_Init+0x1e8>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a48      	ldr	r2, [pc, #288]	; (8000b58 <HAL_GPIO_Init+0x2fc>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d101      	bne.n	8000a40 <HAL_GPIO_Init+0x1e4>
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	e00a      	b.n	8000a56 <HAL_GPIO_Init+0x1fa>
 8000a40:	2306      	movs	r3, #6
 8000a42:	e008      	b.n	8000a56 <HAL_GPIO_Init+0x1fa>
 8000a44:	2304      	movs	r3, #4
 8000a46:	e006      	b.n	8000a56 <HAL_GPIO_Init+0x1fa>
 8000a48:	2303      	movs	r3, #3
 8000a4a:	e004      	b.n	8000a56 <HAL_GPIO_Init+0x1fa>
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	e002      	b.n	8000a56 <HAL_GPIO_Init+0x1fa>
 8000a50:	2301      	movs	r3, #1
 8000a52:	e000      	b.n	8000a56 <HAL_GPIO_Init+0x1fa>
 8000a54:	2300      	movs	r3, #0
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	f002 0203 	and.w	r2, r2, #3
 8000a5c:	0092      	lsls	r2, r2, #2
 8000a5e:	4093      	lsls	r3, r2
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a66:	4937      	ldr	r1, [pc, #220]	; (8000b44 <HAL_GPIO_Init+0x2e8>)
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	089b      	lsrs	r3, r3, #2
 8000a6c:	3302      	adds	r3, #2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a74:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <HAL_GPIO_Init+0x300>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a98:	4a30      	ldr	r2, [pc, #192]	; (8000b5c <HAL_GPIO_Init+0x300>)
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a9e:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_GPIO_Init+0x300>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ac2:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_GPIO_Init+0x300>)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_GPIO_Init+0x300>)
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <HAL_GPIO_Init+0x300>)
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_GPIO_Init+0x300>)
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b16:	4a11      	ldr	r2, [pc, #68]	; (8000b5c <HAL_GPIO_Init+0x300>)
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	fa22 f303 	lsr.w	r3, r2, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	f47f ae9d 	bne.w	800086c <HAL_GPIO_Init+0x10>
  }
}
 8000b32:	bf00      	nop
 8000b34:	371c      	adds	r7, #28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40010000 	.word	0x40010000
 8000b48:	48000400 	.word	0x48000400
 8000b4c:	48000800 	.word	0x48000800
 8000b50:	48000c00 	.word	0x48000c00
 8000b54:	48001000 	.word	0x48001000
 8000b58:	48001400 	.word	0x48001400
 8000b5c:	40010400 	.word	0x40010400

08000b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b70:	787b      	ldrb	r3, [r7, #1]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b7c:	e002      	b.n	8000b84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	695a      	ldr	r2, [r3, #20]
 8000ba0:	887b      	ldrh	r3, [r7, #2]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ba8:	887a      	ldrh	r2, [r7, #2]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000bae:	e002      	b.n	8000bb6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bb0:	887a      	ldrh	r2, [r7, #2]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	619a      	str	r2, [r3, #24]
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d141      	bne.n	8000c56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bd2:	4b4b      	ldr	r3, [pc, #300]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bde:	d131      	bne.n	8000c44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000be0:	4b47      	ldr	r3, [pc, #284]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000be6:	4a46      	ldr	r2, [pc, #280]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf0:	4b43      	ldr	r3, [pc, #268]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bf8:	4a41      	ldr	r2, [pc, #260]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c00:	4b40      	ldr	r3, [pc, #256]	; (8000d04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2232      	movs	r2, #50	; 0x32
 8000c06:	fb02 f303 	mul.w	r3, r2, r3
 8000c0a:	4a3f      	ldr	r2, [pc, #252]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c10:	0c9b      	lsrs	r3, r3, #18
 8000c12:	3301      	adds	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c16:	e002      	b.n	8000c1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c1e:	4b38      	ldr	r3, [pc, #224]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c2a:	d102      	bne.n	8000c32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1f2      	bne.n	8000c18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c32:	4b33      	ldr	r3, [pc, #204]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c3e:	d158      	bne.n	8000cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c40:	2303      	movs	r3, #3
 8000c42:	e057      	b.n	8000cf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c44:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c4a:	4a2d      	ldr	r2, [pc, #180]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000c54:	e04d      	b.n	8000cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c5c:	d141      	bne.n	8000ce2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c6a:	d131      	bne.n	8000cd0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c6c:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c72:	4a23      	ldr	r2, [pc, #140]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c7c:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c84:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2232      	movs	r2, #50	; 0x32
 8000c92:	fb02 f303 	mul.w	r3, r2, r3
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	0c9b      	lsrs	r3, r3, #18
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ca2:	e002      	b.n	8000caa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cb6:	d102      	bne.n	8000cbe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f2      	bne.n	8000ca4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cca:	d112      	bne.n	8000cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e011      	b.n	8000cf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ce0:	e007      	b.n	8000cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40007000 	.word	0x40007000
 8000d04:	20000008 	.word	0x20000008
 8000d08:	431bde83 	.word	0x431bde83

08000d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e308      	b.n	8001330 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d075      	beq.n	8000e16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d2a:	4ba3      	ldr	r3, [pc, #652]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d34:	4ba0      	ldr	r3, [pc, #640]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	2b0c      	cmp	r3, #12
 8000d42:	d102      	bne.n	8000d4a <HAL_RCC_OscConfig+0x3e>
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d002      	beq.n	8000d50 <HAL_RCC_OscConfig+0x44>
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	2b08      	cmp	r3, #8
 8000d4e:	d10b      	bne.n	8000d68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d50:	4b99      	ldr	r3, [pc, #612]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d05b      	beq.n	8000e14 <HAL_RCC_OscConfig+0x108>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d157      	bne.n	8000e14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e2e3      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d70:	d106      	bne.n	8000d80 <HAL_RCC_OscConfig+0x74>
 8000d72:	4b91      	ldr	r3, [pc, #580]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a90      	ldr	r2, [pc, #576]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e01d      	b.n	8000dbc <HAL_RCC_OscConfig+0xb0>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d88:	d10c      	bne.n	8000da4 <HAL_RCC_OscConfig+0x98>
 8000d8a:	4b8b      	ldr	r3, [pc, #556]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a8a      	ldr	r2, [pc, #552]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b88      	ldr	r3, [pc, #544]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a87      	ldr	r2, [pc, #540]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e00b      	b.n	8000dbc <HAL_RCC_OscConfig+0xb0>
 8000da4:	4b84      	ldr	r3, [pc, #528]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a83      	ldr	r2, [pc, #524]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b81      	ldr	r3, [pc, #516]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a80      	ldr	r2, [pc, #512]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d013      	beq.n	8000dec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fa8c 	bl	80002e0 <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dcc:	f7ff fa88 	bl	80002e0 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b64      	cmp	r3, #100	; 0x64
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e2a8      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dde:	4b76      	ldr	r3, [pc, #472]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f0      	beq.n	8000dcc <HAL_RCC_OscConfig+0xc0>
 8000dea:	e014      	b.n	8000e16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dec:	f7ff fa78 	bl	80002e0 <HAL_GetTick>
 8000df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df4:	f7ff fa74 	bl	80002e0 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b64      	cmp	r3, #100	; 0x64
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e294      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e06:	4b6c      	ldr	r3, [pc, #432]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1f0      	bne.n	8000df4 <HAL_RCC_OscConfig+0xe8>
 8000e12:	e000      	b.n	8000e16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d075      	beq.n	8000f0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e22:	4b65      	ldr	r3, [pc, #404]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e2c:	4b62      	ldr	r3, [pc, #392]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	2b0c      	cmp	r3, #12
 8000e3a:	d102      	bne.n	8000e42 <HAL_RCC_OscConfig+0x136>
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d002      	beq.n	8000e48 <HAL_RCC_OscConfig+0x13c>
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d11f      	bne.n	8000e88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e48:	4b5b      	ldr	r3, [pc, #364]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d005      	beq.n	8000e60 <HAL_RCC_OscConfig+0x154>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e267      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e60:	4b55      	ldr	r3, [pc, #340]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	061b      	lsls	r3, r3, #24
 8000e6e:	4952      	ldr	r1, [pc, #328]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000e70:	4313      	orrs	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e74:	4b51      	ldr	r3, [pc, #324]	; (8000fbc <HAL_RCC_OscConfig+0x2b0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff f9e5 	bl	8000248 <HAL_InitTick>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d043      	beq.n	8000f0c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e253      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d023      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e90:	4b49      	ldr	r3, [pc, #292]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a48      	ldr	r2, [pc, #288]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fa20 	bl	80002e0 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fa1c 	bl	80002e0 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e23c      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000eb6:	4b40      	ldr	r3, [pc, #256]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0f0      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec2:	4b3d      	ldr	r3, [pc, #244]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	061b      	lsls	r3, r3, #24
 8000ed0:	4939      	ldr	r1, [pc, #228]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	604b      	str	r3, [r1, #4]
 8000ed6:	e01a      	b.n	8000f0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ed8:	4b37      	ldr	r3, [pc, #220]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a36      	ldr	r2, [pc, #216]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee4:	f7ff f9fc 	bl	80002e0 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eec:	f7ff f9f8 	bl	80002e0 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e218      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000efe:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f0      	bne.n	8000eec <HAL_RCC_OscConfig+0x1e0>
 8000f0a:	e000      	b.n	8000f0e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d03c      	beq.n	8000f94 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d01c      	beq.n	8000f5c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f28:	4a23      	ldr	r2, [pc, #140]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f32:	f7ff f9d5 	bl	80002e0 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f3a:	f7ff f9d1 	bl	80002e0 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e1f1      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0ef      	beq.n	8000f3a <HAL_RCC_OscConfig+0x22e>
 8000f5a:	e01b      	b.n	8000f94 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f62:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000f64:	f023 0301 	bic.w	r3, r3, #1
 8000f68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f6c:	f7ff f9b8 	bl	80002e0 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f74:	f7ff f9b4 	bl	80002e0 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e1d4      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1ef      	bne.n	8000f74 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80ab 	beq.w	80010f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d106      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x2b4>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e005      	b.n	8000fc2 <HAL_RCC_OscConfig+0x2b6>
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00d      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4baf      	ldr	r3, [pc, #700]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	4aae      	ldr	r2, [pc, #696]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd2:	4bac      	ldr	r3, [pc, #688]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fe2:	4ba9      	ldr	r3, [pc, #676]	; (8001288 <HAL_RCC_OscConfig+0x57c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d118      	bne.n	8001020 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fee:	4ba6      	ldr	r3, [pc, #664]	; (8001288 <HAL_RCC_OscConfig+0x57c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4aa5      	ldr	r2, [pc, #660]	; (8001288 <HAL_RCC_OscConfig+0x57c>)
 8000ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ffa:	f7ff f971 	bl	80002e0 <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001000:	e008      	b.n	8001014 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001002:	f7ff f96d 	bl	80002e0 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e18d      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001014:	4b9c      	ldr	r3, [pc, #624]	; (8001288 <HAL_RCC_OscConfig+0x57c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f0      	beq.n	8001002 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d108      	bne.n	800103a <HAL_RCC_OscConfig+0x32e>
 8001028:	4b96      	ldr	r3, [pc, #600]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 800102a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800102e:	4a95      	ldr	r2, [pc, #596]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001038:	e024      	b.n	8001084 <HAL_RCC_OscConfig+0x378>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2b05      	cmp	r3, #5
 8001040:	d110      	bne.n	8001064 <HAL_RCC_OscConfig+0x358>
 8001042:	4b90      	ldr	r3, [pc, #576]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001048:	4a8e      	ldr	r2, [pc, #568]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001052:	4b8c      	ldr	r3, [pc, #560]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001058:	4a8a      	ldr	r2, [pc, #552]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001062:	e00f      	b.n	8001084 <HAL_RCC_OscConfig+0x378>
 8001064:	4b87      	ldr	r3, [pc, #540]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800106a:	4a86      	ldr	r2, [pc, #536]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 800106c:	f023 0301 	bic.w	r3, r3, #1
 8001070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001074:	4b83      	ldr	r3, [pc, #524]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800107a:	4a82      	ldr	r2, [pc, #520]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d016      	beq.n	80010ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800108c:	f7ff f928 	bl	80002e0 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001092:	e00a      	b.n	80010aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001094:	f7ff f924 	bl	80002e0 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e142      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010aa:	4b76      	ldr	r3, [pc, #472]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 80010ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0ed      	beq.n	8001094 <HAL_RCC_OscConfig+0x388>
 80010b8:	e015      	b.n	80010e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ba:	f7ff f911 	bl	80002e0 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010c0:	e00a      	b.n	80010d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c2:	f7ff f90d 	bl	80002e0 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e12b      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010d8:	4b6a      	ldr	r3, [pc, #424]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 80010da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1ed      	bne.n	80010c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010e6:	7ffb      	ldrb	r3, [r7, #31]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d105      	bne.n	80010f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ec:	4b65      	ldr	r3, [pc, #404]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f0:	4a64      	ldr	r2, [pc, #400]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 80010f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0320 	and.w	r3, r3, #32
 8001100:	2b00      	cmp	r3, #0
 8001102:	d03c      	beq.n	800117e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d01c      	beq.n	8001146 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800110c:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 800110e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001112:	4a5c      	ldr	r2, [pc, #368]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800111c:	f7ff f8e0 	bl	80002e0 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001124:	f7ff f8dc 	bl	80002e0 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e0fc      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001136:	4b53      	ldr	r3, [pc, #332]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0ef      	beq.n	8001124 <HAL_RCC_OscConfig+0x418>
 8001144:	e01b      	b.n	800117e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001146:	4b4f      	ldr	r3, [pc, #316]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800114c:	4a4d      	ldr	r2, [pc, #308]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 800114e:	f023 0301 	bic.w	r3, r3, #1
 8001152:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001156:	f7ff f8c3 	bl	80002e0 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800115e:	f7ff f8bf 	bl	80002e0 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e0df      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001170:	4b44      	ldr	r3, [pc, #272]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001172:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1ef      	bne.n	800115e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80d3 	beq.w	800132e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001188:	4b3e      	ldr	r3, [pc, #248]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b0c      	cmp	r3, #12
 8001192:	f000 808d 	beq.w	80012b0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d15a      	bne.n	8001254 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119e:	4b39      	ldr	r3, [pc, #228]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a38      	ldr	r2, [pc, #224]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 80011a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011aa:	f7ff f899 	bl	80002e0 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b2:	f7ff f895 	bl	80002e0 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e0b5      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011c4:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f0      	bne.n	80011b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011d0:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_RCC_OscConfig+0x580>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6a11      	ldr	r1, [r2, #32]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011e0:	3a01      	subs	r2, #1
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	4311      	orrs	r1, r2
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80011ea:	0212      	lsls	r2, r2, #8
 80011ec:	4311      	orrs	r1, r2
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011f2:	0852      	lsrs	r2, r2, #1
 80011f4:	3a01      	subs	r2, #1
 80011f6:	0552      	lsls	r2, r2, #21
 80011f8:	4311      	orrs	r1, r2
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011fe:	0852      	lsrs	r2, r2, #1
 8001200:	3a01      	subs	r2, #1
 8001202:	0652      	lsls	r2, r2, #25
 8001204:	4311      	orrs	r1, r2
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800120a:	06d2      	lsls	r2, r2, #27
 800120c:	430a      	orrs	r2, r1
 800120e:	491d      	ldr	r1, [pc, #116]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001210:	4313      	orrs	r3, r2
 8001212:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 800121a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800121e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800122a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122c:	f7ff f858 	bl	80002e0 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001234:	f7ff f854 	bl	80002e0 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e074      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x528>
 8001252:	e06c      	b.n	800132e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 800125a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800125e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	4a07      	ldr	r2, [pc, #28]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001266:	f023 0303 	bic.w	r3, r3, #3
 800126a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_RCC_OscConfig+0x578>)
 8001272:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff f830 	bl	80002e0 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001282:	e00e      	b.n	80012a2 <HAL_RCC_OscConfig+0x596>
 8001284:	40021000 	.word	0x40021000
 8001288:	40007000 	.word	0x40007000
 800128c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001290:	f7ff f826 	bl	80002e0 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e046      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012a2:	4b25      	ldr	r3, [pc, #148]	; (8001338 <HAL_RCC_OscConfig+0x62c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f0      	bne.n	8001290 <HAL_RCC_OscConfig+0x584>
 80012ae:	e03e      	b.n	800132e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d101      	bne.n	80012bc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e039      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <HAL_RCC_OscConfig+0x62c>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f003 0203 	and.w	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d12c      	bne.n	800132a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	3b01      	subs	r3, #1
 80012dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012de:	429a      	cmp	r2, r3
 80012e0:	d123      	bne.n	800132a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d11b      	bne.n	800132a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012fe:	429a      	cmp	r2, r3
 8001300:	d113      	bne.n	800132a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	085b      	lsrs	r3, r3, #1
 800130e:	3b01      	subs	r3, #1
 8001310:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001312:	429a      	cmp	r2, r3
 8001314:	d109      	bne.n	800132a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001320:	085b      	lsrs	r3, r3, #1
 8001322:	3b01      	subs	r3, #1
 8001324:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001326:	429a      	cmp	r2, r3
 8001328:	d001      	beq.n	800132e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000

0800133c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e11e      	b.n	8001592 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001354:	4b91      	ldr	r3, [pc, #580]	; (800159c <HAL_RCC_ClockConfig+0x260>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 030f 	and.w	r3, r3, #15
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	d910      	bls.n	8001384 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001362:	4b8e      	ldr	r3, [pc, #568]	; (800159c <HAL_RCC_ClockConfig+0x260>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 020f 	bic.w	r2, r3, #15
 800136a:	498c      	ldr	r1, [pc, #560]	; (800159c <HAL_RCC_ClockConfig+0x260>)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001372:	4b8a      	ldr	r3, [pc, #552]	; (800159c <HAL_RCC_ClockConfig+0x260>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d001      	beq.n	8001384 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e106      	b.n	8001592 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d073      	beq.n	8001478 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b03      	cmp	r3, #3
 8001396:	d129      	bne.n	80013ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001398:	4b81      	ldr	r3, [pc, #516]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0f4      	b.n	8001592 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80013a8:	f000 f966 	bl	8001678 <RCC_GetSysClockFreqFromPLLSource>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4a7c      	ldr	r2, [pc, #496]	; (80015a4 <HAL_RCC_ClockConfig+0x268>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d93f      	bls.n	8001436 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80013b6:	4b7a      	ldr	r3, [pc, #488]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d009      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d033      	beq.n	8001436 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d12f      	bne.n	8001436 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80013d6:	4b72      	ldr	r3, [pc, #456]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013de:	4a70      	ldr	r2, [pc, #448]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 80013e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e024      	b.n	8001436 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d107      	bne.n	8001404 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013f4:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d109      	bne.n	8001414 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0c6      	b.n	8001592 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001404:	4b66      	ldr	r3, [pc, #408]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0be      	b.n	8001592 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001414:	f000 f8ce 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 8001418:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4a61      	ldr	r2, [pc, #388]	; (80015a4 <HAL_RCC_ClockConfig+0x268>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d909      	bls.n	8001436 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001422:	4b5f      	ldr	r3, [pc, #380]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800142a:	4a5d      	ldr	r2, [pc, #372]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 800142c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001430:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001436:	4b5a      	ldr	r3, [pc, #360]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f023 0203 	bic.w	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4957      	ldr	r1, [pc, #348]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 8001444:	4313      	orrs	r3, r2
 8001446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001448:	f7fe ff4a 	bl	80002e0 <HAL_GetTick>
 800144c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144e:	e00a      	b.n	8001466 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001450:	f7fe ff46 	bl	80002e0 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	; 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e095      	b.n	8001592 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001466:	4b4e      	ldr	r3, [pc, #312]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 020c 	and.w	r2, r3, #12
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	429a      	cmp	r2, r3
 8001476:	d1eb      	bne.n	8001450 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d023      	beq.n	80014cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001490:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4a42      	ldr	r2, [pc, #264]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 8001496:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800149a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d007      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80014a8:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80014b0:	4a3b      	ldr	r2, [pc, #236]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 80014b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b8:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	4936      	ldr	r1, [pc, #216]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	608b      	str	r3, [r1, #8]
 80014ca:	e008      	b.n	80014de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2b80      	cmp	r3, #128	; 0x80
 80014d0:	d105      	bne.n	80014de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	4a32      	ldr	r2, [pc, #200]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 80014d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014de:	4b2f      	ldr	r3, [pc, #188]	; (800159c <HAL_RCC_ClockConfig+0x260>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d21d      	bcs.n	8001528 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_RCC_ClockConfig+0x260>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 020f 	bic.w	r2, r3, #15
 80014f4:	4929      	ldr	r1, [pc, #164]	; (800159c <HAL_RCC_ClockConfig+0x260>)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014fc:	f7fe fef0 	bl	80002e0 <HAL_GetTick>
 8001500:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001502:	e00a      	b.n	800151a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001504:	f7fe feec 	bl	80002e0 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e03b      	b.n	8001592 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <HAL_RCC_ClockConfig+0x260>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d1ed      	bne.n	8001504 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4917      	ldr	r1, [pc, #92]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 8001542:	4313      	orrs	r3, r2
 8001544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d009      	beq.n	8001566 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	490f      	ldr	r1, [pc, #60]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 8001562:	4313      	orrs	r3, r2
 8001564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001566:	f000 f825 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 800156a:	4601      	mov	r1, r0
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_RCC_ClockConfig+0x264>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <HAL_RCC_ClockConfig+0x26c>)
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	fa21 f303 	lsr.w	r3, r1, r3
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_RCC_ClockConfig+0x270>)
 8001584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_RCC_ClockConfig+0x274>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe fe5c 	bl	8000248 <HAL_InitTick>
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40022000 	.word	0x40022000
 80015a0:	40021000 	.word	0x40021000
 80015a4:	04c4b400 	.word	0x04c4b400
 80015a8:	08001a08 	.word	0x08001a08
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000000 	.word	0x20000000

080015b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80015ba:	4b2c      	ldr	r3, [pc, #176]	; (800166c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d102      	bne.n	80015cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	e047      	b.n	800165c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d102      	bne.n	80015de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	e03e      	b.n	800165c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	d136      	bne.n	8001658 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3301      	adds	r3, #1
 8001600:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d10c      	bne.n	8001622 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001608:	4a1a      	ldr	r2, [pc, #104]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc0>)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001610:	4a16      	ldr	r2, [pc, #88]	; (800166c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001612:	68d2      	ldr	r2, [r2, #12]
 8001614:	0a12      	lsrs	r2, r2, #8
 8001616:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	617b      	str	r3, [r7, #20]
      break;
 8001620:	e00c      	b.n	800163c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001622:	4a13      	ldr	r2, [pc, #76]	; (8001670 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4a10      	ldr	r2, [pc, #64]	; (800166c <HAL_RCC_GetSysClockFreq+0xb8>)
 800162c:	68d2      	ldr	r2, [r2, #12]
 800162e:	0a12      	lsrs	r2, r2, #8
 8001630:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	617b      	str	r3, [r7, #20]
      break;
 800163a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_RCC_GetSysClockFreq+0xb8>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0e5b      	lsrs	r3, r3, #25
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	3301      	adds	r3, #1
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	fbb2 f3f3 	udiv	r3, r2, r3
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	e001      	b.n	800165c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800165c:	693b      	ldr	r3, [r7, #16]
}
 800165e:	4618      	mov	r0, r3
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	00f42400 	.word	0x00f42400
 8001674:	007a1200 	.word	0x007a1200

08001678 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3301      	adds	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d10c      	bne.n	80016b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800169c:	4a17      	ldr	r2, [pc, #92]	; (80016fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016a6:	68d2      	ldr	r2, [r2, #12]
 80016a8:	0a12      	lsrs	r2, r2, #8
 80016aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	617b      	str	r3, [r7, #20]
    break;
 80016b4:	e00c      	b.n	80016d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016c0:	68d2      	ldr	r2, [r2, #12]
 80016c2:	0a12      	lsrs	r2, r2, #8
 80016c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	617b      	str	r3, [r7, #20]
    break;
 80016ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0e5b      	lsrs	r3, r3, #25
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	3301      	adds	r3, #1
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80016ea:	687b      	ldr	r3, [r7, #4]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40021000 	.word	0x40021000
 80016fc:	007a1200 	.word	0x007a1200
 8001700:	00f42400 	.word	0x00f42400

08001704 <main>:
FDCAN_HandleTypeDef hfdcan;
uint8_t CANTxData[8];


int main(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	HAL_Init();
 8001708:	f7fe fd86 	bl	8000218 <HAL_Init>

	SystemClock_Config();
 800170c:	f000 f80c 	bl	8001728 <SystemClock_Config>

	MX_GPIO_Init();
 8001710:	f000 f84a 	bl	80017a8 <MX_GPIO_Init>

	while (1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8001714:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171c:	f7ff fa38 	bl	8000b90 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001720:	20c8      	movs	r0, #200	; 0xc8
 8001722:	f7fe fde9 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8001726:	e7f5      	b.n	8001714 <main+0x10>

08001728 <SystemClock_Config>:
		return;
	}
}

void SystemClock_Config(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b094      	sub	sp, #80	; 0x50
 800172c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172e:	f107 0318 	add.w	r3, r7, #24
 8001732:	2238      	movs	r2, #56	; 0x38
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f952 	bl	80019e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800174a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800174e:	f7ff fa39 	bl	8000bc4 <HAL_PWREx_ControlVoltageScaling>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800175c:	2340      	movs	r3, #64	; 0x40
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001760:	2300      	movs	r3, #0
 8001762:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001764:	f107 0318 	add.w	r3, r7, #24
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff facf 	bl	8000d0c <HAL_RCC_OscConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0x50>
	{
		Error_Handler();
 8001774:	f000 f858 	bl	8001828 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8001778:	230f      	movs	r3, #15
 800177a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800177c:	2301      	movs	r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fdd3 	bl	800133c <HAL_RCC_ClockConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SystemClock_Config+0x78>
	{
		Error_Handler();
 800179c:	f000 f844 	bl	8001828 <Error_Handler>
	}
}
 80017a0:	bf00      	nop
 80017a2:	3750      	adds	r7, #80	; 0x50
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOF_CLK_ENABLE();
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <MX_GPIO_Init+0x7c>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <MX_GPIO_Init+0x7c>)
 80017c4:	f043 0320 	orr.w	r3, r3, #32
 80017c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_GPIO_Init+0x7c>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <MX_GPIO_Init+0x7c>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <MX_GPIO_Init+0x7c>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <MX_GPIO_Init+0x7c>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f8:	f7ff f9b2 	bl	8000b60 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001800:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001818:	f7ff f820 	bl	800085c <HAL_GPIO_Init>
}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000

08001828 <Error_Handler>:
		Error_Handler();
	}
}

void Error_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 800182c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001834:	f7ff f9ac 	bl	8000b90 <HAL_GPIO_TogglePin>
		HAL_Delay(33);
 8001838:	2021      	movs	r0, #33	; 0x21
 800183a:	f7fe fd5d 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 800183e:	e7f5      	b.n	800182c <Error_Handler+0x4>

08001840 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800184a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800184e:	6093      	str	r3, [r2, #8]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40007000 	.word	0x40007000

08001860 <HAL_MspInit>:
#include "main.h"


void HAL_MspInit(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <HAL_MspInit+0x44>)
 8001868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186a:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <HAL_MspInit+0x44>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6613      	str	r3, [r2, #96]	; 0x60
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_MspInit+0x44>)
 8001874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_MspInit+0x44>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_MspInit+0x44>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001888:	6593      	str	r3, [r2, #88]	; 0x58
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_MspInit+0x44>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]

	LL_PWR_DisableDeadBatteryPD();
 8001896:	f7ff ffd3 	bl	8001840 <LL_PWR_DisableDeadBatteryPD>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000

080018a8 <FDCAN1_IT0_IRQHandler>:

//external type handlers
extern FDCAN_HandleTypeDef hfdcan;

void FDCAN1_IT0_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(&hfdcan);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <FDCAN1_IT0_IRQHandler+0x10>)
 80018ae:	f7fe fe28 	bl	8000502 <HAL_FDCAN_IRQHandler>
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000002c 	.word	0x2000002c

080018bc <NMI_Handler>:


void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <HardFault_Handler>:

void HardFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
	while (1)
 80018ce:	e7fe      	b.n	80018ce <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

	}
}

void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	while (1)
 80018d4:	e7fe      	b.n	80018d4 <MemManage_Handler+0x4>

080018d6 <BusFault_Handler>:

	}
}

void BusFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
	while (1)
 80018da:	e7fe      	b.n	80018da <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

	}
}

void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e2 <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <PendSV_Handler>:

void PendSV_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <SysTick_Handler>:

void SysTick_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001910:	f7fe fcd4 	bl	80002bc <HAL_IncTick>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <SystemInit+0x28>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001922:	4a07      	ldr	r2, [pc, #28]	; (8001940 <SystemInit+0x28>)
 8001924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SystemInit+0x28>)
 800192e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001932:	609a      	str	r2, [r3, #8]
#endif
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001944:	480d      	ldr	r0, [pc, #52]	; (800197c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001946:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <LoopForever+0x6>)
  ldr r1, =_edata
 800194a:	490e      	ldr	r1, [pc, #56]	; (8001984 <LoopForever+0xa>)
  ldr r2, =_sidata
 800194c:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <LoopForever+0xe>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001960:	4c0b      	ldr	r4, [pc, #44]	; (8001990 <LoopForever+0x16>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800196e:	f7ff ffd3 	bl	8001918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001972:	f000 f811 	bl	8001998 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001976:	f7ff fec5 	bl	8001704 <main>

0800197a <LoopForever>:

LoopForever:
    b LoopForever
 800197a:	e7fe      	b.n	800197a <LoopForever>
  ldr   r0, =_estack
 800197c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001988:	08001a20 	.word	0x08001a20
  ldr r2, =_sbss
 800198c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001990:	20000098 	.word	0x20000098

08001994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC1_2_IRQHandler>
	...

08001998 <__libc_init_array>:
 8001998:	b570      	push	{r4, r5, r6, lr}
 800199a:	4e0d      	ldr	r6, [pc, #52]	; (80019d0 <__libc_init_array+0x38>)
 800199c:	4c0d      	ldr	r4, [pc, #52]	; (80019d4 <__libc_init_array+0x3c>)
 800199e:	1ba4      	subs	r4, r4, r6
 80019a0:	10a4      	asrs	r4, r4, #2
 80019a2:	2500      	movs	r5, #0
 80019a4:	42a5      	cmp	r5, r4
 80019a6:	d109      	bne.n	80019bc <__libc_init_array+0x24>
 80019a8:	4e0b      	ldr	r6, [pc, #44]	; (80019d8 <__libc_init_array+0x40>)
 80019aa:	4c0c      	ldr	r4, [pc, #48]	; (80019dc <__libc_init_array+0x44>)
 80019ac:	f000 f820 	bl	80019f0 <_init>
 80019b0:	1ba4      	subs	r4, r4, r6
 80019b2:	10a4      	asrs	r4, r4, #2
 80019b4:	2500      	movs	r5, #0
 80019b6:	42a5      	cmp	r5, r4
 80019b8:	d105      	bne.n	80019c6 <__libc_init_array+0x2e>
 80019ba:	bd70      	pop	{r4, r5, r6, pc}
 80019bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019c0:	4798      	blx	r3
 80019c2:	3501      	adds	r5, #1
 80019c4:	e7ee      	b.n	80019a4 <__libc_init_array+0xc>
 80019c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019ca:	4798      	blx	r3
 80019cc:	3501      	adds	r5, #1
 80019ce:	e7f2      	b.n	80019b6 <__libc_init_array+0x1e>
 80019d0:	08001a18 	.word	0x08001a18
 80019d4:	08001a18 	.word	0x08001a18
 80019d8:	08001a18 	.word	0x08001a18
 80019dc:	08001a1c 	.word	0x08001a1c

080019e0 <memset>:
 80019e0:	4402      	add	r2, r0
 80019e2:	4603      	mov	r3, r0
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d100      	bne.n	80019ea <memset+0xa>
 80019e8:	4770      	bx	lr
 80019ea:	f803 1b01 	strb.w	r1, [r3], #1
 80019ee:	e7f9      	b.n	80019e4 <memset+0x4>

080019f0 <_init>:
 80019f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f2:	bf00      	nop
 80019f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019f6:	bc08      	pop	{r3}
 80019f8:	469e      	mov	lr, r3
 80019fa:	4770      	bx	lr

080019fc <_fini>:
 80019fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fe:	bf00      	nop
 8001a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a02:	bc08      	pop	{r3}
 8001a04:	469e      	mov	lr, r3
 8001a06:	4770      	bx	lr
