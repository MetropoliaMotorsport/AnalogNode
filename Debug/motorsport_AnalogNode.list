
motorsport_AnalogNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000533c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005514  08005514  00015514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005534  08005534  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08005534  08005534  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005534  08005534  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005534  08005534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800553c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ef8  2000008c  080055c8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f84  080055c8  00020f84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001401e  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023cd  00000000  00000000  000340da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d8  00000000  00000000  000364a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b0  00000000  00000000  00037880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ff5a  00000000  00000000  00038b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da85  00000000  00000000  00058a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7339  00000000  00000000  0006650f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d848  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000554c  00000000  00000000  0013d8c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000008c 	.word	0x2000008c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080054fc 	.word	0x080054fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000090 	.word	0x20000090
 8000214:	080054fc 	.word	0x080054fc

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f001 fbdc 	bl	80019e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f004 fe57 	bl	8004eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f001 fbe8 	bl	8001a46 <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f001 fbb4 	bl	80019f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000008 	.word	0x20000008
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	200000ac 	.word	0x200000ac
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	200000ac 	.word	0x200000ac

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	431a      	orrs	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	431a      	orrs	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	609a      	str	r2, [r3, #8]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000398:	4618      	mov	r0, r3
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80003a4:	b490      	push	{r4, r7}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	3360      	adds	r3, #96	; 0x60
 80003b6:	461a      	mov	r2, r3
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4413      	add	r3, r2
 80003be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80003c0:	6822      	ldr	r2, [r4, #0]
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <LL_ADC_SetOffset+0x40>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	430a      	orrs	r2, r1
 80003d0:	4313      	orrs	r3, r2
 80003d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003d6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc90      	pop	{r4, r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	03fff000 	.word	0x03fff000

080003e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80003e8:	b490      	push	{r4, r7}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3360      	adds	r3, #96	; 0x60
 80003f6:	461a      	mov	r2, r3
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000400:	6823      	ldr	r3, [r4, #0]
 8000402:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bc90      	pop	{r4, r7}
 800040e:	4770      	bx	lr

08000410 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000410:	b490      	push	{r4, r7}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	3360      	adds	r3, #96	; 0x60
 8000420:	461a      	mov	r2, r3
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800042a:	6823      	ldr	r3, [r4, #0]
 800042c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4313      	orrs	r3, r2
 8000434:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bc90      	pop	{r4, r7}
 800043e:	4770      	bx	lr

08000440 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000440:	b490      	push	{r4, r7}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3360      	adds	r3, #96	; 0x60
 8000450:	461a      	mov	r2, r3
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800045a:	6823      	ldr	r3, [r4, #0]
 800045c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4313      	orrs	r3, r2
 8000464:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bc90      	pop	{r4, r7}
 800046e:	4770      	bx	lr

08000470 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000470:	b490      	push	{r4, r7}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3360      	adds	r3, #96	; 0x60
 8000480:	461a      	mov	r2, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4413      	add	r3, r2
 8000488:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800048a:	6823      	ldr	r3, [r4, #0]
 800048c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bc90      	pop	{r4, r7}
 800049e:	4770      	bx	lr

080004a0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	615a      	str	r2, [r3, #20]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d101      	bne.n	80004de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80004da:	2301      	movs	r3, #1
 80004dc:	e000      	b.n	80004e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004ec:	b490      	push	{r4, r7}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3330      	adds	r3, #48	; 0x30
 80004fc:	461a      	mov	r2, r3
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	0a1b      	lsrs	r3, r3, #8
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	f003 030c 	and.w	r3, r3, #12
 8000508:	4413      	add	r3, r2
 800050a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800050c:	6822      	ldr	r2, [r4, #0]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	f003 031f 	and.w	r3, r3, #31
 8000514:	211f      	movs	r1, #31
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	43db      	mvns	r3, r3
 800051c:	401a      	ands	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	0e9b      	lsrs	r3, r3, #26
 8000522:	f003 011f 	and.w	r1, r3, #31
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	f003 031f 	and.w	r3, r3, #31
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	4313      	orrs	r3, r2
 8000532:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bc90      	pop	{r4, r7}
 800053c:	4770      	bx	lr

0800053e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800053e:	b490      	push	{r4, r7}
 8000540:	b084      	sub	sp, #16
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	3314      	adds	r3, #20
 800054e:	461a      	mov	r2, r3
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	0e5b      	lsrs	r3, r3, #25
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	4413      	add	r3, r2
 800055c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800055e:	6822      	ldr	r2, [r4, #0]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	0d1b      	lsrs	r3, r3, #20
 8000564:	f003 031f 	and.w	r3, r3, #31
 8000568:	2107      	movs	r1, #7
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	43db      	mvns	r3, r3
 8000570:	401a      	ands	r2, r3
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	0d1b      	lsrs	r3, r3, #20
 8000576:	f003 031f 	and.w	r3, r3, #31
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	4313      	orrs	r3, r2
 8000582:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bc90      	pop	{r4, r7}
 800058c:	4770      	bx	lr
	...

08000590 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005a8:	43db      	mvns	r3, r3
 80005aa:	401a      	ands	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f003 0318 	and.w	r3, r3, #24
 80005b2:	4908      	ldr	r1, [pc, #32]	; (80005d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80005b4:	40d9      	lsrs	r1, r3
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	400b      	ands	r3, r1
 80005ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005be:	431a      	orrs	r2, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	0007ffff 	.word	0x0007ffff

080005d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f003 031f 	and.w	r3, r3, #31
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000604:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	6093      	str	r3, [r2, #8]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800062c:	d101      	bne.n	8000632 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000650:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000654:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800067c:	d101      	bne.n	8000682 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800067e:	2301      	movs	r3, #1
 8000680:	e000      	b.n	8000684 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80006a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006a4:	f043 0201 	orr.w	r2, r3, #1
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80006c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006cc:	f043 0202 	orr.w	r2, r3, #2
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d101      	bne.n	80006f8 <LL_ADC_IsEnabled+0x18>
 80006f4:	2301      	movs	r3, #1
 80006f6:	e000      	b.n	80006fa <LL_ADC_IsEnabled+0x1a>
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	2b02      	cmp	r3, #2
 8000718:	d101      	bne.n	800071e <LL_ADC_IsDisableOngoing+0x18>
 800071a:	2301      	movs	r3, #1
 800071c:	e000      	b.n	8000720 <LL_ADC_IsDisableOngoing+0x1a>
 800071e:	2300      	movs	r3, #0
}
 8000720:	4618      	mov	r0, r3
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800073c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000740:	f043 0204 	orr.w	r2, r3, #4
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	2b04      	cmp	r3, #4
 8000766:	d101      	bne.n	800076c <LL_ADC_REG_IsConversionOngoing+0x18>
 8000768:	2301      	movs	r3, #1
 800076a:	e000      	b.n	800076e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	2b08      	cmp	r3, #8
 800078c:	d101      	bne.n	8000792 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800078e:	2301      	movs	r3, #1
 8000790:	e000      	b.n	8000794 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000792:	2300      	movs	r3, #0
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007a8:	2300      	movs	r3, #0
 80007aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d101      	bne.n	80007ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e16b      	b.n	8000a92 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d109      	bne.n	80007dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f004 fbb3 	bl	8004f34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff19 	bl	8000618 <LL_ADC_IsDeepPowerDownEnabled>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d004      	beq.n	80007f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff feff 	bl	80005f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff34 	bl	8000668 <LL_ADC_IsInternalRegulatorEnabled>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d113      	bne.n	800082e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff18 	bl	8000640 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000810:	4ba2      	ldr	r3, [pc, #648]	; (8000a9c <HAL_ADC_Init+0x2fc>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	099b      	lsrs	r3, r3, #6
 8000816:	4aa2      	ldr	r2, [pc, #648]	; (8000aa0 <HAL_ADC_Init+0x300>)
 8000818:	fba2 2303 	umull	r2, r3, r2, r3
 800081c:	099b      	lsrs	r3, r3, #6
 800081e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000820:	e002      	b.n	8000828 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	3b01      	subs	r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1f9      	bne.n	8000822 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ff18 	bl	8000668 <LL_ADC_IsInternalRegulatorEnabled>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10d      	bne.n	800085a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000842:	f043 0210 	orr.w	r2, r3, #16
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084e:	f043 0201 	orr.w	r2, r3, #1
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff78 	bl	8000754 <LL_ADC_REG_IsConversionOngoing>
 8000864:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800086a:	f003 0310 	and.w	r3, r3, #16
 800086e:	2b00      	cmp	r3, #0
 8000870:	f040 8106 	bne.w	8000a80 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	2b00      	cmp	r3, #0
 8000878:	f040 8102 	bne.w	8000a80 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000880:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000884:	f043 0202 	orr.w	r2, r3, #2
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff25 	bl	80006e0 <LL_ADC_IsEnabled>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d111      	bne.n	80008c0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800089c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80008a0:	f7ff ff1e 	bl	80006e0 <LL_ADC_IsEnabled>
 80008a4:	4604      	mov	r4, r0
 80008a6:	487f      	ldr	r0, [pc, #508]	; (8000aa4 <HAL_ADC_Init+0x304>)
 80008a8:	f7ff ff1a 	bl	80006e0 <LL_ADC_IsEnabled>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4323      	orrs	r3, r4
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d105      	bne.n	80008c0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	4619      	mov	r1, r3
 80008ba:	487b      	ldr	r0, [pc, #492]	; (8000aa8 <HAL_ADC_Init+0x308>)
 80008bc:	f7ff fd3e 	bl	800033c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7f5b      	ldrb	r3, [r3, #29]
 80008c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80008d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80008d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008e0:	4313      	orrs	r3, r2
 80008e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d106      	bne.n	80008fc <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f2:	3b01      	subs	r3, #1
 80008f4:	045b      	lsls	r3, r3, #17
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000900:	2b00      	cmp	r3, #0
 8000902:	d009      	beq.n	8000918 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000908:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4313      	orrs	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	4b63      	ldr	r3, [pc, #396]	; (8000aac <HAL_ADC_Init+0x30c>)
 8000920:	4013      	ands	r3, r2
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	6812      	ldr	r2, [r2, #0]
 8000926:	69b9      	ldr	r1, [r7, #24]
 8000928:	430b      	orrs	r3, r1
 800092a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	430a      	orrs	r2, r1
 8000940:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ff04 	bl	8000754 <LL_ADC_REG_IsConversionOngoing>
 800094c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff11 	bl	800077a <LL_ADC_INJ_IsConversionOngoing>
 8000958:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d16d      	bne.n	8000a3c <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d16a      	bne.n	8000a3c <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800096a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000972:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000974:	4313      	orrs	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000982:	f023 0302 	bic.w	r3, r3, #2
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	6812      	ldr	r2, [r2, #0]
 800098a:	69b9      	ldr	r1, [r7, #24]
 800098c:	430b      	orrs	r3, r1
 800098e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d017      	beq.n	80009c8 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	691a      	ldr	r2, [r3, #16]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80009a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80009b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	6911      	ldr	r1, [r2, #16]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	430b      	orrs	r3, r1
 80009c2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80009c6:	e013      	b.n	80009f0 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	691a      	ldr	r2, [r3, #16]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	6812      	ldr	r2, [r2, #0]
 80009e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80009e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d118      	bne.n	8000a2c <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	691b      	ldr	r3, [r3, #16]
 8000a00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000a04:	f023 0304 	bic.w	r3, r3, #4
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000a10:	4311      	orrs	r1, r2
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000a16:	4311      	orrs	r1, r2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f042 0201 	orr.w	r2, r2, #1
 8000a28:	611a      	str	r2, [r3, #16]
 8000a2a:	e007      	b.n	8000a3c <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	691a      	ldr	r2, [r3, #16]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f022 0201 	bic.w	r2, r2, #1
 8000a3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10c      	bne.n	8000a5e <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f023 010f 	bic.w	r1, r3, #15
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6a1b      	ldr	r3, [r3, #32]
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a5c:	e007      	b.n	8000a6e <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f022 020f 	bic.w	r2, r2, #15
 8000a6c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a72:	f023 0303 	bic.w	r3, r3, #3
 8000a76:	f043 0201 	orr.w	r2, r3, #1
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8000a7e:	e007      	b.n	8000a90 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a84:	f043 0210 	orr.w	r2, r3, #16
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000a90:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	053e2d63 	.word	0x053e2d63
 8000aa4:	50000100 	.word	0x50000100
 8000aa8:	50000300 	.word	0x50000300
 8000aac:	fff04007 	.word	0xfff04007

08000ab0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000abc:	4851      	ldr	r0, [pc, #324]	; (8000c04 <HAL_ADC_Start_DMA+0x154>)
 8000abe:	f7ff fd8b 	bl	80005d8 <LL_ADC_GetMultimode>
 8000ac2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fe43 	bl	8000754 <LL_ADC_REG_IsConversionOngoing>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	f040 808f 	bne.w	8000bf4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d101      	bne.n	8000ae4 <HAL_ADC_Start_DMA+0x34>
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e08a      	b.n	8000bfa <HAL_ADC_Start_DMA+0x14a>
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d005      	beq.n	8000afe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	2b05      	cmp	r3, #5
 8000af6:	d002      	beq.n	8000afe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	2b09      	cmp	r3, #9
 8000afc:	d173      	bne.n	8000be6 <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f000 fc02 	bl	8001308 <ADC_Enable>
 8000b04:	4603      	mov	r3, r0
 8000b06:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000b08:	7dfb      	ldrb	r3, [r7, #23]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d166      	bne.n	8000bdc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b16:	f023 0301 	bic.w	r3, r3, #1
 8000b1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a38      	ldr	r2, [pc, #224]	; (8000c08 <HAL_ADC_Start_DMA+0x158>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d002      	beq.n	8000b32 <HAL_ADC_Start_DMA+0x82>
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	e001      	b.n	8000b36 <HAL_ADC_Start_DMA+0x86>
 8000b32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	6812      	ldr	r2, [r2, #0]
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d002      	beq.n	8000b44 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d105      	bne.n	8000b50 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d006      	beq.n	8000b6a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b60:	f023 0206 	bic.w	r2, r3, #6
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	661a      	str	r2, [r3, #96]	; 0x60
 8000b68:	e002      	b.n	8000b70 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b74:	4a25      	ldr	r2, [pc, #148]	; (8000c0c <HAL_ADC_Start_DMA+0x15c>)
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b7c:	4a24      	ldr	r2, [pc, #144]	; (8000c10 <HAL_ADC_Start_DMA+0x160>)
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b84:	4a23      	ldr	r2, [pc, #140]	; (8000c14 <HAL_ADC_Start_DMA+0x164>)
 8000b86:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	221c      	movs	r2, #28
 8000b8e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2200      	movs	r2, #0
 8000b94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f042 0210 	orr.w	r2, r2, #16
 8000ba6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	68da      	ldr	r2, [r3, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f042 0201 	orr.w	r2, r2, #1
 8000bb6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3340      	adds	r3, #64	; 0x40
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	68ba      	ldr	r2, [r7, #8]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f000 fff2 	bl	8001bb0 <HAL_DMA_Start_IT>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fda9 	bl	800072c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8000bda:	e00d      	b.n	8000bf8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8000be4:	e008      	b.n	8000bf8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000bf2:	e001      	b.n	8000bf8 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	50000300 	.word	0x50000300
 8000c08:	50000100 	.word	0x50000100
 8000c0c:	0800146d 	.word	0x0800146d
 8000c10:	08001545 	.word	0x08001545
 8000c14:	08001561 	.word	0x08001561

08000c18 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b0a6      	sub	sp, #152	; 0x98
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d101      	bne.n	8000c62 <HAL_ADC_ConfigChannel+0x22>
 8000c5e:	2302      	movs	r3, #2
 8000c60:	e348      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x6b4>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2201      	movs	r2, #1
 8000c66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fd70 	bl	8000754 <LL_ADC_REG_IsConversionOngoing>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 832d 	bne.w	80012d6 <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	6859      	ldr	r1, [r3, #4]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	f7ff fc2f 	bl	80004ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fd5e 	bl	8000754 <LL_ADC_REG_IsConversionOngoing>
 8000c98:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd6a 	bl	800077a <LL_ADC_INJ_IsConversionOngoing>
 8000ca6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000caa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 817b 	bne.w	8000faa <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f040 8176 	bne.w	8000faa <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cc6:	d10f      	bne.n	8000ce8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f7ff fc33 	bl	800053e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fbdd 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>
 8000ce6:	e00e      	b.n	8000d06 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	6819      	ldr	r1, [r3, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	f7ff fc22 	bl	800053e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fbcd 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	695a      	ldr	r2, [r3, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	08db      	lsrs	r3, r3, #3
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	d022      	beq.n	8000d6e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	6919      	ldr	r1, [r3, #16]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d38:	f7ff fb34 	bl	80003a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	6919      	ldr	r1, [r3, #16]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	f7ff fb79 	bl	8000440 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6818      	ldr	r0, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	6919      	ldr	r1, [r3, #16]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	7f1b      	ldrb	r3, [r3, #28]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d102      	bne.n	8000d64 <HAL_ADC_ConfigChannel+0x124>
 8000d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d62:	e000      	b.n	8000d66 <HAL_ADC_ConfigChannel+0x126>
 8000d64:	2300      	movs	r3, #0
 8000d66:	461a      	mov	r2, r3
 8000d68:	f7ff fb82 	bl	8000470 <LL_ADC_SetOffsetSaturation>
 8000d6c:	e11d      	b.n	8000faa <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fb37 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d10a      	bne.n	8000d9a <HAL_ADC_ConfigChannel+0x15a>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fb2c 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	0e9b      	lsrs	r3, r3, #26
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	e012      	b.n	8000dc0 <HAL_ADC_ConfigChannel+0x180>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fb21 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000db0:	fa93 f3a3 	rbit	r3, r3
 8000db4:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000db8:	fab3 f383 	clz	r3, r3
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d105      	bne.n	8000dd8 <HAL_ADC_ConfigChannel+0x198>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	0e9b      	lsrs	r3, r3, #26
 8000dd2:	f003 031f 	and.w	r3, r3, #31
 8000dd6:	e00a      	b.n	8000dee <HAL_ADC_ConfigChannel+0x1ae>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000de0:	fa93 f3a3 	rbit	r3, r3
 8000de4:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000de8:	fab3 f383 	clz	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d106      	bne.n	8000e00 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fb08 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2101      	movs	r1, #1
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff faee 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10a      	bne.n	8000e2c <HAL_ADC_ConfigChannel+0x1ec>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fae3 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	0e9b      	lsrs	r3, r3, #26
 8000e26:	f003 021f 	and.w	r2, r3, #31
 8000e2a:	e010      	b.n	8000e4e <HAL_ADC_ConfigChannel+0x20e>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fad8 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e3e:	fa93 f3a3 	rbit	r3, r3
 8000e42:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e46:	fab3 f383 	clz	r3, r3
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d105      	bne.n	8000e66 <HAL_ADC_ConfigChannel+0x226>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	0e9b      	lsrs	r3, r3, #26
 8000e60:	f003 031f 	and.w	r3, r3, #31
 8000e64:	e00a      	b.n	8000e7c <HAL_ADC_ConfigChannel+0x23c>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e76:	fab3 f383 	clz	r3, r3
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d106      	bne.n	8000e8e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2200      	movs	r2, #0
 8000e86:	2101      	movs	r1, #1
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fac1 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2102      	movs	r1, #2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff faa7 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10a      	bne.n	8000eba <HAL_ADC_ConfigChannel+0x27a>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fa9c 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	0e9b      	lsrs	r3, r3, #26
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	e010      	b.n	8000edc <HAL_ADC_ConfigChannel+0x29c>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fa91 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ed4:	fab3 f383 	clz	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	461a      	mov	r2, r3
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d105      	bne.n	8000ef4 <HAL_ADC_ConfigChannel+0x2b4>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	0e9b      	lsrs	r3, r3, #26
 8000eee:	f003 031f 	and.w	r3, r3, #31
 8000ef2:	e00a      	b.n	8000f0a <HAL_ADC_ConfigChannel+0x2ca>
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000efc:	fa93 f3a3 	rbit	r3, r3
 8000f00:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f04:	fab3 f383 	clz	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d106      	bne.n	8000f1c <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2200      	movs	r2, #0
 8000f14:	2102      	movs	r1, #2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fa7a 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2103      	movs	r1, #3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fa60 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10a      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x308>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2103      	movs	r1, #3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fa55 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	0e9b      	lsrs	r3, r3, #26
 8000f42:	f003 021f 	and.w	r2, r3, #31
 8000f46:	e010      	b.n	8000f6a <HAL_ADC_ConfigChannel+0x32a>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2103      	movs	r1, #3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fa4a 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f62:	fab3 f383 	clz	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	461a      	mov	r2, r3
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d105      	bne.n	8000f82 <HAL_ADC_ConfigChannel+0x342>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	0e9b      	lsrs	r3, r3, #26
 8000f7c:	f003 031f 	and.w	r3, r3, #31
 8000f80:	e00a      	b.n	8000f98 <HAL_ADC_ConfigChannel+0x358>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f92:	fab3 f383 	clz	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d106      	bne.n	8000faa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2103      	movs	r1, #3
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fa33 	bl	8000410 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fb96 	bl	80006e0 <LL_ADC_IsEnabled>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f040 810c 	bne.w	80011d4 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	6819      	ldr	r1, [r3, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f7ff fae1 	bl	8000590 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	4aab      	ldr	r2, [pc, #684]	; (8001280 <HAL_ADC_ConfigChannel+0x640>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	f040 80fd 	bne.w	80011d4 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10b      	bne.n	8001002 <HAL_ADC_ConfigChannel+0x3c2>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	0e9b      	lsrs	r3, r3, #26
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	f003 031f 	and.w	r3, r3, #31
 8000ff6:	2b09      	cmp	r3, #9
 8000ff8:	bf94      	ite	ls
 8000ffa:	2301      	movls	r3, #1
 8000ffc:	2300      	movhi	r3, #0
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	e012      	b.n	8001028 <HAL_ADC_ConfigChannel+0x3e8>
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800100a:	fa93 f3a3 	rbit	r3, r3
 800100e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001012:	fab3 f383 	clz	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	3301      	adds	r3, #1
 800101a:	f003 031f 	and.w	r3, r3, #31
 800101e:	2b09      	cmp	r3, #9
 8001020:	bf94      	ite	ls
 8001022:	2301      	movls	r3, #1
 8001024:	2300      	movhi	r3, #0
 8001026:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001028:	2b00      	cmp	r3, #0
 800102a:	d064      	beq.n	80010f6 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001034:	2b00      	cmp	r3, #0
 8001036:	d107      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x408>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	0e9b      	lsrs	r3, r3, #26
 800103e:	3301      	adds	r3, #1
 8001040:	069b      	lsls	r3, r3, #26
 8001042:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001046:	e00e      	b.n	8001066 <HAL_ADC_ConfigChannel+0x426>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001058:	fab3 f383 	clz	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	3301      	adds	r3, #1
 8001060:	069b      	lsls	r3, r3, #26
 8001062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <HAL_ADC_ConfigChannel+0x446>
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	0e9b      	lsrs	r3, r3, #26
 8001078:	3301      	adds	r3, #1
 800107a:	f003 031f 	and.w	r3, r3, #31
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	e010      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x468>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	3301      	adds	r3, #1
 800109e:	f003 031f 	and.w	r3, r3, #31
 80010a2:	2101      	movs	r1, #1
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	ea42 0103 	orr.w	r1, r2, r3
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10a      	bne.n	80010ce <HAL_ADC_ConfigChannel+0x48e>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0e9b      	lsrs	r3, r3, #26
 80010be:	3301      	adds	r3, #1
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	051b      	lsls	r3, r3, #20
 80010cc:	e011      	b.n	80010f2 <HAL_ADC_ConfigChannel+0x4b2>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	fab3 f383 	clz	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	3301      	adds	r3, #1
 80010e6:	f003 021f 	and.w	r2, r3, #31
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010f2:	430b      	orrs	r3, r1
 80010f4:	e069      	b.n	80011ca <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d107      	bne.n	8001112 <HAL_ADC_ConfigChannel+0x4d2>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	0e9b      	lsrs	r3, r3, #26
 8001108:	3301      	adds	r3, #1
 800110a:	069b      	lsls	r3, r3, #26
 800110c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001110:	e00e      	b.n	8001130 <HAL_ADC_ConfigChannel+0x4f0>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	fa93 f3a3 	rbit	r3, r3
 800111e:	61fb      	str	r3, [r7, #28]
  return result;
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	fab3 f383 	clz	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	3301      	adds	r3, #1
 800112a:	069b      	lsls	r3, r3, #26
 800112c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001138:	2b00      	cmp	r3, #0
 800113a:	d109      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x510>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	0e9b      	lsrs	r3, r3, #26
 8001142:	3301      	adds	r3, #1
 8001144:	f003 031f 	and.w	r3, r3, #31
 8001148:	2101      	movs	r1, #1
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	e010      	b.n	8001172 <HAL_ADC_ConfigChannel+0x532>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	fa93 f3a3 	rbit	r3, r3
 800115c:	617b      	str	r3, [r7, #20]
  return result;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	fab3 f383 	clz	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	3301      	adds	r3, #1
 8001168:	f003 031f 	and.w	r3, r3, #31
 800116c:	2101      	movs	r1, #1
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	ea42 0103 	orr.w	r1, r2, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10d      	bne.n	800119e <HAL_ADC_ConfigChannel+0x55e>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	0e9b      	lsrs	r3, r3, #26
 8001188:	3301      	adds	r3, #1
 800118a:	f003 021f 	and.w	r2, r3, #31
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	3b1e      	subs	r3, #30
 8001196:	051b      	lsls	r3, r3, #20
 8001198:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800119c:	e014      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x588>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	60fb      	str	r3, [r7, #12]
  return result;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	fab3 f383 	clz	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	3301      	adds	r3, #1
 80011b6:	f003 021f 	and.w	r2, r3, #31
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	3b1e      	subs	r3, #30
 80011c2:	051b      	lsls	r3, r3, #20
 80011c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011c8:	430b      	orrs	r3, r1
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	6892      	ldr	r2, [r2, #8]
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff f9b5 	bl	800053e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <HAL_ADC_ConfigChannel+0x644>)
 80011da:	4013      	ands	r3, r2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 8083 	beq.w	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80011e2:	4829      	ldr	r0, [pc, #164]	; (8001288 <HAL_ADC_ConfigChannel+0x648>)
 80011e4:	f7ff f8d0 	bl	8000388 <LL_ADC_GetCommonPathInternalCh>
 80011e8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a26      	ldr	r2, [pc, #152]	; (800128c <HAL_ADC_ConfigChannel+0x64c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d004      	beq.n	8001200 <HAL_ADC_ConfigChannel+0x5c0>
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a25      	ldr	r2, [pc, #148]	; (8001290 <HAL_ADC_ConfigChannel+0x650>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d126      	bne.n	800124e <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001200:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d120      	bne.n	800124e <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001214:	d168      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800121a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800121e:	4619      	mov	r1, r3
 8001220:	4819      	ldr	r0, [pc, #100]	; (8001288 <HAL_ADC_ConfigChannel+0x648>)
 8001222:	f7ff f89e 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_ADC_ConfigChannel+0x654>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	099b      	lsrs	r3, r3, #6
 800122c:	4a1a      	ldr	r2, [pc, #104]	; (8001298 <HAL_ADC_ConfigChannel+0x658>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	099a      	lsrs	r2, r3, #6
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800123e:	e002      	b.n	8001246 <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	3b01      	subs	r3, #1
 8001244:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f9      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800124c:	e04c      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <HAL_ADC_ConfigChannel+0x65c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d125      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x664>
 8001258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800125c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d11f      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <HAL_ADC_ConfigChannel+0x660>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d03c      	beq.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800126e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001276:	4619      	mov	r1, r3
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <HAL_ADC_ConfigChannel+0x648>)
 800127a:	f7ff f872 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800127e:	e033      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
 8001280:	407f0000 	.word	0x407f0000
 8001284:	80080000 	.word	0x80080000
 8001288:	50000300 	.word	0x50000300
 800128c:	c3210000 	.word	0xc3210000
 8001290:	90c00010 	.word	0x90c00010
 8001294:	20000008 	.word	0x20000008
 8001298:	053e2d63 	.word	0x053e2d63
 800129c:	c7520000 	.word	0xc7520000
 80012a0:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a14      	ldr	r2, [pc, #80]	; (80012fc <HAL_ADC_ConfigChannel+0x6bc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d11c      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80012ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d116      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <HAL_ADC_ConfigChannel+0x6c0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d011      	beq.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012cc:	4619      	mov	r1, r3
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <HAL_ADC_ConfigChannel+0x6c4>)
 80012d0:	f7ff f847 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
 80012d4:	e008      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012da:	f043 0220 	orr.w	r2, r3, #32
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80012f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3798      	adds	r7, #152	; 0x98
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	cb840000 	.word	0xcb840000
 8001300:	50000100 	.word	0x50000100
 8001304:	50000300 	.word	0x50000300

08001308 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f9e3 	bl	80006e0 <LL_ADC_IsEnabled>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d146      	bne.n	80013ae <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <ADC_Enable+0xb0>)
 8001328:	4013      	ands	r3, r2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00d      	beq.n	800134a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001332:	f043 0210 	orr.w	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133e:	f043 0201 	orr.w	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e032      	b.n	80013b0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f99e 	bl	8000690 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001354:	f7fe ffc4 	bl	80002e0 <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800135a:	e021      	b.n	80013a0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f9bd 	bl	80006e0 <LL_ADC_IsEnabled>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d104      	bne.n	8001376 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f98d 	bl	8000690 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001376:	f7fe ffb3 	bl	80002e0 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d90d      	bls.n	80013a0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001388:	f043 0210 	orr.w	r2, r3, #16
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001394:	f043 0201 	orr.w	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e007      	b.n	80013b0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d1d6      	bne.n	800135c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	8000003f 	.word	0x8000003f

080013bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f99c 	bl	8000706 <LL_ADC_IsDisableOngoing>
 80013ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f983 	bl	80006e0 <LL_ADC_IsEnabled>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d040      	beq.n	8001462 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d13d      	bne.n	8001462 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 030d 	and.w	r3, r3, #13
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d10c      	bne.n	800140e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f95d 	bl	80006b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2203      	movs	r2, #3
 8001404:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001406:	f7fe ff6b 	bl	80002e0 <HAL_GetTick>
 800140a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800140c:	e022      	b.n	8001454 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001412:	f043 0210 	orr.w	r2, r3, #16
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141e:	f043 0201 	orr.w	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e01c      	b.n	8001464 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800142a:	f7fe ff59 	bl	80002e0 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d90d      	bls.n	8001454 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143c:	f043 0210 	orr.w	r2, r3, #16
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001448:	f043 0201 	orr.w	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e007      	b.n	8001464 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1e3      	bne.n	800142a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001478:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001482:	2b00      	cmp	r3, #0
 8001484:	d14b      	bne.n	800151e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d021      	beq.n	80014e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f80e 	bl	80004c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d032      	beq.n	8001516 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d12b      	bne.n	8001516 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d11f      	bne.n	8001516 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014da:	f043 0201 	orr.w	r2, r3, #1
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80014e2:	e018      	b.n	8001516 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d111      	bne.n	8001516 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d105      	bne.n	8001516 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	f043 0201 	orr.w	r2, r3, #1
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f003 f81c 	bl	8004554 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800151c:	e00e      	b.n	800153c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff fb7e 	bl	8000c2c <HAL_ADC_ErrorCallback>
}
 8001530:	e004      	b.n	800153c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	4798      	blx	r3
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f7ff fb60 	bl	8000c18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	f043 0204 	orr.w	r2, r3, #4
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f7ff fb50 	bl	8000c2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <LL_ADC_IsEnabled>:
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <LL_ADC_IsEnabled+0x18>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <LL_ADC_IsEnabled+0x1a>
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <LL_ADC_StartCalibration>:
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80015cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80015d6:	4313      	orrs	r3, r2
 80015d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_IsCalibrationOnGoing>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001600:	d101      	bne.n	8001606 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_ADC_REG_IsConversionOngoing>:
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b04      	cmp	r3, #4
 8001626:	d101      	bne.n	800162c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_ADCEx_Calibration_Start+0x1c>
 8001654:	2302      	movs	r3, #2
 8001656:	e04d      	b.n	80016f4 <HAL_ADCEx_Calibration_Start+0xb8>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff feab 	bl	80013bc <ADC_Disable>
 8001666:	4603      	mov	r3, r0
 8001668:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d136      	bne.n	80016de <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001674:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001678:	f023 0302 	bic.w	r3, r3, #2
 800167c:	f043 0202 	orr.w	r2, r3, #2
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6839      	ldr	r1, [r7, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff95 	bl	80015ba <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001690:	e014      	b.n	80016bc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3301      	adds	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4a18      	ldr	r2, [pc, #96]	; (80016fc <HAL_ADCEx_Calibration_Start+0xc0>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d90d      	bls.n	80016bc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	f023 0312 	bic.w	r3, r3, #18
 80016a8:	f043 0210 	orr.w	r2, r3, #16
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e01b      	b.n	80016f4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff93 	bl	80015ec <LL_ADC_IsCalibrationOnGoing>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1e2      	bne.n	8001692 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d0:	f023 0303 	bic.w	r3, r3, #3
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	65da      	str	r2, [r3, #92]	; 0x5c
 80016dc:	e005      	b.n	80016ea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e2:	f043 0210 	orr.w	r2, r3, #16
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	0004de01 	.word	0x0004de01

08001700 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b0a1      	sub	sp, #132	; 0x84
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800171a:	2302      	movs	r3, #2
 800171c:	e087      	b.n	800182e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800172e:	d102      	bne.n	8001736 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001730:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	e001      	b.n	800173a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10b      	bne.n	8001758 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	f043 0220 	orr.w	r2, r3, #32
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e06a      	b.n	800182e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff5a 	bl	8001614 <LL_ADC_REG_IsConversionOngoing>
 8001760:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff54 	bl	8001614 <LL_ADC_REG_IsConversionOngoing>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d14c      	bne.n	800180c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001774:	2b00      	cmp	r3, #0
 8001776:	d149      	bne.n	800180c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800177a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d028      	beq.n	80017d6 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001796:	035b      	lsls	r3, r3, #13
 8001798:	430b      	orrs	r3, r1
 800179a:	431a      	orrs	r2, r3
 800179c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800179e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017a4:	f7ff fef6 	bl	8001594 <LL_ADC_IsEnabled>
 80017a8:	4604      	mov	r4, r0
 80017aa:	4823      	ldr	r0, [pc, #140]	; (8001838 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80017ac:	f7ff fef2 	bl	8001594 <LL_ADC_IsEnabled>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4323      	orrs	r3, r4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d133      	bne.n	8001820 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80017b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80017c0:	f023 030f 	bic.w	r3, r3, #15
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	6811      	ldr	r1, [r2, #0]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	6892      	ldr	r2, [r2, #8]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	431a      	orrs	r2, r3
 80017d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017d2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80017d4:	e024      	b.n	8001820 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80017d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017e2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80017e6:	f7ff fed5 	bl	8001594 <LL_ADC_IsEnabled>
 80017ea:	4604      	mov	r4, r0
 80017ec:	4812      	ldr	r0, [pc, #72]	; (8001838 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80017ee:	f7ff fed1 	bl	8001594 <LL_ADC_IsEnabled>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4323      	orrs	r3, r4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d112      	bne.n	8001820 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80017fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001802:	f023 030f 	bic.w	r3, r3, #15
 8001806:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001808:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800180a:	e009      	b.n	8001820 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001810:	f043 0220 	orr.w	r2, r3, #32
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800181e:	e000      	b.n	8001822 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001820:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800182a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800182e:	4618      	mov	r0, r3
 8001830:	3784      	adds	r7, #132	; 0x84
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}
 8001836:	bf00      	nop
 8001838:	50000100 	.word	0x50000100
 800183c:	50000300 	.word	0x50000300

08001840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <__NVIC_GetPriorityGrouping+0x18>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0307 	and.w	r3, r3, #7
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db0b      	blt.n	80018ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	4907      	ldr	r1, [pc, #28]	; (80018dc <__NVIC_EnableIRQ+0x38>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	2001      	movs	r0, #1
 80018c6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000e100 	.word	0xe000e100

080018e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	db0a      	blt.n	800190a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	490c      	ldr	r1, [pc, #48]	; (800192c <__NVIC_SetPriority+0x4c>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	440b      	add	r3, r1
 8001904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001908:	e00a      	b.n	8001920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4908      	ldr	r1, [pc, #32]	; (8001930 <__NVIC_SetPriority+0x50>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	3b04      	subs	r3, #4
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	440b      	add	r3, r1
 800191e:	761a      	strb	r2, [r3, #24]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000e100 	.word	0xe000e100
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f1c3 0307 	rsb	r3, r3, #7
 800194e:	2b04      	cmp	r3, #4
 8001950:	bf28      	it	cs
 8001952:	2304      	movcs	r3, #4
 8001954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3304      	adds	r3, #4
 800195a:	2b06      	cmp	r3, #6
 800195c:	d902      	bls.n	8001964 <NVIC_EncodePriority+0x30>
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3b03      	subs	r3, #3
 8001962:	e000      	b.n	8001966 <NVIC_EncodePriority+0x32>
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	f04f 32ff 	mov.w	r2, #4294967295
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800197c:	f04f 31ff 	mov.w	r1, #4294967295
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43d9      	mvns	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	4313      	orrs	r3, r2
         );
}
 800198e:	4618      	mov	r0, r3
 8001990:	3724      	adds	r7, #36	; 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ac:	d301      	bcc.n	80019b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00f      	b.n	80019d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <SysTick_Config+0x40>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ba:	210f      	movs	r1, #15
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f7ff ff8e 	bl	80018e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <SysTick_Config+0x40>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <SysTick_Config+0x40>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff29 	bl	8001840 <__NVIC_SetPriorityGrouping>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a04:	f7ff ff40 	bl	8001888 <__NVIC_GetPriorityGrouping>
 8001a08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	6978      	ldr	r0, [r7, #20]
 8001a10:	f7ff ff90 	bl	8001934 <NVIC_EncodePriority>
 8001a14:	4602      	mov	r2, r0
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff5f 	bl	80018e0 <__NVIC_SetPriority>
}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff33 	bl	80018a4 <__NVIC_EnableIRQ>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ffa4 	bl	800199c <SysTick_Config>
 8001a54:	4603      	mov	r3, r0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e08d      	b.n	8001b8e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_DMA_Init+0x138>)
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d80f      	bhi.n	8001a9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b45      	ldr	r3, [pc, #276]	; (8001b9c <HAL_DMA_Init+0x13c>)
 8001a86:	4413      	add	r3, r2
 8001a88:	4a45      	ldr	r2, [pc, #276]	; (8001ba0 <HAL_DMA_Init+0x140>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	009a      	lsls	r2, r3, #2
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a42      	ldr	r2, [pc, #264]	; (8001ba4 <HAL_DMA_Init+0x144>)
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a9c:	e00e      	b.n	8001abc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <HAL_DMA_Init+0x148>)
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a3d      	ldr	r2, [pc, #244]	; (8001ba0 <HAL_DMA_Init+0x140>)
 8001aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	009a      	lsls	r2, r3, #2
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a3c      	ldr	r2, [pc, #240]	; (8001bac <HAL_DMA_Init+0x14c>)
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f9b6 	bl	8001e80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b1c:	d102      	bne.n	8001b24 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b38:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d010      	beq.n	8001b64 <HAL_DMA_Init+0x104>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d80c      	bhi.n	8001b64 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f9d6 	bl	8001efc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	e008      	b.n	8001b76 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40020407 	.word	0x40020407
 8001b9c:	bffdfff8 	.word	0xbffdfff8
 8001ba0:	cccccccd 	.word	0xcccccccd
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	bffdfbf8 	.word	0xbffdfbf8
 8001bac:	40020400 	.word	0x40020400

08001bb0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_DMA_Start_IT+0x20>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e066      	b.n	8001c9e <HAL_DMA_Start_IT+0xee>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d155      	bne.n	8001c90 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	68b9      	ldr	r1, [r7, #8]
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f8fb 	bl	8001e04 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d008      	beq.n	8001c28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 020e 	orr.w	r2, r2, #14
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e00f      	b.n	8001c48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0204 	bic.w	r2, r2, #4
 8001c36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 020a 	orr.w	r2, r2, #10
 8001c46:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c64:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c7c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e005      	b.n	8001c9c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d026      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x7a>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d021      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d107      	bne.n	8001cfa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0204 	bic.w	r2, r2, #4
 8001cf8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f003 021f 	and.w	r2, r3, #31
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	2104      	movs	r1, #4
 8001d08:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d071      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d1e:	e06c      	b.n	8001dfa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	2202      	movs	r2, #2
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d02e      	beq.n	8001d92 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d029      	beq.n	8001d92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0320 	and.w	r3, r3, #32
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10b      	bne.n	8001d64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 020a 	bic.w	r2, r2, #10
 8001d5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	2102      	movs	r1, #2
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d038      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d90:	e033      	b.n	8001dfa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d02a      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d025      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 020e 	bic.w	r2, r2, #14
 8001dbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	2101      	movs	r1, #1
 8001dce:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d004      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
}
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e1a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e2c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f003 021f 	and.w	r2, r3, #31
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d108      	bne.n	8001e64 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e62:	e007      	b.n	8001e74 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	60da      	str	r2, [r3, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d802      	bhi.n	8001e9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e001      	b.n	8001e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e9c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	3b08      	subs	r3, #8
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001eac:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	009a      	lsls	r2, r3, #2
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001eca:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40020407 	.word	0x40020407
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020820 	.word	0x40020820
 8001ef4:	cccccccd 	.word	0xcccccccd
 8001ef8:	40020880 	.word	0x40020880

08001efc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	461a      	mov	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f1e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	2201      	movs	r2, #1
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	1000823f 	.word	0x1000823f
 8001f40:	40020940 	.word	0x40020940

08001f44 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e147      	b.n	80021e6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f003 f8c0 	bl	80050f0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0210 	bic.w	r2, r2, #16
 8001f7e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f80:	f7fe f9ae 	bl	80002e0 <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001f86:	e012      	b.n	8001fae <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001f88:	f7fe f9aa 	bl	80002e0 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b0a      	cmp	r3, #10
 8001f94:	d90b      	bls.n	8001fae <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e11b      	b.n	80021e6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d0e5      	beq.n	8001f88 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fcc:	f7fe f988 	bl	80002e0 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001fd2:	e012      	b.n	8001ffa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001fd4:	f7fe f984 	bl	80002e0 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b0a      	cmp	r3, #10
 8001fe0:	d90b      	bls.n	8001ffa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e0f5      	b.n	80021e6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0e5      	beq.n	8001fd4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699a      	ldr	r2, [r3, #24]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0202 	orr.w	r2, r2, #2
 8002016:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a74      	ldr	r2, [pc, #464]	; (80021f0 <HAL_FDCAN_Init+0x2ac>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d103      	bne.n	800202a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002022:	4a74      	ldr	r2, [pc, #464]	; (80021f4 <HAL_FDCAN_Init+0x2b0>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7c1b      	ldrb	r3, [r3, #16]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d108      	bne.n	8002044 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002040:	619a      	str	r2, [r3, #24]
 8002042:	e007      	b.n	8002054 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002052:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7c5b      	ldrb	r3, [r3, #17]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d108      	bne.n	800206e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800206a:	619a      	str	r2, [r3, #24]
 800206c:	e007      	b.n	800207e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800207c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7c9b      	ldrb	r3, [r3, #18]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d108      	bne.n	8002098 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002094:	619a      	str	r2, [r3, #24]
 8002096:	e007      	b.n	80020a8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020a6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699a      	ldr	r2, [r3, #24]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80020cc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0210 	bic.w	r2, r2, #16
 80020dc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d108      	bne.n	80020f8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699a      	ldr	r2, [r3, #24]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0204 	orr.w	r2, r2, #4
 80020f4:	619a      	str	r2, [r3, #24]
 80020f6:	e02c      	b.n	8002152 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d028      	beq.n	8002152 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d01c      	beq.n	8002142 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002116:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691a      	ldr	r2, [r3, #16]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0210 	orr.w	r2, r2, #16
 8002126:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d110      	bne.n	8002152 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699a      	ldr	r2, [r3, #24]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0220 	orr.w	r2, r2, #32
 800213e:	619a      	str	r2, [r3, #24]
 8002140:	e007      	b.n	8002152 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699a      	ldr	r2, [r3, #24]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0220 	orr.w	r2, r2, #32
 8002150:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	3b01      	subs	r3, #1
 8002158:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	3b01      	subs	r3, #1
 8002160:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002162:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800216a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	3b01      	subs	r3, #1
 8002174:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800217a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800217c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002186:	d115      	bne.n	80021b4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	3b01      	subs	r3, #1
 8002194:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002196:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	3b01      	subs	r3, #1
 800219e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80021a0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	3b01      	subs	r3, #1
 80021aa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80021b0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80021b2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fbea 	bl	80029a4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40006400 	.word	0x40006400
 80021f4:	40006500 	.word	0x40006500

080021f8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002208:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800220a:	7dfb      	ldrb	r3, [r7, #23]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d002      	beq.n	8002216 <HAL_FDCAN_ConfigFilter+0x1e>
 8002210:	7dfb      	ldrb	r3, [r7, #23]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d13d      	bne.n	8002292 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d119      	bne.n	8002252 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800222a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002232:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e01d      	b.n	800228e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	075a      	lsls	r2, r3, #29
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	079a      	lsls	r2, r3, #30
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	4313      	orrs	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3304      	adds	r3, #4
 8002286:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	e006      	b.n	80022a0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002296:	f043 0202 	orr.w	r2, r3, #2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
  }
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d116      	bne.n	80022f4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ce:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	011a      	lsls	r2, r3, #4
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	431a      	orrs	r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	431a      	orrs	r2, r3
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                         (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                                         (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                                         (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e006      	b.n	8002302 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f8:	f043 0204 	orr.w	r2, r3, #4
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
  }
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_FDCAN_ConfigRxFifoOverwrite>:
  * @param  OperationMode operation mode.
  *         This parameter can be a value of @arg FDCAN_Rx_FIFO_operation_mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigRxFifoOverwrite(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo, uint32_t OperationMode)
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));
  assert_param(IS_FDCAN_RX_FIFO_MODE(OperationMode));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d11f      	bne.n	8002366 <HAL_FDCAN_ConfigRxFifoOverwrite+0x58>
  {
    if (RxFifo == FDCAN_RX_FIFO0)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d10d      	bne.n	8002348 <HAL_FDCAN_ConfigRxFifoOverwrite+0x3a>
    {
      /* Select FIFO 0 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F0OM, (OperationMode << FDCAN_RXGFC_F0OM_Pos));
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002334:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	025a      	lsls	r2, r3, #9
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002346:	e00c      	b.n	8002362 <HAL_FDCAN_ConfigRxFifoOverwrite+0x54>
    }
    else /* RxFifo == FDCAN_RX_FIFO1 */
    {
      /* Select FIFO 1 Operation Mode */
      MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_F1OM, (OperationMode << FDCAN_RXGFC_F1OM_Pos));
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002350:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	021a      	lsls	r2, r3, #8
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Return function status */
    return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e006      	b.n	8002374 <HAL_FDCAN_ConfigRxFifoOverwrite+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236a:	f043 0204 	orr.w	r2, r3, #4
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
  }
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d110      	bne.n	80023b6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e006      	b.n	80023c4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ba:	f043 0204 	orr.w	r2, r3, #4
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
  }
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d12c      	bne.n	8002442 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e023      	b.n	8002450 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002410:	0c1b      	lsrs	r3, r3, #16
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fb16 	bl	8002a50 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2101      	movs	r1, #1
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	fa01 f202 	lsl.w	r2, r1, r2
 8002430:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002434:	2201      	movs	r2, #1
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	409a      	lsls	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	e006      	b.n	8002450 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002446:	f043 0208 	orr.w	r2, r3, #8
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
  }
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800248e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002490:	7dfb      	ldrb	r3, [r7, #23]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d003      	beq.n	800249e <HAL_FDCAN_ActivateNotification+0x22>
 8002496:	7dfb      	ldrb	r3, [r7, #23]
 8002498:	2b02      	cmp	r3, #2
 800249a:	f040 80c8 	bne.w	800262e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d004      	beq.n	80024ba <HAL_FDCAN_ActivateNotification+0x3e>
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d03b      	beq.n	8002532 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d004      	beq.n	80024ce <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d031      	beq.n	8002532 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d027      	beq.n	8002532 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01d      	beq.n	8002532 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b00      	cmp	r3, #0
 8002508:	d013      	beq.n	8002532 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002510:	2b00      	cmp	r3, #0
 8002512:	d004      	beq.n	800251e <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00c      	beq.n	8002542 <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d107      	bne.n	8002542 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	2b00      	cmp	r3, #0
 800254a:	d004      	beq.n	8002556 <HAL_FDCAN_ActivateNotification+0xda>
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d13b      	bne.n	80025ce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 800255c:	2b00      	cmp	r3, #0
 800255e:	d004      	beq.n	800256a <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d131      	bne.n	80025ce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d127      	bne.n	80025ce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002584:	2b00      	cmp	r3, #0
 8002586:	d004      	beq.n	8002592 <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d11d      	bne.n	80025ce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d113      	bne.n	80025ce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d004      	beq.n	80025ba <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00c      	beq.n	80025de <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0202 	orr.w	r2, r2, #2
 80025dc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d009      	beq.n	80025fc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	430a      	orrs	r2, r1
 8002616:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	430a      	orrs	r2, r1
 8002628:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e006      	b.n	800263c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002632:	f043 0202 	orr.w	r2, r3, #2
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
  }
}
 800263c:	4618      	mov	r0, r3
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002656:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002664:	4013      	ands	r3, r2
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	6a3a      	ldr	r2, [r7, #32]
 800267c:	4013      	ands	r3, r2
 800267e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800268a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	4013      	ands	r3, r2
 8002696:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80026a2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026ba:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4013      	ands	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00d      	beq.n	80026f2 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d006      	beq.n	80026f2 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2240      	movs	r2, #64	; 0x40
 80026ea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f939 	bl	8002964 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01b      	beq.n	8002738 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d014      	beq.n	8002738 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002716:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800272e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002730:	6939      	ldr	r1, [r7, #16]
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f8f7 	bl	8002926 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002744:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f8b6 	bl	80028ba <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6a3a      	ldr	r2, [r7, #32]
 800275a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800275c:	6a39      	ldr	r1, [r7, #32]
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f8b6 	bl	80028d0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002772:	69f9      	ldr	r1, [r7, #28]
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f8b6 	bl	80028e6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00e      	beq.n	80027a6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800279e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f8ab 	bl	80028fc <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01a      	beq.n	80027ea <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d013      	beq.n	80027ea <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80027ca:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4013      	ands	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2280      	movs	r2, #128	; 0x80
 80027e0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80027e2:	68f9      	ldr	r1, [r7, #12]
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f893 	bl	8002910 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00e      	beq.n	8002816 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800280e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f893 	bl	800293c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00e      	beq.n	8002842 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d007      	beq.n	8002842 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800283a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f887 	bl	8002950 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d011      	beq.n	8002874 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002866:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d007      	beq.n	800288a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002882:	6979      	ldr	r1, [r7, #20]
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f881 	bl	800298c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d009      	beq.n	80028a4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f863 	bl	8002978 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80028b2:	bf00      	nop
 80028b4:	3728      	adds	r7, #40	; 0x28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80029ac:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80029ae:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029be:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	041a      	lsls	r2, r3, #16
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	061a      	lsls	r2, r3, #24
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e005      	b.n	8002a32 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d3f3      	bcc.n	8002a26 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	4000a400 	.word	0x4000a400

08002a50 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10a      	bne.n	8002a7c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002a6e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	e00a      	b.n	8002a92 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002a84:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002a8a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a90:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002a9c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002aa2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002aa8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	3304      	adds	r3, #4
 8002ace:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e020      	b.n	8002b24 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3303      	adds	r3, #3
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	3302      	adds	r3, #2
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	440b      	add	r3, r1
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002afa:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	3301      	adds	r3, #1
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	440b      	add	r3, r1
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002b08:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	440a      	add	r2, r1
 8002b10:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002b12:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	3304      	adds	r3, #4
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	4a06      	ldr	r2, [pc, #24]	; (8002b44 <FDCAN_CopyMessageToRAM+0xf4>)
 8002b2c:	5cd3      	ldrb	r3, [r2, r3]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d3d5      	bcc.n	8002ae2 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8002b36:	bf00      	nop
 8002b38:	3724      	adds	r7, #36	; 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	08005514 	.word	0x08005514

08002b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b56:	e15a      	b.n	8002e0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	4013      	ands	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 814c 	beq.w	8002e08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x38>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b12      	cmp	r3, #18
 8002b7e:	d123      	bne.n	8002bc8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	08da      	lsrs	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3208      	adds	r2, #8
 8002b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	220f      	movs	r2, #15
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	08da      	lsrs	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3208      	adds	r2, #8
 8002bc2:	6939      	ldr	r1, [r7, #16]
 8002bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0203 	and.w	r2, r3, #3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d00b      	beq.n	8002c1c <HAL_GPIO_Init+0xd4>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d007      	beq.n	8002c1c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c10:	2b11      	cmp	r3, #17
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b12      	cmp	r3, #18
 8002c1a:	d130      	bne.n	8002c7e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c52:	2201      	movs	r2, #1
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	f003 0201 	and.w	r2, r3, #1
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	2203      	movs	r2, #3
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80a6 	beq.w	8002e08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbc:	4b5b      	ldr	r3, [pc, #364]	; (8002e2c <HAL_GPIO_Init+0x2e4>)
 8002cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc0:	4a5a      	ldr	r2, [pc, #360]	; (8002e2c <HAL_GPIO_Init+0x2e4>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6613      	str	r3, [r2, #96]	; 0x60
 8002cc8:	4b58      	ldr	r3, [pc, #352]	; (8002e2c <HAL_GPIO_Init+0x2e4>)
 8002cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cd4:	4a56      	ldr	r2, [pc, #344]	; (8002e30 <HAL_GPIO_Init+0x2e8>)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	220f      	movs	r2, #15
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cfe:	d01f      	beq.n	8002d40 <HAL_GPIO_Init+0x1f8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a4c      	ldr	r2, [pc, #304]	; (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d019      	beq.n	8002d3c <HAL_GPIO_Init+0x1f4>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a4b      	ldr	r2, [pc, #300]	; (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d013      	beq.n	8002d38 <HAL_GPIO_Init+0x1f0>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a4a      	ldr	r2, [pc, #296]	; (8002e3c <HAL_GPIO_Init+0x2f4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d00d      	beq.n	8002d34 <HAL_GPIO_Init+0x1ec>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a49      	ldr	r2, [pc, #292]	; (8002e40 <HAL_GPIO_Init+0x2f8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d007      	beq.n	8002d30 <HAL_GPIO_Init+0x1e8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a48      	ldr	r2, [pc, #288]	; (8002e44 <HAL_GPIO_Init+0x2fc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d101      	bne.n	8002d2c <HAL_GPIO_Init+0x1e4>
 8002d28:	2305      	movs	r3, #5
 8002d2a:	e00a      	b.n	8002d42 <HAL_GPIO_Init+0x1fa>
 8002d2c:	2306      	movs	r3, #6
 8002d2e:	e008      	b.n	8002d42 <HAL_GPIO_Init+0x1fa>
 8002d30:	2304      	movs	r3, #4
 8002d32:	e006      	b.n	8002d42 <HAL_GPIO_Init+0x1fa>
 8002d34:	2303      	movs	r3, #3
 8002d36:	e004      	b.n	8002d42 <HAL_GPIO_Init+0x1fa>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e002      	b.n	8002d42 <HAL_GPIO_Init+0x1fa>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <HAL_GPIO_Init+0x1fa>
 8002d40:	2300      	movs	r3, #0
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	f002 0203 	and.w	r2, r2, #3
 8002d48:	0092      	lsls	r2, r2, #2
 8002d4a:	4093      	lsls	r3, r2
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d52:	4937      	ldr	r1, [pc, #220]	; (8002e30 <HAL_GPIO_Init+0x2e8>)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	3302      	adds	r3, #2
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d60:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <HAL_GPIO_Init+0x300>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d84:	4a30      	ldr	r2, [pc, #192]	; (8002e48 <HAL_GPIO_Init+0x300>)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002d8a:	4b2f      	ldr	r3, [pc, #188]	; (8002e48 <HAL_GPIO_Init+0x300>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4013      	ands	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dae:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <HAL_GPIO_Init+0x300>)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002db4:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_GPIO_Init+0x300>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dd8:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <HAL_GPIO_Init+0x300>)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dde:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <HAL_GPIO_Init+0x300>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4013      	ands	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e02:	4a11      	ldr	r2, [pc, #68]	; (8002e48 <HAL_GPIO_Init+0x300>)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f47f ae9d 	bne.w	8002b58 <HAL_GPIO_Init+0x10>
  }
}
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40010000 	.word	0x40010000
 8002e34:	48000400 	.word	0x48000400
 8002e38:	48000800 	.word	0x48000800
 8002e3c:	48000c00 	.word	0x48000c00
 8002e40:	48001000 	.word	0x48001000
 8002e44:	48001400 	.word	0x48001400
 8002e48:	40010400 	.word	0x40010400

08002e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e5c:	787b      	ldrb	r3, [r7, #1]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e68:	e002      	b.n	8002e70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	887b      	ldrh	r3, [r7, #2]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e94:	887a      	ldrh	r2, [r7, #2]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002e9a:	e002      	b.n	8002ea2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e9c:	887a      	ldrh	r2, [r7, #2]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	619a      	str	r2, [r3, #24]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d141      	bne.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ebe:	4b4b      	ldr	r3, [pc, #300]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eca:	d131      	bne.n	8002f30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ecc:	4b47      	ldr	r3, [pc, #284]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed2:	4a46      	ldr	r2, [pc, #280]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002edc:	4b43      	ldr	r3, [pc, #268]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ee4:	4a41      	ldr	r2, [pc, #260]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eec:	4b40      	ldr	r3, [pc, #256]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2232      	movs	r2, #50	; 0x32
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	4a3f      	ldr	r2, [pc, #252]	; (8002ff4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	0c9b      	lsrs	r3, r3, #18
 8002efe:	3301      	adds	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f02:	e002      	b.n	8002f0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0a:	4b38      	ldr	r3, [pc, #224]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f16:	d102      	bne.n	8002f1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f2      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f1e:	4b33      	ldr	r3, [pc, #204]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2a:	d158      	bne.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e057      	b.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f30:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f36:	4a2d      	ldr	r2, [pc, #180]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f40:	e04d      	b.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f48:	d141      	bne.n	8002fce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f4a:	4b28      	ldr	r3, [pc, #160]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f56:	d131      	bne.n	8002fbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f58:	4b24      	ldr	r3, [pc, #144]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5e:	4a23      	ldr	r2, [pc, #140]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f68:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f70:	4a1e      	ldr	r2, [pc, #120]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f78:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2232      	movs	r2, #50	; 0x32
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	4a1c      	ldr	r2, [pc, #112]	; (8002ff4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	0c9b      	lsrs	r3, r3, #18
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f8e:	e002      	b.n	8002f96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f96:	4b15      	ldr	r3, [pc, #84]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa2:	d102      	bne.n	8002faa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f2      	bne.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb6:	d112      	bne.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e011      	b.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fcc:	e007      	b.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fce:	4b07      	ldr	r3, [pc, #28]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fd6:	4a05      	ldr	r2, [pc, #20]	; (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fdc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	40007000 	.word	0x40007000
 8002ff0:	20000008 	.word	0x20000008
 8002ff4:	431bde83 	.word	0x431bde83

08002ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e308      	b.n	800361c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d075      	beq.n	8003102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003016:	4ba3      	ldr	r3, [pc, #652]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003020:	4ba0      	ldr	r3, [pc, #640]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2b0c      	cmp	r3, #12
 800302e:	d102      	bne.n	8003036 <HAL_RCC_OscConfig+0x3e>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b03      	cmp	r3, #3
 8003034:	d002      	beq.n	800303c <HAL_RCC_OscConfig+0x44>
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2b08      	cmp	r3, #8
 800303a:	d10b      	bne.n	8003054 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303c:	4b99      	ldr	r3, [pc, #612]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d05b      	beq.n	8003100 <HAL_RCC_OscConfig+0x108>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d157      	bne.n	8003100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e2e3      	b.n	800361c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305c:	d106      	bne.n	800306c <HAL_RCC_OscConfig+0x74>
 800305e:	4b91      	ldr	r3, [pc, #580]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a90      	ldr	r2, [pc, #576]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	e01d      	b.n	80030a8 <HAL_RCC_OscConfig+0xb0>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003074:	d10c      	bne.n	8003090 <HAL_RCC_OscConfig+0x98>
 8003076:	4b8b      	ldr	r3, [pc, #556]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a8a      	ldr	r2, [pc, #552]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	4b88      	ldr	r3, [pc, #544]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a87      	ldr	r2, [pc, #540]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	e00b      	b.n	80030a8 <HAL_RCC_OscConfig+0xb0>
 8003090:	4b84      	ldr	r3, [pc, #528]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a83      	ldr	r2, [pc, #524]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	4b81      	ldr	r3, [pc, #516]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a80      	ldr	r2, [pc, #512]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 80030a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d013      	beq.n	80030d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fd f916 	bl	80002e0 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b8:	f7fd f912 	bl	80002e0 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	; 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e2a8      	b.n	800361c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ca:	4b76      	ldr	r3, [pc, #472]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0xc0>
 80030d6:	e014      	b.n	8003102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d8:	f7fd f902 	bl	80002e0 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e0:	f7fd f8fe 	bl	80002e0 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	; 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e294      	b.n	800361c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030f2:	4b6c      	ldr	r3, [pc, #432]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0xe8>
 80030fe:	e000      	b.n	8003102 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d075      	beq.n	80031fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800310e:	4b65      	ldr	r3, [pc, #404]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003118:	4b62      	ldr	r3, [pc, #392]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b0c      	cmp	r3, #12
 8003126:	d102      	bne.n	800312e <HAL_RCC_OscConfig+0x136>
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d002      	beq.n	8003134 <HAL_RCC_OscConfig+0x13c>
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b04      	cmp	r3, #4
 8003132:	d11f      	bne.n	8003174 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003134:	4b5b      	ldr	r3, [pc, #364]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_OscConfig+0x154>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e267      	b.n	800361c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314c:	4b55      	ldr	r3, [pc, #340]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	061b      	lsls	r3, r3, #24
 800315a:	4952      	ldr	r1, [pc, #328]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003160:	4b51      	ldr	r3, [pc, #324]	; (80032a8 <HAL_RCC_OscConfig+0x2b0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd f86f 	bl	8000248 <HAL_InitTick>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d043      	beq.n	80031f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e253      	b.n	800361c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d023      	beq.n	80031c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4b49      	ldr	r3, [pc, #292]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a48      	ldr	r2, [pc, #288]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fd f8aa 	bl	80002e0 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003190:	f7fd f8a6 	bl	80002e0 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e23c      	b.n	800361c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a2:	4b40      	ldr	r3, [pc, #256]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	061b      	lsls	r3, r3, #24
 80031bc:	4939      	ldr	r1, [pc, #228]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
 80031c2:	e01a      	b.n	80031fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c4:	4b37      	ldr	r3, [pc, #220]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a36      	ldr	r2, [pc, #216]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 80031ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fd f886 	bl	80002e0 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d8:	f7fd f882 	bl	80002e0 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e218      	b.n	800361c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ea:	4b2e      	ldr	r3, [pc, #184]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x1e0>
 80031f6:	e000      	b.n	80031fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d03c      	beq.n	8003280 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d01c      	beq.n	8003248 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320e:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003214:	4a23      	ldr	r2, [pc, #140]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7fd f85f 	bl	80002e0 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003226:	f7fd f85b 	bl	80002e0 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e1f1      	b.n	800361c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003238:	4b1a      	ldr	r3, [pc, #104]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800323a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0ef      	beq.n	8003226 <HAL_RCC_OscConfig+0x22e>
 8003246:	e01b      	b.n	8003280 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003248:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 800324a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324e:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7fd f842 	bl	80002e0 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003260:	f7fd f83e 	bl	80002e0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e1d4      	b.n	800361c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003272:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1ef      	bne.n	8003260 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80ab 	beq.w	80033e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003292:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_RCC_OscConfig+0x2b4>
 800329e:	2301      	movs	r3, #1
 80032a0:	e005      	b.n	80032ae <HAL_RCC_OscConfig+0x2b6>
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	20000000 	.word	0x20000000
 80032ac:	2300      	movs	r3, #0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00d      	beq.n	80032ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b2:	4baf      	ldr	r3, [pc, #700]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80032b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b6:	4aae      	ldr	r2, [pc, #696]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80032b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032bc:	6593      	str	r3, [r2, #88]	; 0x58
 80032be:	4bac      	ldr	r3, [pc, #688]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032ca:	2301      	movs	r3, #1
 80032cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ce:	4ba9      	ldr	r3, [pc, #676]	; (8003574 <HAL_RCC_OscConfig+0x57c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d118      	bne.n	800330c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032da:	4ba6      	ldr	r3, [pc, #664]	; (8003574 <HAL_RCC_OscConfig+0x57c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4aa5      	ldr	r2, [pc, #660]	; (8003574 <HAL_RCC_OscConfig+0x57c>)
 80032e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e6:	f7fc fffb 	bl	80002e0 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ee:	f7fc fff7 	bl	80002e0 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e18d      	b.n	800361c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003300:	4b9c      	ldr	r3, [pc, #624]	; (8003574 <HAL_RCC_OscConfig+0x57c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d108      	bne.n	8003326 <HAL_RCC_OscConfig+0x32e>
 8003314:	4b96      	ldr	r3, [pc, #600]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	4a95      	ldr	r2, [pc, #596]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003324:	e024      	b.n	8003370 <HAL_RCC_OscConfig+0x378>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b05      	cmp	r3, #5
 800332c:	d110      	bne.n	8003350 <HAL_RCC_OscConfig+0x358>
 800332e:	4b90      	ldr	r3, [pc, #576]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003334:	4a8e      	ldr	r2, [pc, #568]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003336:	f043 0304 	orr.w	r3, r3, #4
 800333a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800333e:	4b8c      	ldr	r3, [pc, #560]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	4a8a      	ldr	r2, [pc, #552]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800334e:	e00f      	b.n	8003370 <HAL_RCC_OscConfig+0x378>
 8003350:	4b87      	ldr	r3, [pc, #540]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003356:	4a86      	ldr	r2, [pc, #536]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003360:	4b83      	ldr	r3, [pc, #524]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003366:	4a82      	ldr	r2, [pc, #520]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003368:	f023 0304 	bic.w	r3, r3, #4
 800336c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d016      	beq.n	80033a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003378:	f7fc ffb2 	bl	80002e0 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800337e:	e00a      	b.n	8003396 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003380:	f7fc ffae 	bl	80002e0 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e142      	b.n	800361c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003396:	4b76      	ldr	r3, [pc, #472]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ed      	beq.n	8003380 <HAL_RCC_OscConfig+0x388>
 80033a4:	e015      	b.n	80033d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a6:	f7fc ff9b 	bl	80002e0 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fc ff97 	bl	80002e0 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e12b      	b.n	800361c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033c4:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1ed      	bne.n	80033ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033d2:	7ffb      	ldrb	r3, [r7, #31]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d8:	4b65      	ldr	r3, [pc, #404]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	4a64      	ldr	r2, [pc, #400]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80033de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d03c      	beq.n	800346a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01c      	beq.n	8003432 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033f8:	4b5d      	ldr	r3, [pc, #372]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80033fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033fe:	4a5c      	ldr	r2, [pc, #368]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fc ff6a 	bl	80002e0 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003410:	f7fc ff66 	bl	80002e0 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0fc      	b.n	800361c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003422:	4b53      	ldr	r3, [pc, #332]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003424:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ef      	beq.n	8003410 <HAL_RCC_OscConfig+0x418>
 8003430:	e01b      	b.n	800346a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003432:	4b4f      	ldr	r3, [pc, #316]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003434:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003438:	4a4d      	ldr	r2, [pc, #308]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003442:	f7fc ff4d 	bl	80002e0 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800344a:	f7fc ff49 	bl	80002e0 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e0df      	b.n	800361c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800345c:	4b44      	ldr	r3, [pc, #272]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 800345e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1ef      	bne.n	800344a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80d3 	beq.w	800361a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003474:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b0c      	cmp	r3, #12
 800347e:	f000 808d 	beq.w	800359c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d15a      	bne.n	8003540 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	4b39      	ldr	r3, [pc, #228]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a38      	ldr	r2, [pc, #224]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003490:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fc ff23 	bl	80002e0 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349e:	f7fc ff1f 	bl	80002e0 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e0b5      	b.n	800361c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b0:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f0      	bne.n	800349e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034bc:	4b2c      	ldr	r3, [pc, #176]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <HAL_RCC_OscConfig+0x580>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6a11      	ldr	r1, [r2, #32]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034cc:	3a01      	subs	r2, #1
 80034ce:	0112      	lsls	r2, r2, #4
 80034d0:	4311      	orrs	r1, r2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80034d6:	0212      	lsls	r2, r2, #8
 80034d8:	4311      	orrs	r1, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034de:	0852      	lsrs	r2, r2, #1
 80034e0:	3a01      	subs	r2, #1
 80034e2:	0552      	lsls	r2, r2, #21
 80034e4:	4311      	orrs	r1, r2
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034ea:	0852      	lsrs	r2, r2, #1
 80034ec:	3a01      	subs	r2, #1
 80034ee:	0652      	lsls	r2, r2, #25
 80034f0:	4311      	orrs	r1, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034f6:	06d2      	lsls	r2, r2, #27
 80034f8:	430a      	orrs	r2, r1
 80034fa:	491d      	ldr	r1, [pc, #116]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003500:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1a      	ldr	r2, [pc, #104]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800350a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a17      	ldr	r2, [pc, #92]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003516:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fc fee2 	bl	80002e0 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7fc fede 	bl	80002e0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e074      	b.n	800361c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003532:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x528>
 800353e:	e06c      	b.n	800361a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800354a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800354c:	4b08      	ldr	r3, [pc, #32]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4a07      	ldr	r2, [pc, #28]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 8003552:	f023 0303 	bic.w	r3, r3, #3
 8003556:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a04      	ldr	r2, [pc, #16]	; (8003570 <HAL_RCC_OscConfig+0x578>)
 800355e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003566:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fc feba 	bl	80002e0 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800356e:	e00e      	b.n	800358e <HAL_RCC_OscConfig+0x596>
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
 8003578:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357c:	f7fc feb0 	bl	80002e0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e046      	b.n	800361c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358e:	4b25      	ldr	r3, [pc, #148]	; (8003624 <HAL_RCC_OscConfig+0x62c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x584>
 800359a:	e03e      	b.n	800361a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e039      	b.n	800361c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80035a8:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <HAL_RCC_OscConfig+0x62c>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 0203 	and.w	r2, r3, #3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d12c      	bne.n	8003616 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	3b01      	subs	r3, #1
 80035c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d123      	bne.n	8003616 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d11b      	bne.n	8003616 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d113      	bne.n	8003616 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	3b01      	subs	r3, #1
 80035fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035fe:	429a      	cmp	r2, r3
 8003600:	d109      	bne.n	8003616 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	085b      	lsrs	r3, r3, #1
 800360e:	3b01      	subs	r3, #1
 8003610:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d001      	beq.n	800361a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000

08003628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e11e      	b.n	800387e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003640:	4b91      	ldr	r3, [pc, #580]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d910      	bls.n	8003670 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b8e      	ldr	r3, [pc, #568]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 020f 	bic.w	r2, r3, #15
 8003656:	498c      	ldr	r1, [pc, #560]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b8a      	ldr	r3, [pc, #552]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e106      	b.n	800387e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d073      	beq.n	8003764 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d129      	bne.n	80036d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003684:	4b81      	ldr	r3, [pc, #516]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0f4      	b.n	800387e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003694:	f000 f966 	bl	8003964 <RCC_GetSysClockFreqFromPLLSource>
 8003698:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4a7c      	ldr	r2, [pc, #496]	; (8003890 <HAL_RCC_ClockConfig+0x268>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d93f      	bls.n	8003722 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036a2:	4b7a      	ldr	r3, [pc, #488]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d033      	beq.n	8003722 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d12f      	bne.n	8003722 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036c2:	4b72      	ldr	r3, [pc, #456]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ca:	4a70      	ldr	r2, [pc, #448]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 80036cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	e024      	b.n	8003722 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d107      	bne.n	80036f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e0:	4b6a      	ldr	r3, [pc, #424]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0c6      	b.n	800387e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f0:	4b66      	ldr	r3, [pc, #408]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0be      	b.n	800387e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003700:	f000 f8ce 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 8003704:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4a61      	ldr	r2, [pc, #388]	; (8003890 <HAL_RCC_ClockConfig+0x268>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d909      	bls.n	8003722 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800370e:	4b5f      	ldr	r3, [pc, #380]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003716:	4a5d      	ldr	r2, [pc, #372]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 8003718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800371c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003722:	4b5a      	ldr	r3, [pc, #360]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f023 0203 	bic.w	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4957      	ldr	r1, [pc, #348]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 8003730:	4313      	orrs	r3, r2
 8003732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003734:	f7fc fdd4 	bl	80002e0 <HAL_GetTick>
 8003738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	e00a      	b.n	8003752 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800373c:	f7fc fdd0 	bl	80002e0 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	; 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e095      	b.n	800387e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003752:	4b4e      	ldr	r3, [pc, #312]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 020c 	and.w	r2, r3, #12
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	429a      	cmp	r2, r3
 8003762:	d1eb      	bne.n	800373c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d023      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800377c:	4b43      	ldr	r3, [pc, #268]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	4a42      	ldr	r2, [pc, #264]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 8003782:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003786:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003794:	4b3d      	ldr	r3, [pc, #244]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800379c:	4a3b      	ldr	r2, [pc, #236]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 800379e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a4:	4b39      	ldr	r3, [pc, #228]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4936      	ldr	r1, [pc, #216]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
 80037b6:	e008      	b.n	80037ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2b80      	cmp	r3, #128	; 0x80
 80037bc:	d105      	bne.n	80037ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037be:	4b33      	ldr	r3, [pc, #204]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	4a32      	ldr	r2, [pc, #200]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 80037c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037ca:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d21d      	bcs.n	8003814 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d8:	4b2b      	ldr	r3, [pc, #172]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f023 020f 	bic.w	r2, r3, #15
 80037e0:	4929      	ldr	r1, [pc, #164]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037e8:	f7fc fd7a 	bl	80002e0 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f0:	f7fc fd76 	bl	80002e0 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e03b      	b.n	800387e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b20      	ldr	r3, [pc, #128]	; (8003888 <HAL_RCC_ClockConfig+0x260>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d1ed      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003820:	4b1a      	ldr	r3, [pc, #104]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4917      	ldr	r1, [pc, #92]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d009      	beq.n	8003852 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800383e:	4b13      	ldr	r3, [pc, #76]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	490f      	ldr	r1, [pc, #60]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003852:	f000 f825 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 8003856:	4601      	mov	r1, r0
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <HAL_RCC_ClockConfig+0x264>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	4a0c      	ldr	r2, [pc, #48]	; (8003894 <HAL_RCC_ClockConfig+0x26c>)
 8003864:	5cd3      	ldrb	r3, [r2, r3]
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	fa21 f303 	lsr.w	r3, r1, r3
 800386e:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <HAL_RCC_ClockConfig+0x270>)
 8003870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <HAL_RCC_ClockConfig+0x274>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fc fce6 	bl	8000248 <HAL_InitTick>
 800387c:	4603      	mov	r3, r0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40022000 	.word	0x40022000
 800388c:	40021000 	.word	0x40021000
 8003890:	04c4b400 	.word	0x04c4b400
 8003894:	08005524 	.word	0x08005524
 8003898:	20000008 	.word	0x20000008
 800389c:	20000000 	.word	0x20000000

080038a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038a6:	4b2c      	ldr	r3, [pc, #176]	; (8003958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d102      	bne.n	80038b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038b2:	4b2a      	ldr	r3, [pc, #168]	; (800395c <HAL_RCC_GetSysClockFreq+0xbc>)
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	e047      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038b8:	4b27      	ldr	r3, [pc, #156]	; (8003958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 030c 	and.w	r3, r3, #12
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d102      	bne.n	80038ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038c4:	4b26      	ldr	r3, [pc, #152]	; (8003960 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	e03e      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80038ca:	4b23      	ldr	r3, [pc, #140]	; (8003958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b0c      	cmp	r3, #12
 80038d4:	d136      	bne.n	8003944 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038d6:	4b20      	ldr	r3, [pc, #128]	; (8003958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038e0:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	3301      	adds	r3, #1
 80038ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d10c      	bne.n	800390e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038f4:	4a1a      	ldr	r2, [pc, #104]	; (8003960 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fc:	4a16      	ldr	r2, [pc, #88]	; (8003958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038fe:	68d2      	ldr	r2, [r2, #12]
 8003900:	0a12      	lsrs	r2, r2, #8
 8003902:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	617b      	str	r3, [r7, #20]
      break;
 800390c:	e00c      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800390e:	4a13      	ldr	r2, [pc, #76]	; (800395c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	fbb2 f3f3 	udiv	r3, r2, r3
 8003916:	4a10      	ldr	r2, [pc, #64]	; (8003958 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003918:	68d2      	ldr	r2, [r2, #12]
 800391a:	0a12      	lsrs	r2, r2, #8
 800391c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003920:	fb02 f303 	mul.w	r3, r2, r3
 8003924:	617b      	str	r3, [r7, #20]
      break;
 8003926:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_RCC_GetSysClockFreq+0xb8>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	0e5b      	lsrs	r3, r3, #25
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	3301      	adds	r3, #1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	e001      	b.n	8003948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003948:	693b      	ldr	r3, [r7, #16]
}
 800394a:	4618      	mov	r0, r3
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	00f42400 	.word	0x00f42400
 8003960:	007a1200 	.word	0x007a1200

08003964 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800396a:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003974:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	3301      	adds	r3, #1
 8003980:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d10c      	bne.n	80039a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003988:	4a17      	ldr	r2, [pc, #92]	; (80039e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	4a14      	ldr	r2, [pc, #80]	; (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003992:	68d2      	ldr	r2, [r2, #12]
 8003994:	0a12      	lsrs	r2, r2, #8
 8003996:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	617b      	str	r3, [r7, #20]
    break;
 80039a0:	e00c      	b.n	80039bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039a2:	4a12      	ldr	r2, [pc, #72]	; (80039ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	0a12      	lsrs	r2, r2, #8
 80039b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]
    break;
 80039ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0e5b      	lsrs	r3, r3, #25
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	3301      	adds	r3, #1
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039d6:	687b      	ldr	r3, [r7, #4]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	40021000 	.word	0x40021000
 80039e8:	007a1200 	.word	0x007a1200
 80039ec:	00f42400 	.word	0x00f42400

080039f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039f8:	2300      	movs	r3, #0
 80039fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039fc:	2300      	movs	r3, #0
 80039fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8098 	beq.w	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a12:	4b43      	ldr	r3, [pc, #268]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10d      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	4b40      	ldr	r3, [pc, #256]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	4a3f      	ldr	r2, [pc, #252]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a28:	6593      	str	r3, [r2, #88]	; 0x58
 8003a2a:	4b3d      	ldr	r3, [pc, #244]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a36:	2301      	movs	r3, #1
 8003a38:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a3a:	4b3a      	ldr	r3, [pc, #232]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a39      	ldr	r2, [pc, #228]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a46:	f7fc fc4b 	bl	80002e0 <HAL_GetTick>
 8003a4a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a4c:	e009      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4e:	f7fc fc47 	bl	80002e0 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d902      	bls.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	74fb      	strb	r3, [r7, #19]
        break;
 8003a60:	e005      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a62:	4b30      	ldr	r3, [pc, #192]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0ef      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d159      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a74:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01e      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d019      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a90:	4b23      	ldr	r3, [pc, #140]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a9c:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa2:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aac:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003abc:	4a18      	ldr	r2, [pc, #96]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fc fc07 	bl	80002e0 <HAL_GetTick>
 8003ad2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad4:	e00b      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f7fc fc03 	bl	80002e0 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d902      	bls.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	74fb      	strb	r3, [r7, #19]
            break;
 8003aec:	e006      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ec      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10b      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b02:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	4903      	ldr	r1, [pc, #12]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b18:	e008      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b1a:	7cfb      	ldrb	r3, [r7, #19]
 8003b1c:	74bb      	strb	r3, [r7, #18]
 8003b1e:	e005      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b2c:	7c7b      	ldrb	r3, [r7, #17]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d105      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b32:	4ba6      	ldr	r3, [pc, #664]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	4aa5      	ldr	r2, [pc, #660]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b4a:	4ba0      	ldr	r3, [pc, #640]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b50:	f023 0203 	bic.w	r2, r3, #3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	499c      	ldr	r1, [pc, #624]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b6c:	4b97      	ldr	r3, [pc, #604]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f023 020c 	bic.w	r2, r3, #12
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	4994      	ldr	r1, [pc, #592]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b8e:	4b8f      	ldr	r3, [pc, #572]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	498b      	ldr	r1, [pc, #556]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bb0:	4b86      	ldr	r3, [pc, #536]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	4983      	ldr	r1, [pc, #524]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bd2:	4b7e      	ldr	r3, [pc, #504]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	497a      	ldr	r1, [pc, #488]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bf4:	4b75      	ldr	r3, [pc, #468]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	4972      	ldr	r1, [pc, #456]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c16:	4b6d      	ldr	r3, [pc, #436]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	4969      	ldr	r1, [pc, #420]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c38:	4b64      	ldr	r3, [pc, #400]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	4961      	ldr	r1, [pc, #388]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c5a:	4b5c      	ldr	r3, [pc, #368]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	4958      	ldr	r1, [pc, #352]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d015      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c7c:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	4950      	ldr	r1, [pc, #320]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c9c:	4b4b      	ldr	r3, [pc, #300]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4a4a      	ldr	r2, [pc, #296]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ca6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d015      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cb4:	4b45      	ldr	r3, [pc, #276]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	4942      	ldr	r1, [pc, #264]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd2:	d105      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd4:	4b3d      	ldr	r3, [pc, #244]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4a3c      	ldr	r2, [pc, #240]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cde:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d015      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cec:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	4934      	ldr	r1, [pc, #208]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d0c:	4b2f      	ldr	r3, [pc, #188]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4a2e      	ldr	r2, [pc, #184]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d015      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d24:	4b29      	ldr	r3, [pc, #164]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d32:	4926      	ldr	r1, [pc, #152]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d42:	d105      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d44:	4b21      	ldr	r3, [pc, #132]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4a20      	ldr	r2, [pc, #128]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d015      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	4918      	ldr	r1, [pc, #96]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d7c:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d015      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d94:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da2:	490a      	ldr	r1, [pc, #40]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003dc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000

08003dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e01d      	b.n	8003e1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f001 f9c6 	bl	8005188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	f000 f9dc 	bl	80041cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <HAL_TIM_Base_Start_IT+0x50>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d00b      	beq.n	8003e6a <HAL_TIM_Base_Start_IT+0x42>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e58:	d007      	beq.n	8003e6a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0201 	orr.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	00010007 	.word	0x00010007

08003e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d122      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d11b      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0202 	mvn.w	r2, #2
 8003ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f965 	bl	800418e <HAL_TIM_IC_CaptureCallback>
 8003ec4:	e005      	b.n	8003ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f957 	bl	800417a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f968 	bl	80041a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d122      	bne.n	8003f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d11b      	bne.n	8003f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0204 	mvn.w	r2, #4
 8003efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f93b 	bl	800418e <HAL_TIM_IC_CaptureCallback>
 8003f18:	e005      	b.n	8003f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f92d 	bl	800417a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f93e 	bl	80041a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d122      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d11b      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0208 	mvn.w	r2, #8
 8003f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2204      	movs	r2, #4
 8003f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f911 	bl	800418e <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f903 	bl	800417a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f914 	bl	80041a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d122      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d11b      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0210 	mvn.w	r2, #16
 8003fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2208      	movs	r2, #8
 8003faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f8e7 	bl	800418e <HAL_TIM_IC_CaptureCallback>
 8003fc0:	e005      	b.n	8003fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8d9 	bl	800417a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f8ea 	bl	80041a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d10e      	bne.n	8004000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d107      	bne.n	8004000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0201 	mvn.w	r2, #1
 8003ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fc5e 	bl	80048bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b80      	cmp	r3, #128	; 0x80
 800400c:	d10e      	bne.n	800402c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004018:	2b80      	cmp	r3, #128	; 0x80
 800401a:	d107      	bne.n	800402c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f96a 	bl	8004300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403a:	d10e      	bne.n	800405a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b80      	cmp	r3, #128	; 0x80
 8004048:	d107      	bne.n	800405a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f95d 	bl	8004314 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004064:	2b40      	cmp	r3, #64	; 0x40
 8004066:	d10e      	bne.n	8004086 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004072:	2b40      	cmp	r3, #64	; 0x40
 8004074:	d107      	bne.n	8004086 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800407e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f898 	bl	80041b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b20      	cmp	r3, #32
 8004092:	d10e      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b20      	cmp	r3, #32
 80040a0:	d107      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f06f 0220 	mvn.w	r2, #32
 80040aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f91d 	bl	80042ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c0:	d10f      	bne.n	80040e2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040d0:	d107      	bne.n	80040e2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80040da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f923 	bl	8004328 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040f0:	d10f      	bne.n	8004112 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004100:	d107      	bne.n	8004112 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800410a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f915 	bl	800433c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004120:	d10f      	bne.n	8004142 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004130:	d107      	bne.n	8004142 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800413a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f907 	bl	8004350 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800414c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004150:	d10f      	bne.n	8004172 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800415c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004160:	d107      	bne.n	8004172 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800416a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f8f9 	bl	8004364 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <TIM_Base_SetConfig+0x104>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00f      	beq.n	8004204 <TIM_Base_SetConfig+0x38>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ea:	d00b      	beq.n	8004204 <TIM_Base_SetConfig+0x38>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a39      	ldr	r2, [pc, #228]	; (80042d4 <TIM_Base_SetConfig+0x108>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d007      	beq.n	8004204 <TIM_Base_SetConfig+0x38>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a38      	ldr	r2, [pc, #224]	; (80042d8 <TIM_Base_SetConfig+0x10c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d003      	beq.n	8004204 <TIM_Base_SetConfig+0x38>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a37      	ldr	r2, [pc, #220]	; (80042dc <TIM_Base_SetConfig+0x110>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d108      	bne.n	8004216 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2d      	ldr	r2, [pc, #180]	; (80042d0 <TIM_Base_SetConfig+0x104>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01b      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004224:	d017      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2a      	ldr	r2, [pc, #168]	; (80042d4 <TIM_Base_SetConfig+0x108>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a29      	ldr	r2, [pc, #164]	; (80042d8 <TIM_Base_SetConfig+0x10c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00f      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a28      	ldr	r2, [pc, #160]	; (80042dc <TIM_Base_SetConfig+0x110>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00b      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a27      	ldr	r2, [pc, #156]	; (80042e0 <TIM_Base_SetConfig+0x114>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a26      	ldr	r2, [pc, #152]	; (80042e4 <TIM_Base_SetConfig+0x118>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a25      	ldr	r2, [pc, #148]	; (80042e8 <TIM_Base_SetConfig+0x11c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d108      	bne.n	8004268 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a10      	ldr	r2, [pc, #64]	; (80042d0 <TIM_Base_SetConfig+0x104>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00f      	beq.n	80042b4 <TIM_Base_SetConfig+0xe8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a11      	ldr	r2, [pc, #68]	; (80042dc <TIM_Base_SetConfig+0x110>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00b      	beq.n	80042b4 <TIM_Base_SetConfig+0xe8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a10      	ldr	r2, [pc, #64]	; (80042e0 <TIM_Base_SetConfig+0x114>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <TIM_Base_SetConfig+0xe8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a0f      	ldr	r2, [pc, #60]	; (80042e4 <TIM_Base_SetConfig+0x118>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_Base_SetConfig+0xe8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a0e      	ldr	r2, [pc, #56]	; (80042e8 <TIM_Base_SetConfig+0x11c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d103      	bne.n	80042bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	615a      	str	r2, [r3, #20]
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40000400 	.word	0x40000400
 80042d8:	40000800 	.word	0x40000800
 80042dc:	40013400 	.word	0x40013400
 80042e0:	40014000 	.word	0x40014000
 80042e4:	40014400 	.word	0x40014400
 80042e8:	40014800 	.word	0x40014800

080042ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <Config_Setup>:
#include "main.h"
#include "config.h"


void Config_Setup(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0

		Config_1();

#else //catch everything that is not a proper ID, give it settings that the debug board would get

		Config_0();
 800437c:	f000 f802 	bl	8004384 <Config_0>
	}
	else //if flash is not blank read in values from flash
	{
		Config_Read_Flash();
	}*/
}
 8004380:	bf00      	nop
 8004382:	bd80      	pop	{r7, pc}

08004384 <Config_0>:


void Config_0(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
	MeasureDriverCurrent = 1;
 8004388:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <Config_0+0x70>)
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
	MeasureTemperature = 1;
 800438e:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <Config_0+0x74>)
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
	SensorRollingAverages[0] = 1; //AI2
 8004394:	4b19      	ldr	r3, [pc, #100]	; (80043fc <Config_0+0x78>)
 8004396:	2201      	movs	r2, #1
 8004398:	801a      	strh	r2, [r3, #0]
	SensorRollingAverages[1] = 1; //AI3
 800439a:	4b18      	ldr	r3, [pc, #96]	; (80043fc <Config_0+0x78>)
 800439c:	2201      	movs	r2, #1
 800439e:	805a      	strh	r2, [r3, #2]
	SensorRollingAverages[2] = 1; //AI5
 80043a0:	4b16      	ldr	r3, [pc, #88]	; (80043fc <Config_0+0x78>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	809a      	strh	r2, [r3, #4]
	SensorRollingAverages[3] = 1; //AI6
 80043a6:	4b15      	ldr	r3, [pc, #84]	; (80043fc <Config_0+0x78>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	80da      	strh	r2, [r3, #6]
	TransferFunctions[0] = VOLTAGE_5V_UNCAL; //AI2
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <Config_0+0x7c>)
 80043ae:	2203      	movs	r2, #3
 80043b0:	701a      	strb	r2, [r3, #0]
	TransferFunctions[1] = VOLTAGE_24V_UNCAL; //AI3
 80043b2:	4b13      	ldr	r3, [pc, #76]	; (8004400 <Config_0+0x7c>)
 80043b4:	2206      	movs	r2, #6
 80043b6:	705a      	strb	r2, [r3, #1]
	TransferFunctions[2] = VOLTAGE_4V5_UNCAL; //AI5
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <Config_0+0x7c>)
 80043ba:	2202      	movs	r2, #2
 80043bc:	709a      	strb	r2, [r3, #2]
	TransferFunctions[3] = VOLTAGE_3V3_UNCAL; //AI6
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <Config_0+0x7c>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	70da      	strb	r2, [r3, #3]

	CanId_Analog = 0x88;
 80043c4:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <Config_0+0x80>)
 80043c6:	2288      	movs	r2, #136	; 0x88
 80043c8:	801a      	strh	r2, [r3, #0]
	AnalogSensorBytes[0] = 1;
 80043ca:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <Config_0+0x84>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]
	AnalogSensorBytes[1] = 2;
 80043d0:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <Config_0+0x84>)
 80043d2:	2202      	movs	r2, #2
 80043d4:	705a      	strb	r2, [r3, #1]
	AnalogSensorBytes[2] = 0;
 80043d6:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <Config_0+0x84>)
 80043d8:	2200      	movs	r2, #0
 80043da:	709a      	strb	r2, [r3, #2]
	AnalogSensorBytes[3] = 2;
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <Config_0+0x84>)
 80043de:	2202      	movs	r2, #2
 80043e0:	70da      	strb	r2, [r3, #3]
	CanId_Diagnostics = 0x89;
 80043e2:	4b0a      	ldr	r3, [pc, #40]	; (800440c <Config_0+0x88>)
 80043e4:	2289      	movs	r2, #137	; 0x89
 80043e6:	801a      	strh	r2, [r3, #0]
}
 80043e8:	bf00      	nop
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000eb8 	.word	0x20000eb8
 80043f8:	20000d4c 	.word	0x20000d4c
 80043fc:	20000cd8 	.word	0x20000cd8
 8004400:	20000e34 	.word	0x20000e34
 8004404:	20000dc4 	.word	0x20000dc4
 8004408:	20000eac 	.word	0x20000eac
 800440c:	20000db4 	.word	0x20000db4

08004410 <main>:
uint32_t canErrors[8];
uint8_t canSendErrorFlag;


int main(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	; 0x28
 8004414:	af00      	add	r7, sp, #0
	HAL_Init();
 8004416:	f7fb feff 	bl	8000218 <HAL_Init>

	SystemClock_Config();
 800441a:	f000 fa67 	bl	80048ec <SystemClock_Config>

	Config_Setup();
 800441e:	f7ff ffab 	bl	8004378 <Config_Setup>

	MX_GPIO_Init();
 8004422:	f000 fac9 	bl	80049b8 <MX_GPIO_Init>
	MX_DMA_Init();
 8004426:	f000 fb07 	bl	8004a38 <MX_DMA_Init>
	MX_ADC1_Init();
 800442a:	f000 fb37 	bl	8004a9c <MX_ADC1_Init>
	MX_ADC2_Init();
 800442e:	f000 fbeb 	bl	8004c08 <MX_ADC2_Init>
	MX_FDCAN_Init();
 8004432:	f000 fc87 	bl	8004d44 <MX_FDCAN_Init>
	MX_TIM7_Init();
 8004436:	f000 fd19 	bl	8004e6c <MX_TIM7_Init>

    if (HAL_ADC_Start_DMA(&hadc1, ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK) { Error_Handler(); }
 800443a:	4b3f      	ldr	r3, [pc, #252]	; (8004538 <main+0x128>)
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	461a      	mov	r2, r3
 8004440:	493e      	ldr	r1, [pc, #248]	; (800453c <main+0x12c>)
 8004442:	483d      	ldr	r0, [pc, #244]	; (8004538 <main+0x128>)
 8004444:	f7fc fb34 	bl	8000ab0 <HAL_ADC_Start_DMA>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <main+0x42>
 800444e:	f000 fd31 	bl	8004eb4 <Error_Handler>
    if (HAL_ADC_Start_DMA(&hadc2, ADC2Data, hadc2.Init.NbrOfConversion) != HAL_OK) { Error_Handler(); }
 8004452:	4b3b      	ldr	r3, [pc, #236]	; (8004540 <main+0x130>)
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	461a      	mov	r2, r3
 8004458:	493a      	ldr	r1, [pc, #232]	; (8004544 <main+0x134>)
 800445a:	4839      	ldr	r0, [pc, #228]	; (8004540 <main+0x130>)
 800445c:	f7fc fb28 	bl	8000ab0 <HAL_ADC_Start_DMA>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <main+0x5a>
 8004466:	f000 fd25 	bl	8004eb4 <Error_Handler>


	while (1)
	{
		if(canErrorToTransmit && canSendErrorFlag)
 800446a:	4b37      	ldr	r3, [pc, #220]	; (8004548 <main+0x138>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00c      	beq.n	800448c <main+0x7c>
 8004472:	4b36      	ldr	r3, [pc, #216]	; (800454c <main+0x13c>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d008      	beq.n	800448c <main+0x7c>
		{
			Send_Error();
 800447a:	f000 f99d 	bl	80047b8 <Send_Error>
			if(!canErrorToTransmit)
 800447e:	4b32      	ldr	r3, [pc, #200]	; (8004548 <main+0x138>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <main+0x7c>
			{
				canSendErrorFlag=0;
 8004486:	4b31      	ldr	r3, [pc, #196]	; (800454c <main+0x13c>)
 8004488:	2200      	movs	r2, #0
 800448a:	701a      	strb	r2, [r3, #0]

		//Can_Send_Analog(); //TODO: sync, maybe sync delay, regular sending
		//HAL_Delay(100);
		extern uint32_t NTC_NTC1_680_LUT[2*16];
		volatile uint32_t a, b, c, d, e, f, g, l;
		for(volatile uint32_t i=1000; i>0; i--)
 800448c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	e046      	b.n	8004522 <main+0x112>
		{
			a = LUT(300+i, NTC_NTC1_680_LUT, 4);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800449c:	b29b      	uxth	r3, r3
 800449e:	2204      	movs	r2, #4
 80044a0:	492b      	ldr	r1, [pc, #172]	; (8004550 <main+0x140>)
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 ff02 	bl	80052ac <LUT>
 80044a8:	4603      	mov	r3, r0
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
			b = LUT(419, NTC_NTC1_680_LUT, 4);
 80044ac:	2204      	movs	r2, #4
 80044ae:	4928      	ldr	r1, [pc, #160]	; (8004550 <main+0x140>)
 80044b0:	f240 10a3 	movw	r0, #419	; 0x1a3
 80044b4:	f000 fefa 	bl	80052ac <LUT>
 80044b8:	4603      	mov	r3, r0
 80044ba:	623b      	str	r3, [r7, #32]
			c = LUT(520, NTC_NTC1_680_LUT, 4);
 80044bc:	2204      	movs	r2, #4
 80044be:	4924      	ldr	r1, [pc, #144]	; (8004550 <main+0x140>)
 80044c0:	f44f 7002 	mov.w	r0, #520	; 0x208
 80044c4:	f000 fef2 	bl	80052ac <LUT>
 80044c8:	4603      	mov	r3, r0
 80044ca:	61fb      	str	r3, [r7, #28]
			d = LUT(3785, NTC_NTC1_680_LUT, 4);
 80044cc:	2204      	movs	r2, #4
 80044ce:	4920      	ldr	r1, [pc, #128]	; (8004550 <main+0x140>)
 80044d0:	f640 60c9 	movw	r0, #3785	; 0xec9
 80044d4:	f000 feea 	bl	80052ac <LUT>
 80044d8:	4603      	mov	r3, r0
 80044da:	61bb      	str	r3, [r7, #24]
			e = LUT(9999, NTC_NTC1_680_LUT, 4);
 80044dc:	2204      	movs	r2, #4
 80044de:	491c      	ldr	r1, [pc, #112]	; (8004550 <main+0x140>)
 80044e0:	f242 700f 	movw	r0, #9999	; 0x270f
 80044e4:	f000 fee2 	bl	80052ac <LUT>
 80044e8:	4603      	mov	r3, r0
 80044ea:	617b      	str	r3, [r7, #20]
			f = LUT(2030, NTC_NTC1_680_LUT, 4);
 80044ec:	2204      	movs	r2, #4
 80044ee:	4918      	ldr	r1, [pc, #96]	; (8004550 <main+0x140>)
 80044f0:	f240 70ee 	movw	r0, #2030	; 0x7ee
 80044f4:	f000 feda 	bl	80052ac <LUT>
 80044f8:	4603      	mov	r3, r0
 80044fa:	613b      	str	r3, [r7, #16]
			g = LUT(3040, NTC_NTC1_680_LUT, 4);
 80044fc:	2204      	movs	r2, #4
 80044fe:	4914      	ldr	r1, [pc, #80]	; (8004550 <main+0x140>)
 8004500:	f44f 603e 	mov.w	r0, #3040	; 0xbe0
 8004504:	f000 fed2 	bl	80052ac <LUT>
 8004508:	4603      	mov	r3, r0
 800450a:	60fb      	str	r3, [r7, #12]
			l = LUT(3750, NTC_NTC1_680_LUT, 4);
 800450c:	2204      	movs	r2, #4
 800450e:	4910      	ldr	r1, [pc, #64]	; (8004550 <main+0x140>)
 8004510:	f640 60a6 	movw	r0, #3750	; 0xea6
 8004514:	f000 feca 	bl	80052ac <LUT>
 8004518:	4603      	mov	r3, r0
 800451a:	60bb      	str	r3, [r7, #8]
		for(volatile uint32_t i=1000; i>0; i--)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3b01      	subs	r3, #1
 8004520:	607b      	str	r3, [r7, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1b5      	bne.n	8004494 <main+0x84>
		}

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8004528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800452c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004530:	f7fe fca4 	bl	8002e7c <HAL_GPIO_TogglePin>
	{
 8004534:	e799      	b.n	800446a <main+0x5a>
 8004536:	bf00      	nop
 8004538:	20000dc8 	.word	0x20000dc8
 800453c:	20000e38 	.word	0x20000e38
 8004540:	20000ce0 	.word	0x20000ce0
 8004544:	20000ed0 	.word	0x20000ed0
 8004548:	20000dbc 	.word	0x20000dbc
 800454c:	20000f3c 	.word	0x20000f3c
 8004550:	2000000c 	.word	0x2000000c

08004554 <HAL_ADC_ConvCpltCallback>:
	}
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004564:	d165      	bne.n	8004632 <HAL_ADC_ConvCpltCallback+0xde>
	{
		ADCRawData[0][AI2Pos] = ADC1Data[0];
 8004566:	4b6d      	ldr	r3, [pc, #436]	; (800471c <HAL_ADC_ConvCpltCallback+0x1c8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a6d      	ldr	r2, [pc, #436]	; (8004720 <HAL_ADC_ConvCpltCallback+0x1cc>)
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	496d      	ldr	r1, [pc, #436]	; (8004724 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8004570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AI2Pos++;
 8004574:	4b69      	ldr	r3, [pc, #420]	; (800471c <HAL_ADC_ConvCpltCallback+0x1c8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3301      	adds	r3, #1
 800457a:	4a68      	ldr	r2, [pc, #416]	; (800471c <HAL_ADC_ConvCpltCallback+0x1c8>)
 800457c:	6013      	str	r3, [r2, #0]
		if (AI2Pos>(SensorRollingAverages[0]-1))
 800457e:	4b6a      	ldr	r3, [pc, #424]	; (8004728 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	3b01      	subs	r3, #1
 8004584:	461a      	mov	r2, r3
 8004586:	4b65      	ldr	r3, [pc, #404]	; (800471c <HAL_ADC_ConvCpltCallback+0x1c8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d203      	bcs.n	8004596 <HAL_ADC_ConvCpltCallback+0x42>
		{
			AI2Pos = 0;
 800458e:	4b63      	ldr	r3, [pc, #396]	; (800471c <HAL_ADC_ConvCpltCallback+0x1c8>)
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e009      	b.n	80045aa <HAL_ADC_ConvCpltCallback+0x56>
		}
		else if (AI2Written<AI2Pos)
 8004596:	4b65      	ldr	r3, [pc, #404]	; (800472c <HAL_ADC_ConvCpltCallback+0x1d8>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4b60      	ldr	r3, [pc, #384]	; (800471c <HAL_ADC_ConvCpltCallback+0x1c8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d203      	bcs.n	80045aa <HAL_ADC_ConvCpltCallback+0x56>
		{
			AI2Written = AI2Pos;
 80045a2:	4b5e      	ldr	r3, [pc, #376]	; (800471c <HAL_ADC_ConvCpltCallback+0x1c8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a61      	ldr	r2, [pc, #388]	; (800472c <HAL_ADC_ConvCpltCallback+0x1d8>)
 80045a8:	6013      	str	r3, [r2, #0]
		}

		ADCRawData[1][AI3Pos] = ADC1Data[1];
 80045aa:	4b61      	ldr	r3, [pc, #388]	; (8004730 <HAL_ADC_ConvCpltCallback+0x1dc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a5c      	ldr	r2, [pc, #368]	; (8004720 <HAL_ADC_ConvCpltCallback+0x1cc>)
 80045b0:	6852      	ldr	r2, [r2, #4]
 80045b2:	495c      	ldr	r1, [pc, #368]	; (8004724 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80045b4:	3380      	adds	r3, #128	; 0x80
 80045b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AI3Pos++;
 80045ba:	4b5d      	ldr	r3, [pc, #372]	; (8004730 <HAL_ADC_ConvCpltCallback+0x1dc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3301      	adds	r3, #1
 80045c0:	4a5b      	ldr	r2, [pc, #364]	; (8004730 <HAL_ADC_ConvCpltCallback+0x1dc>)
 80045c2:	6013      	str	r3, [r2, #0]
		if (AI3Pos>(SensorRollingAverages[1]-1))
 80045c4:	4b58      	ldr	r3, [pc, #352]	; (8004728 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80045c6:	885b      	ldrh	r3, [r3, #2]
 80045c8:	3b01      	subs	r3, #1
 80045ca:	461a      	mov	r2, r3
 80045cc:	4b58      	ldr	r3, [pc, #352]	; (8004730 <HAL_ADC_ConvCpltCallback+0x1dc>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d203      	bcs.n	80045dc <HAL_ADC_ConvCpltCallback+0x88>
		{
			AI3Pos = 0;
 80045d4:	4b56      	ldr	r3, [pc, #344]	; (8004730 <HAL_ADC_ConvCpltCallback+0x1dc>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e009      	b.n	80045f0 <HAL_ADC_ConvCpltCallback+0x9c>
		}
		else if (AI3Written<AI3Pos)
 80045dc:	4b55      	ldr	r3, [pc, #340]	; (8004734 <HAL_ADC_ConvCpltCallback+0x1e0>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	4b53      	ldr	r3, [pc, #332]	; (8004730 <HAL_ADC_ConvCpltCallback+0x1dc>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d203      	bcs.n	80045f0 <HAL_ADC_ConvCpltCallback+0x9c>
		{
			AI3Written = AI3Pos;
 80045e8:	4b51      	ldr	r3, [pc, #324]	; (8004730 <HAL_ADC_ConvCpltCallback+0x1dc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a51      	ldr	r2, [pc, #324]	; (8004734 <HAL_ADC_ConvCpltCallback+0x1e0>)
 80045ee:	6013      	str	r3, [r2, #0]
		}

		ADCRawData[2][TPos] = ADC1Data[2];
 80045f0:	4b51      	ldr	r3, [pc, #324]	; (8004738 <HAL_ADC_ConvCpltCallback+0x1e4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a4a      	ldr	r2, [pc, #296]	; (8004720 <HAL_ADC_ConvCpltCallback+0x1cc>)
 80045f6:	6892      	ldr	r2, [r2, #8]
 80045f8:	494a      	ldr	r1, [pc, #296]	; (8004724 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80045fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80045fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		TPos++;
 8004602:	4b4d      	ldr	r3, [pc, #308]	; (8004738 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3301      	adds	r3, #1
 8004608:	4a4b      	ldr	r2, [pc, #300]	; (8004738 <HAL_ADC_ConvCpltCallback+0x1e4>)
 800460a:	6013      	str	r3, [r2, #0]
		if (TPos>(T_ROLLING_AVERAGE-1))
 800460c:	4b4a      	ldr	r3, [pc, #296]	; (8004738 <HAL_ADC_ConvCpltCallback+0x1e4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b7f      	cmp	r3, #127	; 0x7f
 8004612:	d903      	bls.n	800461c <HAL_ADC_ConvCpltCallback+0xc8>
		{
			TPos = 0;
 8004614:	4b48      	ldr	r3, [pc, #288]	; (8004738 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
	}
	else
	{
		Error_Handler();
	}
}
 800461a:	e07a      	b.n	8004712 <HAL_ADC_ConvCpltCallback+0x1be>
		else if (TWritten<TPos)
 800461c:	4b47      	ldr	r3, [pc, #284]	; (800473c <HAL_ADC_ConvCpltCallback+0x1e8>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4b45      	ldr	r3, [pc, #276]	; (8004738 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d274      	bcs.n	8004712 <HAL_ADC_ConvCpltCallback+0x1be>
			TWritten = TPos;
 8004628:	4b43      	ldr	r3, [pc, #268]	; (8004738 <HAL_ADC_ConvCpltCallback+0x1e4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a43      	ldr	r2, [pc, #268]	; (800473c <HAL_ADC_ConvCpltCallback+0x1e8>)
 800462e:	6013      	str	r3, [r2, #0]
}
 8004630:	e06f      	b.n	8004712 <HAL_ADC_ConvCpltCallback+0x1be>
	else if (hadc->Instance == ADC2)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a42      	ldr	r2, [pc, #264]	; (8004740 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d168      	bne.n	800470e <HAL_ADC_ConvCpltCallback+0x1ba>
		ADCRawData[3][AI5Pos] = ADC2Data[0];
 800463c:	4b41      	ldr	r3, [pc, #260]	; (8004744 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a41      	ldr	r2, [pc, #260]	; (8004748 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	4937      	ldr	r1, [pc, #220]	; (8004724 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8004646:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800464a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AI5Pos++;
 800464e:	4b3d      	ldr	r3, [pc, #244]	; (8004744 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3301      	adds	r3, #1
 8004654:	4a3b      	ldr	r2, [pc, #236]	; (8004744 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8004656:	6013      	str	r3, [r2, #0]
		if (AI5Pos>(SensorRollingAverages[2]-1))
 8004658:	4b33      	ldr	r3, [pc, #204]	; (8004728 <HAL_ADC_ConvCpltCallback+0x1d4>)
 800465a:	889b      	ldrh	r3, [r3, #4]
 800465c:	3b01      	subs	r3, #1
 800465e:	461a      	mov	r2, r3
 8004660:	4b38      	ldr	r3, [pc, #224]	; (8004744 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d203      	bcs.n	8004670 <HAL_ADC_ConvCpltCallback+0x11c>
			AI5Pos = 0;
 8004668:	4b36      	ldr	r3, [pc, #216]	; (8004744 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e009      	b.n	8004684 <HAL_ADC_ConvCpltCallback+0x130>
		else if (AI5Written<AI5Pos)
 8004670:	4b36      	ldr	r3, [pc, #216]	; (800474c <HAL_ADC_ConvCpltCallback+0x1f8>)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4b33      	ldr	r3, [pc, #204]	; (8004744 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d203      	bcs.n	8004684 <HAL_ADC_ConvCpltCallback+0x130>
			AI5Written = AI5Pos;
 800467c:	4b31      	ldr	r3, [pc, #196]	; (8004744 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a32      	ldr	r2, [pc, #200]	; (800474c <HAL_ADC_ConvCpltCallback+0x1f8>)
 8004682:	6013      	str	r3, [r2, #0]
		ADCRawData[4][AI6Pos] = ADC2Data[1];
 8004684:	4b32      	ldr	r3, [pc, #200]	; (8004750 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a2f      	ldr	r2, [pc, #188]	; (8004748 <HAL_ADC_ConvCpltCallback+0x1f4>)
 800468a:	6852      	ldr	r2, [r2, #4]
 800468c:	4925      	ldr	r1, [pc, #148]	; (8004724 <HAL_ADC_ConvCpltCallback+0x1d0>)
 800468e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		AI6Pos++;
 8004696:	4b2e      	ldr	r3, [pc, #184]	; (8004750 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3301      	adds	r3, #1
 800469c:	4a2c      	ldr	r2, [pc, #176]	; (8004750 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800469e:	6013      	str	r3, [r2, #0]
		if (AI6Pos>(SensorRollingAverages[3]-1))
 80046a0:	4b21      	ldr	r3, [pc, #132]	; (8004728 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80046a2:	88db      	ldrh	r3, [r3, #6]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	461a      	mov	r2, r3
 80046a8:	4b29      	ldr	r3, [pc, #164]	; (8004750 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d203      	bcs.n	80046b8 <HAL_ADC_ConvCpltCallback+0x164>
			AI6Pos = 0;
 80046b0:	4b27      	ldr	r3, [pc, #156]	; (8004750 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e009      	b.n	80046cc <HAL_ADC_ConvCpltCallback+0x178>
		else if (AI6Written<AI6Pos)
 80046b8:	4b26      	ldr	r3, [pc, #152]	; (8004754 <HAL_ADC_ConvCpltCallback+0x200>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	4b24      	ldr	r3, [pc, #144]	; (8004750 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d203      	bcs.n	80046cc <HAL_ADC_ConvCpltCallback+0x178>
			AI6Written = AI6Pos;
 80046c4:	4b22      	ldr	r3, [pc, #136]	; (8004750 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a22      	ldr	r2, [pc, #136]	; (8004754 <HAL_ADC_ConvCpltCallback+0x200>)
 80046ca:	6013      	str	r3, [r2, #0]
		ADCRawData[5][IPos] = ADC1Data[2];
 80046cc:	4b22      	ldr	r3, [pc, #136]	; (8004758 <HAL_ADC_ConvCpltCallback+0x204>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a13      	ldr	r2, [pc, #76]	; (8004720 <HAL_ADC_ConvCpltCallback+0x1cc>)
 80046d2:	6892      	ldr	r2, [r2, #8]
 80046d4:	4913      	ldr	r1, [pc, #76]	; (8004724 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80046d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80046da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		IPos++;
 80046de:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <HAL_ADC_ConvCpltCallback+0x204>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3301      	adds	r3, #1
 80046e4:	4a1c      	ldr	r2, [pc, #112]	; (8004758 <HAL_ADC_ConvCpltCallback+0x204>)
 80046e6:	6013      	str	r3, [r2, #0]
		if (IPos>(I_ROLLING_AVERAGE-1))
 80046e8:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <HAL_ADC_ConvCpltCallback+0x204>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b7f      	cmp	r3, #127	; 0x7f
 80046ee:	d903      	bls.n	80046f8 <HAL_ADC_ConvCpltCallback+0x1a4>
			IPos = 0;
 80046f0:	4b19      	ldr	r3, [pc, #100]	; (8004758 <HAL_ADC_ConvCpltCallback+0x204>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
}
 80046f6:	e00c      	b.n	8004712 <HAL_ADC_ConvCpltCallback+0x1be>
		else if (IWritten<IPos)
 80046f8:	4b18      	ldr	r3, [pc, #96]	; (800475c <HAL_ADC_ConvCpltCallback+0x208>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b16      	ldr	r3, [pc, #88]	; (8004758 <HAL_ADC_ConvCpltCallback+0x204>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d206      	bcs.n	8004712 <HAL_ADC_ConvCpltCallback+0x1be>
			IWritten = IPos;
 8004704:	4b14      	ldr	r3, [pc, #80]	; (8004758 <HAL_ADC_ConvCpltCallback+0x204>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a14      	ldr	r2, [pc, #80]	; (800475c <HAL_ADC_ConvCpltCallback+0x208>)
 800470a:	6013      	str	r3, [r2, #0]
}
 800470c:	e001      	b.n	8004712 <HAL_ADC_ConvCpltCallback+0x1be>
		Error_Handler();
 800470e:	f000 fbd1 	bl	8004eb4 <Error_Handler>
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000ec0 	.word	0x20000ec0
 8004720:	20000e38 	.word	0x20000e38
 8004724:	200000b4 	.word	0x200000b4
 8004728:	20000cd8 	.word	0x20000cd8
 800472c:	20000f80 	.word	0x20000f80
 8004730:	20000ea4 	.word	0x20000ea4
 8004734:	20000dc0 	.word	0x20000dc0
 8004738:	200000b0 	.word	0x200000b0
 800473c:	20000ec4 	.word	0x20000ec4
 8004740:	50000100 	.word	0x50000100
 8004744:	20000db8 	.word	0x20000db8
 8004748:	20000ed0 	.word	0x20000ed0
 800474c:	20000ebc 	.word	0x20000ebc
 8004750:	20000ea8 	.word	0x20000ea8
 8004754:	20000cb4 	.word	0x20000cb4
 8004758:	20000eb4 	.word	0x20000eb4
 800475c:	20000eb0 	.word	0x20000eb0

08004760 <Set_Error>:
		return;
	}
}

void Set_Error(uint32_t error)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	canErrors[(error/32)]  |= (1<<(error%32));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	4a10      	ldr	r2, [pc, #64]	; (80047b0 <Set_Error+0x50>)
 800476e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	f001 011f 	and.w	r1, r1, #31
 8004778:	2001      	movs	r0, #1
 800477a:	fa00 f101 	lsl.w	r1, r0, r1
 800477e:	430a      	orrs	r2, r1
 8004780:	490b      	ldr	r1, [pc, #44]	; (80047b0 <Set_Error+0x50>)
 8004782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	canErrorToTransmit |= (1<<(error/32));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	2201      	movs	r2, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	b25a      	sxtb	r2, r3
 8004792:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <Set_Error+0x54>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	b25b      	sxtb	r3, r3
 8004798:	4313      	orrs	r3, r2
 800479a:	b25b      	sxtb	r3, r3
 800479c:	b2da      	uxtb	r2, r3
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <Set_Error+0x54>)
 80047a0:	701a      	strb	r2, [r3, #0]
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20000cb8 	.word	0x20000cb8
 80047b4:	20000dbc 	.word	0x20000dbc

080047b8 <Send_Error>:

void Send_Error(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	; 0x28
 80047bc:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<8; i++)
 80047be:	2300      	movs	r3, #0
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
 80047c2:	e06d      	b.n	80048a0 <Send_Error+0xe8>
	{
		if (canErrorToTransmit&(1<<i))
 80047c4:	4b39      	ldr	r3, [pc, #228]	; (80048ac <Send_Error+0xf4>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	fa42 f303 	asr.w	r3, r2, r3
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d060      	beq.n	800489a <Send_Error+0xe2>
		{
			if(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan) > 0)
 80047d8:	4835      	ldr	r0, [pc, #212]	; (80048b0 <Send_Error+0xf8>)
 80047da:	f7fd fe3d 	bl	8002458 <HAL_FDCAN_GetTxFifoFreeLevel>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d05a      	beq.n	800489a <Send_Error+0xe2>
			{
				FDCAN_TxHeaderTypeDef TxHeader;

				TxHeader.Identifier = CANID_ERROR;
 80047e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80047e8:	603b      	str	r3, [r7, #0]
				TxHeader.DataLength = FDCAN_DLC_BYTES_6;
 80047ea:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80047ee:	60fb      	str	r3, [r7, #12]

				CANTxData[0]=ID;
 80047f0:	4b30      	ldr	r3, [pc, #192]	; (80048b4 <Send_Error+0xfc>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	701a      	strb	r2, [r3, #0]
				CANTxData[1]=i;
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	4b2e      	ldr	r3, [pc, #184]	; (80048b4 <Send_Error+0xfc>)
 80047fc:	705a      	strb	r2, [r3, #1]
				CANTxData[2]=(canErrors[i]>>24)&0xFF;
 80047fe:	4a2e      	ldr	r2, [pc, #184]	; (80048b8 <Send_Error+0x100>)
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004806:	0e1b      	lsrs	r3, r3, #24
 8004808:	b2da      	uxtb	r2, r3
 800480a:	4b2a      	ldr	r3, [pc, #168]	; (80048b4 <Send_Error+0xfc>)
 800480c:	709a      	strb	r2, [r3, #2]
				CANTxData[3]=(canErrors[i]>>16)&0xFF;
 800480e:	4a2a      	ldr	r2, [pc, #168]	; (80048b8 <Send_Error+0x100>)
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004816:	0c1b      	lsrs	r3, r3, #16
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4b26      	ldr	r3, [pc, #152]	; (80048b4 <Send_Error+0xfc>)
 800481c:	70da      	strb	r2, [r3, #3]
				CANTxData[4]=(canErrors[i]>>8)&0xFF;
 800481e:	4a26      	ldr	r2, [pc, #152]	; (80048b8 <Send_Error+0x100>)
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	b2da      	uxtb	r2, r3
 800482a:	4b22      	ldr	r3, [pc, #136]	; (80048b4 <Send_Error+0xfc>)
 800482c:	711a      	strb	r2, [r3, #4]
				CANTxData[5]=(canErrors[i]>>0)&0xFF;
 800482e:	4a22      	ldr	r2, [pc, #136]	; (80048b8 <Send_Error+0x100>)
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004836:	b2da      	uxtb	r2, r3
 8004838:	4b1e      	ldr	r3, [pc, #120]	; (80048b4 <Send_Error+0xfc>)
 800483a:	715a      	strb	r2, [r3, #5]

				TxHeader.IdType = FDCAN_STANDARD_ID;
 800483c:	2300      	movs	r3, #0
 800483e:	607b      	str	r3, [r7, #4]
				TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004840:	2300      	movs	r3, #0
 8004842:	60bb      	str	r3, [r7, #8]
				TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004844:	2300      	movs	r3, #0
 8004846:	613b      	str	r3, [r7, #16]
				TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
				TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800484c:	2300      	movs	r3, #0
 800484e:	61bb      	str	r3, [r7, #24]
				TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004850:	2300      	movs	r3, #0
 8004852:	61fb      	str	r3, [r7, #28]
				TxHeader.MessageMarker = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	623b      	str	r3, [r7, #32]

				if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan, &TxHeader, CANTxData) != HAL_OK)
 8004858:	463b      	mov	r3, r7
 800485a:	4a16      	ldr	r2, [pc, #88]	; (80048b4 <Send_Error+0xfc>)
 800485c:	4619      	mov	r1, r3
 800485e:	4814      	ldr	r0, [pc, #80]	; (80048b0 <Send_Error+0xf8>)
 8004860:	f7fd fdb6 	bl	80023d0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <Send_Error+0xba>
				{
					Set_Error(ERR_SEND_FAILED);
 800486a:	2002      	movs	r0, #2
 800486c:	f7ff ff78 	bl	8004760 <Set_Error>
 8004870:	e019      	b.n	80048a6 <Send_Error+0xee>
					return;
				}
				else
				{
					//if we sent the error message clear the error so that if it only occurs once the error is not sent continuously
					canErrors[i]=0;
 8004872:	4a11      	ldr	r2, [pc, #68]	; (80048b8 <Send_Error+0x100>)
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	2100      	movs	r1, #0
 8004878:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					canErrorToTransmit &= ~(1<<i);
 800487c:	2201      	movs	r2, #1
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	b25b      	sxtb	r3, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	b25a      	sxtb	r2, r3
 800488a:	4b08      	ldr	r3, [pc, #32]	; (80048ac <Send_Error+0xf4>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	b25b      	sxtb	r3, r3
 8004890:	4013      	ands	r3, r2
 8004892:	b25b      	sxtb	r3, r3
 8004894:	b2da      	uxtb	r2, r3
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <Send_Error+0xf4>)
 8004898:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<8; i++)
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	3301      	adds	r3, #1
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	2b07      	cmp	r3, #7
 80048a4:	d98e      	bls.n	80047c4 <Send_Error+0xc>
				}
			}
		}
	}
}
 80048a6:	3728      	adds	r7, #40	; 0x28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000dbc 	.word	0x20000dbc
 80048b0:	20000d50 	.word	0x20000d50
 80048b4:	20000ec8 	.word	0x20000ec8
 80048b8:	20000cb8 	.word	0x20000cb8

080048bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	/*else if (htim->Instance == TIM16)
	{
		HAL_TIM_Base_Stop_IT(&htim16);
		Can_Sync();
	}
	else*/ if (htim->Instance == TIM7)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a06      	ldr	r2, [pc, #24]	; (80048e4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d103      	bne.n	80048d6 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		canSendErrorFlag=1;
 80048ce:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]
	}*/
	else
	{
		Error_Handler();
	}
}
 80048d4:	e001      	b.n	80048da <HAL_TIM_PeriodElapsedCallback+0x1e>
		Error_Handler();
 80048d6:	f000 faed 	bl	8004eb4 <Error_Handler>
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40001400 	.word	0x40001400
 80048e8:	20000f3c 	.word	0x20000f3c

080048ec <SystemClock_Config>:


void SystemClock_Config(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b0a4      	sub	sp, #144	; 0x90
 80048f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80048f6:	2238      	movs	r2, #56	; 0x38
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fdf6 	bl	80054ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004900:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	605a      	str	r2, [r3, #4]
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	60da      	str	r2, [r3, #12]
 800490e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004910:	463b      	mov	r3, r7
 8004912:	2244      	movs	r2, #68	; 0x44
 8004914:	2100      	movs	r1, #0
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fde8 	bl	80054ec <memset>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800491c:	2000      	movs	r0, #0
 800491e:	f7fe fac7 	bl	8002eb0 <HAL_PWREx_ControlVoltageScaling>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004922:	2301      	movs	r3, #1
 8004924:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004926:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800492a:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800492c:	2302      	movs	r3, #2
 800492e:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004930:	2303      	movs	r3, #3
 8004932:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004934:	2304      	movs	r3, #4
 8004936:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8004938:	2355      	movs	r3, #85	; 0x55
 800493a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800493e:	2302      	movs	r3, #2
 8004940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004944:	2302      	movs	r3, #2
 8004946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800494a:	2302      	movs	r3, #2
 800494c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004950:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe fb4f 	bl	8002ff8 <HAL_RCC_OscConfig>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8004960:	f000 faa8 	bl	8004eb4 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8004964:	230f      	movs	r3, #15
 8004966:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004968:	2303      	movs	r3, #3
 800496a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800496c:	2300      	movs	r3, #0
 800496e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004970:	2300      	movs	r3, #0
 8004972:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004974:	2300      	movs	r3, #0
 8004976:	657b      	str	r3, [r7, #84]	; 0x54
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8004978:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800497c:	2108      	movs	r1, #8
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe fe52 	bl	8003628 <HAL_RCC_ClockConfig>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <SystemClock_Config+0xa2>
	{
		Error_Handler();
 800498a:	f000 fa93 	bl	8004eb4 <Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
 800498e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8004992:	603b      	str	r3, [r7, #0]
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8004994:	2300      	movs	r3, #0
 8004996:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004998:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800499c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800499e:	463b      	mov	r3, r7
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff f825 	bl	80039f0 <HAL_RCCEx_PeriphCLKConfig>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80049ac:	f000 fa82 	bl	8004eb4 <Error_Handler>
	}
}
 80049b0:	bf00      	nop
 80049b2:	3790      	adds	r7, #144	; 0x90
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049be:	f107 030c 	add.w	r3, r7, #12
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	605a      	str	r2, [r3, #4]
 80049c8:	609a      	str	r2, [r3, #8]
 80049ca:	60da      	str	r2, [r3, #12]
 80049cc:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOF_CLK_ENABLE();
 80049ce:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <MX_GPIO_Init+0x7c>)
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <MX_GPIO_Init+0x7c>)
 80049d4:	f043 0320 	orr.w	r3, r3, #32
 80049d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049da:	4b16      	ldr	r3, [pc, #88]	; (8004a34 <MX_GPIO_Init+0x7c>)
 80049dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80049e6:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <MX_GPIO_Init+0x7c>)
 80049e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ea:	4a12      	ldr	r2, [pc, #72]	; (8004a34 <MX_GPIO_Init+0x7c>)
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <MX_GPIO_Init+0x7c>)
 80049f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	607b      	str	r3, [r7, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80049fe:	2200      	movs	r2, #0
 8004a00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a08:	f7fe fa20 	bl	8002e4c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a10:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a12:	2301      	movs	r3, #1
 8004a14:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a1e:	f107 030c 	add.w	r3, r7, #12
 8004a22:	4619      	mov	r1, r3
 8004a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a28:	f7fe f88e 	bl	8002b48 <HAL_GPIO_Init>
}
 8004a2c:	bf00      	nop
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000

08004a38 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004a3e:	4b16      	ldr	r3, [pc, #88]	; (8004a98 <MX_DMA_Init+0x60>)
 8004a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a42:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <MX_DMA_Init+0x60>)
 8004a44:	f043 0304 	orr.w	r3, r3, #4
 8004a48:	6493      	str	r3, [r2, #72]	; 0x48
 8004a4a:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <MX_DMA_Init+0x60>)
 8004a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	607b      	str	r3, [r7, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004a56:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <MX_DMA_Init+0x60>)
 8004a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5a:	4a0f      	ldr	r2, [pc, #60]	; (8004a98 <MX_DMA_Init+0x60>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	6493      	str	r3, [r2, #72]	; 0x48
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <MX_DMA_Init+0x60>)
 8004a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2100      	movs	r1, #0
 8004a72:	200b      	movs	r0, #11
 8004a74:	f7fc ffbf 	bl	80019f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004a78:	200b      	movs	r0, #11
 8004a7a:	f7fc ffd6 	bl	8001a2a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2100      	movs	r1, #0
 8004a82:	200c      	movs	r0, #12
 8004a84:	f7fc ffb7 	bl	80019f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004a88:	200c      	movs	r0, #12
 8004a8a:	f7fc ffce 	bl	8001a2a <HAL_NVIC_EnableIRQ>
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000

08004a9c <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08c      	sub	sp, #48	; 0x30
 8004aa0:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode = {0};
 8004aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	605a      	str	r2, [r3, #4]
 8004aac:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8004aae:	1d3b      	adds	r3, r7, #4
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fd19 	bl	80054ec <memset>

	hadc1.Instance = ADC1;
 8004aba:	4b4e      	ldr	r3, [pc, #312]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004abc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004ac0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8004ac2:	4b4c      	ldr	r3, [pc, #304]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004ac4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004ac8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004aca:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ad0:	4b48      	ldr	r3, [pc, #288]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8004ad6:	4b47      	ldr	r3, [pc, #284]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004adc:	4b45      	ldr	r3, [pc, #276]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ae2:	4b44      	ldr	r3, [pc, #272]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8004ae8:	4b42      	ldr	r3, [pc, #264]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8004aee:	4b41      	ldr	r3, [pc, #260]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	775a      	strb	r2, [r3, #29]
	if (MeasureTemperature) { hadc1.Init.NbrOfConversion = 3; }
 8004af4:	4b40      	ldr	r3, [pc, #256]	; (8004bf8 <MX_ADC1_Init+0x15c>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <MX_ADC1_Init+0x68>
 8004afc:	4b3d      	ldr	r3, [pc, #244]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004afe:	2203      	movs	r2, #3
 8004b00:	621a      	str	r2, [r3, #32]
 8004b02:	e002      	b.n	8004b0a <MX_ADC1_Init+0x6e>
	else { hadc1.Init.NbrOfConversion = 2; }
 8004b04:	4b3b      	ldr	r3, [pc, #236]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004b06:	2202      	movs	r2, #2
 8004b08:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004b0a:	4b3a      	ldr	r3, [pc, #232]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004b12:	4b38      	ldr	r3, [pc, #224]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004b18:	4b36      	ldr	r3, [pc, #216]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8004b1e:	4b35      	ldr	r3, [pc, #212]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004b26:	4b33      	ldr	r3, [pc, #204]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004b28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b2c:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8004b2e:	4b31      	ldr	r3, [pc, #196]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004b36:	482f      	ldr	r0, [pc, #188]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004b38:	f7fb fe32 	bl	80007a0 <HAL_ADC_Init>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <MX_ADC1_Init+0xaa>
	{
		Error_Handler();
 8004b42:	f000 f9b7 	bl	8004eb4 <Error_Handler>
	}

	multimode.Mode = ADC_MODE_INDEPENDENT;
 8004b46:	2300      	movs	r3, #0
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8004b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b4e:	62bb      	str	r3, [r7, #40]	; 0x28
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_12CYCLES;
 8004b50:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8004b54:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4825      	ldr	r0, [pc, #148]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004b5e:	f7fc fdcf 	bl	8001700 <HAL_ADCEx_MultiModeConfigChannel>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <MX_ADC1_Init+0xd0>
	{
		Error_Handler();
 8004b68:	f000 f9a4 	bl	8004eb4 <Error_Handler>
	}


	sConfig.Channel = ADC_CHANNEL_3; //AI2, PA2
 8004b6c:	4b23      	ldr	r3, [pc, #140]	; (8004bfc <MX_ADC1_Init+0x160>)
 8004b6e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004b70:	2306      	movs	r3, #6
 8004b72:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004b74:	2307      	movs	r3, #7
 8004b76:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004b78:	237f      	movs	r3, #127	; 0x7f
 8004b7a:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b84:	1d3b      	adds	r3, r7, #4
 8004b86:	4619      	mov	r1, r3
 8004b88:	481a      	ldr	r0, [pc, #104]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004b8a:	f7fc f859 	bl	8000c40 <HAL_ADC_ConfigChannel>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <MX_ADC1_Init+0xfc>
	{
		Error_Handler();
 8004b94:	f000 f98e 	bl	8004eb4 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_4; //AI3, PA3
 8004b98:	4b19      	ldr	r3, [pc, #100]	; (8004c00 <MX_ADC1_Init+0x164>)
 8004b9a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8004b9c:	230c      	movs	r3, #12
 8004b9e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ba0:	1d3b      	adds	r3, r7, #4
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4813      	ldr	r0, [pc, #76]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004ba6:	f7fc f84b 	bl	8000c40 <HAL_ADC_ConfigChannel>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <MX_ADC1_Init+0x118>
	{
		Error_Handler();
 8004bb0:	f000 f980 	bl	8004eb4 <Error_Handler>
	}

	if (MeasureTemperature)
 8004bb4:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <MX_ADC1_Init+0x15c>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00d      	beq.n	8004bd8 <MX_ADC1_Init+0x13c>
	{
		sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1; //internal temperature
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <MX_ADC1_Init+0x168>)
 8004bbe:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_3;
 8004bc0:	2312      	movs	r3, #18
 8004bc2:	60bb      	str	r3, [r7, #8]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004bc4:	1d3b      	adds	r3, r7, #4
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	480a      	ldr	r0, [pc, #40]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004bca:	f7fc f839 	bl	8000c40 <HAL_ADC_ConfigChannel>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <MX_ADC1_Init+0x13c>
		{
			Error_Handler();
 8004bd4:	f000 f96e 	bl	8004eb4 <Error_Handler>
		}
	}

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8004bd8:	217f      	movs	r1, #127	; 0x7f
 8004bda:	4806      	ldr	r0, [pc, #24]	; (8004bf4 <MX_ADC1_Init+0x158>)
 8004bdc:	f7fc fd2e 	bl	800163c <HAL_ADCEx_Calibration_Start>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <MX_ADC1_Init+0x14e>
	{
		Error_Handler();
 8004be6:	f000 f965 	bl	8004eb4 <Error_Handler>
	}
}
 8004bea:	bf00      	nop
 8004bec:	3730      	adds	r7, #48	; 0x30
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000dc8 	.word	0x20000dc8
 8004bf8:	20000d4c 	.word	0x20000d4c
 8004bfc:	0c900008 	.word	0x0c900008
 8004c00:	10c00010 	.word	0x10c00010
 8004c04:	c3210000 	.word	0xc3210000

08004c08 <MX_ADC2_Init>:

static void MX_ADC2_Init(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8004c0e:	463b      	mov	r3, r7
 8004c10:	2220      	movs	r2, #32
 8004c12:	2100      	movs	r1, #0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fc69 	bl	80054ec <memset>

	hadc2.Instance = ADC2;
 8004c1a:	4b44      	ldr	r3, [pc, #272]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c1c:	4a44      	ldr	r2, [pc, #272]	; (8004d30 <MX_ADC2_Init+0x128>)
 8004c1e:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8004c20:	4b42      	ldr	r3, [pc, #264]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004c26:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004c28:	4b40      	ldr	r3, [pc, #256]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c2e:	4b3f      	ldr	r3, [pc, #252]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8004c34:	4b3d      	ldr	r3, [pc, #244]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004c3a:	4b3c      	ldr	r3, [pc, #240]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c40:	4b3a      	ldr	r3, [pc, #232]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c42:	2204      	movs	r2, #4
 8004c44:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8004c46:	4b39      	ldr	r3, [pc, #228]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8004c4c:	4b37      	ldr	r3, [pc, #220]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	775a      	strb	r2, [r3, #29]
	if (MeasureDriverCurrent) { hadc2.Init.NbrOfConversion = 3; }
 8004c52:	4b38      	ldr	r3, [pc, #224]	; (8004d34 <MX_ADC2_Init+0x12c>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <MX_ADC2_Init+0x5a>
 8004c5a:	4b34      	ldr	r3, [pc, #208]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	621a      	str	r2, [r3, #32]
 8004c60:	e002      	b.n	8004c68 <MX_ADC2_Init+0x60>
	else { hadc2.Init.NbrOfConversion = 2; }
 8004c62:	4b32      	ldr	r3, [pc, #200]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c64:	2202      	movs	r2, #2
 8004c66:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004c68:	4b30      	ldr	r3, [pc, #192]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c70:	4b2e      	ldr	r3, [pc, #184]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c76:	4b2d      	ldr	r3, [pc, #180]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
	hadc2.Init.DMAContinuousRequests = ENABLE;
 8004c7c:	4b2b      	ldr	r3, [pc, #172]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004c84:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c8a:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 8004c8c:	4b27      	ldr	r3, [pc, #156]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004c94:	4825      	ldr	r0, [pc, #148]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004c96:	f7fb fd83 	bl	80007a0 <HAL_ADC_Init>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <MX_ADC2_Init+0x9c>
	{
		Error_Handler();
 8004ca0:	f000 f908 	bl	8004eb4 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_13; //AI5, PA5
 8004ca4:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <MX_ADC2_Init+0x130>)
 8004ca6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004ca8:	2306      	movs	r3, #6
 8004caa:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004cac:	2307      	movs	r3, #7
 8004cae:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004cb0:	237f      	movs	r3, #127	; 0x7f
 8004cb2:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004cbc:	463b      	mov	r3, r7
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	481a      	ldr	r0, [pc, #104]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004cc2:	f7fb ffbd 	bl	8000c40 <HAL_ADC_ConfigChannel>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <MX_ADC2_Init+0xc8>
	{
		Error_Handler();
 8004ccc:	f000 f8f2 	bl	8004eb4 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_3; //AI6, PA6
 8004cd0:	4b1a      	ldr	r3, [pc, #104]	; (8004d3c <MX_ADC2_Init+0x134>)
 8004cd2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8004cd4:	230c      	movs	r3, #12
 8004cd6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004cd8:	463b      	mov	r3, r7
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4813      	ldr	r0, [pc, #76]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004cde:	f7fb ffaf 	bl	8000c40 <HAL_ADC_ConfigChannel>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <MX_ADC2_Init+0xe4>
	{
		Error_Handler();
 8004ce8:	f000 f8e4 	bl	8004eb4 <Error_Handler>
	}

	if (MeasureDriverCurrent)
 8004cec:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <MX_ADC2_Init+0x12c>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00d      	beq.n	8004d10 <MX_ADC2_Init+0x108>
	{
		sConfig.Channel = ADC_CHANNEL_4; //current feedback from driver
 8004cf4:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <MX_ADC2_Init+0x138>)
 8004cf6:	603b      	str	r3, [r7, #0]
		sConfig.Rank = ADC_REGULAR_RANK_3;
 8004cf8:	2312      	movs	r3, #18
 8004cfa:	607b      	str	r3, [r7, #4]
		if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	4619      	mov	r1, r3
 8004d00:	480a      	ldr	r0, [pc, #40]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004d02:	f7fb ff9d 	bl	8000c40 <HAL_ADC_ConfigChannel>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <MX_ADC2_Init+0x108>
		{
			Error_Handler();
 8004d0c:	f000 f8d2 	bl	8004eb4 <Error_Handler>
		}
	}

	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8004d10:	217f      	movs	r1, #127	; 0x7f
 8004d12:	4806      	ldr	r0, [pc, #24]	; (8004d2c <MX_ADC2_Init+0x124>)
 8004d14:	f7fc fc92 	bl	800163c <HAL_ADCEx_Calibration_Start>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <MX_ADC2_Init+0x11a>
	{
		Error_Handler();
 8004d1e:	f000 f8c9 	bl	8004eb4 <Error_Handler>
	}
}
 8004d22:	bf00      	nop
 8004d24:	3720      	adds	r7, #32
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000ce0 	.word	0x20000ce0
 8004d30:	50000100 	.word	0x50000100
 8004d34:	20000eb8 	.word	0x20000eb8
 8004d38:	36902000 	.word	0x36902000
 8004d3c:	0c900008 	.word	0x0c900008
 8004d40:	10c00010 	.word	0x10c00010

08004d44 <MX_FDCAN_Init>:

static void MX_FDCAN_Init(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef	sFilterConfig;

	hfdcan.Instance = FDCAN1;
 8004d4a:	4b46      	ldr	r3, [pc, #280]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004d4c:	4a46      	ldr	r2, [pc, #280]	; (8004e68 <MX_FDCAN_Init+0x124>)
 8004d4e:	601a      	str	r2, [r3, #0]
	hfdcan.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8004d50:	4b44      	ldr	r3, [pc, #272]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	605a      	str	r2, [r3, #4]
	hfdcan.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004d56:	4b43      	ldr	r3, [pc, #268]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	609a      	str	r2, [r3, #8]
	hfdcan.Init.Mode = FDCAN_MODE_NORMAL;
 8004d5c:	4b41      	ldr	r3, [pc, #260]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	60da      	str	r2, [r3, #12]
	hfdcan.Init.AutoRetransmission = DISABLE;
 8004d62:	4b40      	ldr	r3, [pc, #256]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	741a      	strb	r2, [r3, #16]
	hfdcan.Init.TransmitPause = DISABLE;
 8004d68:	4b3e      	ldr	r3, [pc, #248]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	745a      	strb	r2, [r3, #17]
	hfdcan.Init.ProtocolException = DISABLE;
 8004d6e:	4b3d      	ldr	r3, [pc, #244]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	749a      	strb	r2, [r3, #18]
	hfdcan.Init.NominalPrescaler = 1;
 8004d74:	4b3b      	ldr	r3, [pc, #236]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	615a      	str	r2, [r3, #20]
	hfdcan.Init.NominalSyncJumpWidth = 1;
 8004d7a:	4b3a      	ldr	r3, [pc, #232]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	619a      	str	r2, [r3, #24]
	hfdcan.Init.NominalTimeSeg1 = 13;
 8004d80:	4b38      	ldr	r3, [pc, #224]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004d82:	220d      	movs	r2, #13
 8004d84:	61da      	str	r2, [r3, #28]
	hfdcan.Init.NominalTimeSeg2 = 2;
 8004d86:	4b37      	ldr	r3, [pc, #220]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004d88:	2202      	movs	r2, #2
 8004d8a:	621a      	str	r2, [r3, #32]
	hfdcan.Init.DataPrescaler = 1;
 8004d8c:	4b35      	ldr	r3, [pc, #212]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan.Init.DataSyncJumpWidth = 1;
 8004d92:	4b34      	ldr	r3, [pc, #208]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan.Init.DataTimeSeg1 = 1;
 8004d98:	4b32      	ldr	r3, [pc, #200]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan.Init.DataTimeSeg2 = 1;
 8004d9e:	4b31      	ldr	r3, [pc, #196]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan.Init.StdFiltersNbr = 2;
 8004da4:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004da6:	2202      	movs	r2, #2
 8004da8:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan.Init.ExtFiltersNbr = 0;
 8004daa:	4b2e      	ldr	r3, [pc, #184]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004db0:	4b2c      	ldr	r3, [pc, #176]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan) != HAL_OK)
 8004db6:	482b      	ldr	r0, [pc, #172]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004db8:	f7fd f8c4 	bl	8001f44 <HAL_FDCAN_Init>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <MX_FDCAN_Init+0x82>
	{
		Error_Handler();
 8004dc2:	f000 f877 	bl	8004eb4 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO0, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	2140      	movs	r1, #64	; 0x40
 8004dca:	4826      	ldr	r0, [pc, #152]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004dcc:	f7fd fa9f 	bl	800230e <HAL_FDCAN_ConfigRxFifoOverwrite>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <MX_FDCAN_Init+0x96>
	{
		Error_Handler();
 8004dd6:	f000 f86d 	bl	8004eb4 <Error_Handler>
	}
	if (HAL_FDCAN_ConfigRxFifoOverwrite(&hfdcan, FDCAN_RX_FIFO1, FDCAN_RX_FIFO_OVERWRITE) != HAL_OK)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	2141      	movs	r1, #65	; 0x41
 8004dde:	4821      	ldr	r0, [pc, #132]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004de0:	f7fd fa95 	bl	800230e <HAL_FDCAN_ConfigRxFifoOverwrite>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <MX_FDCAN_Init+0xaa>
	{
		Error_Handler();
 8004dea:	f000 f863 	bl	8004eb4 <Error_Handler>
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
	{
		Error_Handler();
	}*/ //no config yet

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8004dee:	2300      	movs	r3, #0
 8004df0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 1;
 8004df2:	2301      	movs	r3, #1
 8004df4:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8004df6:	2302      	movs	r3, #2
 8004df8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CANID_SYNC;
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8004e02:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004e06:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan, &sFilterConfig) != HAL_OK)
 8004e08:	463b      	mov	r3, r7
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4815      	ldr	r0, [pc, #84]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004e0e:	f7fd f9f3 	bl	80021f8 <HAL_FDCAN_ConfigFilter>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <MX_FDCAN_Init+0xd8>
	{
		Error_Handler();
 8004e18:	f000 f84c 	bl	8004eb4 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK)
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	2301      	movs	r3, #1
 8004e22:	2202      	movs	r2, #2
 8004e24:	2102      	movs	r1, #2
 8004e26:	480f      	ldr	r0, [pc, #60]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004e28:	f7fd fa40 	bl	80022ac <HAL_FDCAN_ConfigGlobalFilter>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <MX_FDCAN_Init+0xf2>
	{
		Error_Handler();
 8004e32:	f000 f83f 	bl	8004eb4 <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan) != HAL_OK)
 8004e36:	480b      	ldr	r0, [pc, #44]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004e38:	f7fd faa2 	bl	8002380 <HAL_FDCAN_Start>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <MX_FDCAN_Init+0x102>
	{
		Error_Handler();
 8004e42:	f000 f837 	bl	8004eb4 <Error_Handler>
	}
	if(HAL_FDCAN_ActivateNotification(&hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004e46:	2200      	movs	r2, #0
 8004e48:	2101      	movs	r1, #1
 8004e4a:	4806      	ldr	r0, [pc, #24]	; (8004e64 <MX_FDCAN_Init+0x120>)
 8004e4c:	f7fd fb16 	bl	800247c <HAL_FDCAN_ActivateNotification>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <MX_FDCAN_Init+0x116>
	{
		Error_Handler();
 8004e56:	f000 f82d 	bl	8004eb4 <Error_Handler>
	}
}
 8004e5a:	bf00      	nop
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000d50 	.word	0x20000d50
 8004e68:	40006400 	.word	0x40006400

08004e6c <MX_TIM7_Init>:

static void MX_TIM7_Init(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
	htim7.Instance = TIM7;
 8004e70:	4b0e      	ldr	r3, [pc, #56]	; (8004eac <MX_TIM7_Init+0x40>)
 8004e72:	4a0f      	ldr	r2, [pc, #60]	; (8004eb0 <MX_TIM7_Init+0x44>)
 8004e74:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 16999;
 8004e76:	4b0d      	ldr	r3, [pc, #52]	; (8004eac <MX_TIM7_Init+0x40>)
 8004e78:	f244 2267 	movw	r2, #16999	; 0x4267
 8004e7c:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <MX_TIM7_Init+0x40>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 10000;
 8004e84:	4b09      	ldr	r3, [pc, #36]	; (8004eac <MX_TIM7_Init+0x40>)
 8004e86:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e8a:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e8c:	4b07      	ldr	r3, [pc, #28]	; (8004eac <MX_TIM7_Init+0x40>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004e92:	4806      	ldr	r0, [pc, #24]	; (8004eac <MX_TIM7_Init+0x40>)
 8004e94:	f7fe ff9c 	bl	8003dd0 <HAL_TIM_Base_Init>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <MX_TIM7_Init+0x36>
	{
		Error_Handler();
 8004e9e:	f000 f809 	bl	8004eb4 <Error_Handler>
	}

	HAL_TIM_Base_Start_IT(&htim7);
 8004ea2:	4802      	ldr	r0, [pc, #8]	; (8004eac <MX_TIM7_Init+0x40>)
 8004ea4:	f7fe ffc0 	bl	8003e28 <HAL_TIM_Base_Start_IT>
}
 8004ea8:	bf00      	nop
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20000f40 	.word	0x20000f40
 8004eb0:	40001400 	.word	0x40001400

08004eb4 <Error_Handler>:


void Error_Handler(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8004eb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ec0:	f7fd ffdc 	bl	8002e7c <HAL_GPIO_TogglePin>
		HAL_Delay(33);
 8004ec4:	2021      	movs	r0, #33	; 0x21
 8004ec6:	f7fb fa17 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8004eca:	e7f5      	b.n	8004eb8 <Error_Handler+0x4>

08004ecc <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ed0:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4a04      	ldr	r2, [pc, #16]	; (8004ee8 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8004ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eda:	6093      	str	r3, [r2, #8]
}
 8004edc:	bf00      	nop
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	40007000 	.word	0x40007000

08004eec <HAL_MspInit>:
//externs
extern DMA_HandleTypeDef hdma_adc1;
extern DMA_HandleTypeDef hdma_adc2;

void HAL_MspInit(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef2:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <HAL_MspInit+0x44>)
 8004ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef6:	4a0e      	ldr	r2, [pc, #56]	; (8004f30 <HAL_MspInit+0x44>)
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	6613      	str	r3, [r2, #96]	; 0x60
 8004efe:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <HAL_MspInit+0x44>)
 8004f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	607b      	str	r3, [r7, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8004f0a:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <HAL_MspInit+0x44>)
 8004f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0e:	4a08      	ldr	r2, [pc, #32]	; (8004f30 <HAL_MspInit+0x44>)
 8004f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f14:	6593      	str	r3, [r2, #88]	; 0x58
 8004f16:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <HAL_MspInit+0x44>)
 8004f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]

	LL_PWR_DisableDeadBatteryPD();
 8004f22:	f7ff ffd3 	bl	8004ecc <LL_PWR_DisableDeadBatteryPD>
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40021000 	.word	0x40021000

08004f34 <HAL_ADC_MspInit>:

//counter to keep track of how many peripherals require ADC12 clock, so that deinitializing ADC1 allows ADC2 to run
static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08c      	sub	sp, #48	; 0x30
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f3c:	f107 031c 	add.w	r3, r7, #28
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	605a      	str	r2, [r3, #4]
 8004f46:	609a      	str	r2, [r3, #8]
 8004f48:	60da      	str	r2, [r3, #12]
 8004f4a:	611a      	str	r2, [r3, #16]
	if(hadc->Instance==ADC1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f54:	d15a      	bne.n	800500c <HAL_ADC_MspInit+0xd8>
	{
		HAL_RCC_ADC12_CLK_ENABLED++;
 8004f56:	4b5f      	ldr	r3, [pc, #380]	; (80050d4 <HAL_ADC_MspInit+0x1a0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	4a5d      	ldr	r2, [pc, #372]	; (80050d4 <HAL_ADC_MspInit+0x1a0>)
 8004f5e:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_ADC12_CLK_ENABLED==1)
 8004f60:	4b5c      	ldr	r3, [pc, #368]	; (80050d4 <HAL_ADC_MspInit+0x1a0>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d10b      	bne.n	8004f80 <HAL_ADC_MspInit+0x4c>
		{
			__HAL_RCC_ADC12_CLK_ENABLE();
 8004f68:	4b5b      	ldr	r3, [pc, #364]	; (80050d8 <HAL_ADC_MspInit+0x1a4>)
 8004f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6c:	4a5a      	ldr	r2, [pc, #360]	; (80050d8 <HAL_ADC_MspInit+0x1a4>)
 8004f6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f74:	4b58      	ldr	r3, [pc, #352]	; (80050d8 <HAL_ADC_MspInit+0x1a4>)
 8004f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	69bb      	ldr	r3, [r7, #24]
		}
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8004f80:	4b55      	ldr	r3, [pc, #340]	; (80050d8 <HAL_ADC_MspInit+0x1a4>)
 8004f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f84:	4a54      	ldr	r2, [pc, #336]	; (80050d8 <HAL_ADC_MspInit+0x1a4>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f8c:	4b52      	ldr	r3, [pc, #328]	; (80050d8 <HAL_ADC_MspInit+0x1a4>)
 8004f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	697b      	ldr	r3, [r7, #20]

		GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004f98:	230c      	movs	r3, #12
 8004f9a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa4:	f107 031c 	add.w	r3, r7, #28
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fae:	f7fd fdcb 	bl	8002b48 <HAL_GPIO_Init>

		hdma_adc1.Instance = DMA1_Channel1;
 8004fb2:	4b4a      	ldr	r3, [pc, #296]	; (80050dc <HAL_ADC_MspInit+0x1a8>)
 8004fb4:	4a4a      	ldr	r2, [pc, #296]	; (80050e0 <HAL_ADC_MspInit+0x1ac>)
 8004fb6:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004fb8:	4b48      	ldr	r3, [pc, #288]	; (80050dc <HAL_ADC_MspInit+0x1a8>)
 8004fba:	2205      	movs	r2, #5
 8004fbc:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fbe:	4b47      	ldr	r3, [pc, #284]	; (80050dc <HAL_ADC_MspInit+0x1a8>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fc4:	4b45      	ldr	r3, [pc, #276]	; (80050dc <HAL_ADC_MspInit+0x1a8>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004fca:	4b44      	ldr	r3, [pc, #272]	; (80050dc <HAL_ADC_MspInit+0x1a8>)
 8004fcc:	2280      	movs	r2, #128	; 0x80
 8004fce:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004fd0:	4b42      	ldr	r3, [pc, #264]	; (80050dc <HAL_ADC_MspInit+0x1a8>)
 8004fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fd6:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004fd8:	4b40      	ldr	r3, [pc, #256]	; (80050dc <HAL_ADC_MspInit+0x1a8>)
 8004fda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fde:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004fe0:	4b3e      	ldr	r3, [pc, #248]	; (80050dc <HAL_ADC_MspInit+0x1a8>)
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004fe6:	4b3d      	ldr	r3, [pc, #244]	; (80050dc <HAL_ADC_MspInit+0x1a8>)
 8004fe8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fec:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004fee:	483b      	ldr	r0, [pc, #236]	; (80050dc <HAL_ADC_MspInit+0x1a8>)
 8004ff0:	f7fc fd36 	bl	8001a60 <HAL_DMA_Init>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_ADC_MspInit+0xca>
		{
			Error_Handler();
 8004ffa:	f7ff ff5b 	bl	8004eb4 <Error_Handler>
		}

		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a36      	ldr	r2, [pc, #216]	; (80050dc <HAL_ADC_MspInit+0x1a8>)
 8005002:	655a      	str	r2, [r3, #84]	; 0x54
 8005004:	4a35      	ldr	r2, [pc, #212]	; (80050dc <HAL_ADC_MspInit+0x1a8>)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6293      	str	r3, [r2, #40]	; 0x28
		  Error_Handler();
		}

		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
	}
}
 800500a:	e05e      	b.n	80050ca <HAL_ADC_MspInit+0x196>
	else if(hadc->Instance==ADC2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a34      	ldr	r2, [pc, #208]	; (80050e4 <HAL_ADC_MspInit+0x1b0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d159      	bne.n	80050ca <HAL_ADC_MspInit+0x196>
		HAL_RCC_ADC12_CLK_ENABLED++;
 8005016:	4b2f      	ldr	r3, [pc, #188]	; (80050d4 <HAL_ADC_MspInit+0x1a0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3301      	adds	r3, #1
 800501c:	4a2d      	ldr	r2, [pc, #180]	; (80050d4 <HAL_ADC_MspInit+0x1a0>)
 800501e:	6013      	str	r3, [r2, #0]
		if(HAL_RCC_ADC12_CLK_ENABLED==1)
 8005020:	4b2c      	ldr	r3, [pc, #176]	; (80050d4 <HAL_ADC_MspInit+0x1a0>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d10b      	bne.n	8005040 <HAL_ADC_MspInit+0x10c>
		  __HAL_RCC_ADC12_CLK_ENABLE();
 8005028:	4b2b      	ldr	r3, [pc, #172]	; (80050d8 <HAL_ADC_MspInit+0x1a4>)
 800502a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502c:	4a2a      	ldr	r2, [pc, #168]	; (80050d8 <HAL_ADC_MspInit+0x1a4>)
 800502e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005034:	4b28      	ldr	r3, [pc, #160]	; (80050d8 <HAL_ADC_MspInit+0x1a4>)
 8005036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8005040:	4b25      	ldr	r3, [pc, #148]	; (80050d8 <HAL_ADC_MspInit+0x1a4>)
 8005042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005044:	4a24      	ldr	r2, [pc, #144]	; (80050d8 <HAL_ADC_MspInit+0x1a4>)
 8005046:	f043 0320 	orr.w	r3, r3, #32
 800504a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800504c:	4b22      	ldr	r3, [pc, #136]	; (80050d8 <HAL_ADC_MspInit+0x1a4>)
 800504e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005058:	23e0      	movs	r3, #224	; 0xe0
 800505a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800505c:	2303      	movs	r3, #3
 800505e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005060:	2300      	movs	r3, #0
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005064:	f107 031c 	add.w	r3, r7, #28
 8005068:	4619      	mov	r1, r3
 800506a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800506e:	f7fd fd6b 	bl	8002b48 <HAL_GPIO_Init>
		hdma_adc2.Instance = DMA1_Channel2;
 8005072:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <HAL_ADC_MspInit+0x1b4>)
 8005074:	4a1d      	ldr	r2, [pc, #116]	; (80050ec <HAL_ADC_MspInit+0x1b8>)
 8005076:	601a      	str	r2, [r3, #0]
		hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8005078:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <HAL_ADC_MspInit+0x1b4>)
 800507a:	2224      	movs	r2, #36	; 0x24
 800507c:	605a      	str	r2, [r3, #4]
		hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800507e:	4b1a      	ldr	r3, [pc, #104]	; (80050e8 <HAL_ADC_MspInit+0x1b4>)
 8005080:	2200      	movs	r2, #0
 8005082:	609a      	str	r2, [r3, #8]
		hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005084:	4b18      	ldr	r3, [pc, #96]	; (80050e8 <HAL_ADC_MspInit+0x1b4>)
 8005086:	2200      	movs	r2, #0
 8005088:	60da      	str	r2, [r3, #12]
		hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800508a:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <HAL_ADC_MspInit+0x1b4>)
 800508c:	2280      	movs	r2, #128	; 0x80
 800508e:	611a      	str	r2, [r3, #16]
		hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005090:	4b15      	ldr	r3, [pc, #84]	; (80050e8 <HAL_ADC_MspInit+0x1b4>)
 8005092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005096:	615a      	str	r2, [r3, #20]
		hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005098:	4b13      	ldr	r3, [pc, #76]	; (80050e8 <HAL_ADC_MspInit+0x1b4>)
 800509a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800509e:	619a      	str	r2, [r3, #24]
		hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80050a0:	4b11      	ldr	r3, [pc, #68]	; (80050e8 <HAL_ADC_MspInit+0x1b4>)
 80050a2:	2220      	movs	r2, #32
 80050a4:	61da      	str	r2, [r3, #28]
		hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80050a6:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <HAL_ADC_MspInit+0x1b4>)
 80050a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050ac:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80050ae:	480e      	ldr	r0, [pc, #56]	; (80050e8 <HAL_ADC_MspInit+0x1b4>)
 80050b0:	f7fc fcd6 	bl	8001a60 <HAL_DMA_Init>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_ADC_MspInit+0x18a>
		  Error_Handler();
 80050ba:	f7ff fefb 	bl	8004eb4 <Error_Handler>
		__HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a09      	ldr	r2, [pc, #36]	; (80050e8 <HAL_ADC_MspInit+0x1b4>)
 80050c2:	655a      	str	r2, [r3, #84]	; 0x54
 80050c4:	4a08      	ldr	r2, [pc, #32]	; (80050e8 <HAL_ADC_MspInit+0x1b4>)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80050ca:	bf00      	nop
 80050cc:	3730      	adds	r7, #48	; 0x30
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	200000a8 	.word	0x200000a8
 80050d8:	40021000 	.word	0x40021000
 80050dc:	20000e44 	.word	0x20000e44
 80050e0:	40020008 	.word	0x40020008
 80050e4:	50000100 	.word	0x50000100
 80050e8:	20000edc 	.word	0x20000edc
 80050ec:	4002001c 	.word	0x4002001c

080050f0 <HAL_FDCAN_MspInit>:
	}
}


void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08a      	sub	sp, #40	; 0x28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050f8:	f107 0314 	add.w	r3, r7, #20
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	605a      	str	r2, [r3, #4]
 8005102:	609a      	str	r2, [r3, #8]
 8005104:	60da      	str	r2, [r3, #12]
 8005106:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <HAL_FDCAN_MspInit+0x90>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d131      	bne.n	8005176 <HAL_FDCAN_MspInit+0x86>
  {
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8005112:	4b1c      	ldr	r3, [pc, #112]	; (8005184 <HAL_FDCAN_MspInit+0x94>)
 8005114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005116:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <HAL_FDCAN_MspInit+0x94>)
 8005118:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800511c:	6593      	str	r3, [r2, #88]	; 0x58
 800511e:	4b19      	ldr	r3, [pc, #100]	; (8005184 <HAL_FDCAN_MspInit+0x94>)
 8005120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800512a:	4b16      	ldr	r3, [pc, #88]	; (8005184 <HAL_FDCAN_MspInit+0x94>)
 800512c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512e:	4a15      	ldr	r2, [pc, #84]	; (8005184 <HAL_FDCAN_MspInit+0x94>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005136:	4b13      	ldr	r3, [pc, #76]	; (8005184 <HAL_FDCAN_MspInit+0x94>)
 8005138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005142:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005148:	2302      	movs	r3, #2
 800514a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514c:	2300      	movs	r3, #0
 800514e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005150:	2300      	movs	r3, #0
 8005152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005154:	2309      	movs	r3, #9
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005158:	f107 0314 	add.w	r3, r7, #20
 800515c:	4619      	mov	r1, r3
 800515e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005162:	f7fd fcf1 	bl	8002b48 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8005166:	2200      	movs	r2, #0
 8005168:	2100      	movs	r1, #0
 800516a:	2015      	movs	r0, #21
 800516c:	f7fc fc43 	bl	80019f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8005170:	2015      	movs	r0, #21
 8005172:	f7fc fc5a 	bl	8001a2a <HAL_NVIC_EnableIRQ>
  }
}
 8005176:	bf00      	nop
 8005178:	3728      	adds	r7, #40	; 0x28
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40006400 	.word	0x40006400
 8005184:	40021000 	.word	0x40021000

08005188 <HAL_TIM_Base_MspInit>:
    HAL_NVIC_DisableIRQ(FDCAN1_IT0_IRQn);
  }
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	{
		__HAL_RCC_TIM6_CLK_ENABLE();
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
	}
	else*/ if(htim_base->Instance==TIM7)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a0d      	ldr	r2, [pc, #52]	; (80051cc <HAL_TIM_Base_MspInit+0x44>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d113      	bne.n	80051c2 <HAL_TIM_Base_MspInit+0x3a>
	{
		__HAL_RCC_TIM7_CLK_ENABLE();
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <HAL_TIM_Base_MspInit+0x48>)
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	4a0c      	ldr	r2, [pc, #48]	; (80051d0 <HAL_TIM_Base_MspInit+0x48>)
 80051a0:	f043 0320 	orr.w	r3, r3, #32
 80051a4:	6593      	str	r3, [r2, #88]	; 0x58
 80051a6:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <HAL_TIM_Base_MspInit+0x48>)
 80051a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80051b2:	2200      	movs	r2, #0
 80051b4:	2100      	movs	r1, #0
 80051b6:	2037      	movs	r0, #55	; 0x37
 80051b8:	f7fc fc1d 	bl	80019f6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80051bc:	2037      	movs	r0, #55	; 0x37
 80051be:	f7fc fc34 	bl	8001a2a <HAL_NVIC_EnableIRQ>
	{
		__HAL_RCC_TIM16_CLK_ENABLE();
		HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
	}*/
}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40001400 	.word	0x40001400
 80051d0:	40021000 	.word	0x40021000

080051d4 <DMA1_Channel1_IRQHandler>:
extern DMA_HandleTypeDef hdma_adc1;
extern DMA_HandleTypeDef hdma_adc2;
extern TIM_HandleTypeDef htim7;

void DMA1_Channel1_IRQHandler(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 80051d8:	4802      	ldr	r0, [pc, #8]	; (80051e4 <DMA1_Channel1_IRQHandler+0x10>)
 80051da:	f7fc fd64 	bl	8001ca6 <HAL_DMA_IRQHandler>
}
 80051de:	bf00      	nop
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20000e44 	.word	0x20000e44

080051e8 <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 80051ec:	4802      	ldr	r0, [pc, #8]	; (80051f8 <DMA1_Channel2_IRQHandler+0x10>)
 80051ee:	f7fc fd5a 	bl	8001ca6 <HAL_DMA_IRQHandler>
}
 80051f2:	bf00      	nop
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20000edc 	.word	0x20000edc

080051fc <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
	HAL_FDCAN_IRQHandler(&hfdcan);
 8005200:	4802      	ldr	r0, [pc, #8]	; (800520c <FDCAN1_IT0_IRQHandler+0x10>)
 8005202:	f7fd fa21 	bl	8002648 <HAL_FDCAN_IRQHandler>
}
 8005206:	bf00      	nop
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20000d50 	.word	0x20000d50

08005210 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim7);
 8005214:	4802      	ldr	r0, [pc, #8]	; (8005220 <TIM7_IRQHandler+0x10>)
 8005216:	f7fe fe31 	bl	8003e7c <HAL_TIM_IRQHandler>
}
 800521a:	bf00      	nop
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000f40 	.word	0x20000f40

08005224 <NMI_Handler>:


void NMI_Handler(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0

}
 8005228:	bf00      	nop
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8005232:	b480      	push	{r7}
 8005234:	af00      	add	r7, sp, #0
	while (1)
 8005236:	e7fe      	b.n	8005236 <HardFault_Handler+0x4>

08005238 <MemManage_Handler>:

	}
}

void MemManage_Handler(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
	while (1)
 800523c:	e7fe      	b.n	800523c <MemManage_Handler+0x4>

0800523e <BusFault_Handler>:

	}
}

void BusFault_Handler(void)
{
 800523e:	b480      	push	{r7}
 8005240:	af00      	add	r7, sp, #0
	while (1)
 8005242:	e7fe      	b.n	8005242 <BusFault_Handler+0x4>

08005244 <UsageFault_Handler>:

	}
}

void UsageFault_Handler(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  while (1)
 8005248:	e7fe      	b.n	8005248 <UsageFault_Handler+0x4>

0800524a <SVC_Handler>:

  }
}

void SVC_Handler(void)
{
 800524a:	b480      	push	{r7}
 800524c:	af00      	add	r7, sp, #0

}
 800524e:	bf00      	nop
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0

}
 800525c:	bf00      	nop
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8005266:	b480      	push	{r7}
 8005268:	af00      	add	r7, sp, #0

}
 800526a:	bf00      	nop
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8005278:	f7fb f820 	bl	80002bc <HAL_IncTick>
}
 800527c:	bf00      	nop
 800527e:	bd80      	pop	{r7, pc}

08005280 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005284:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <SystemInit+0x28>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528a:	4a07      	ldr	r2, [pc, #28]	; (80052a8 <SystemInit+0x28>)
 800528c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <SystemInit+0x28>)
 8005296:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800529a:	609a      	str	r2, [r3, #8]
#endif
}
 800529c:	bf00      	nop
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	e000ed00 	.word	0xe000ed00

080052ac <LUT>:
	return temperature;
}


uint32_t LUT(uint16_t input, uint32_t* LUT, uint8_t LUT_length_LN2)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	6039      	str	r1, [r7, #0]
 80052b6:	80fb      	strh	r3, [r7, #6]
 80052b8:	4613      	mov	r3, r2
 80052ba:	717b      	strb	r3, [r7, #5]
	uint32_t result = 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	60fb      	str	r3, [r7, #12]

	uint8_t length = 2;
 80052c0:	2302      	movs	r3, #2
 80052c2:	77fb      	strb	r3, [r7, #31]
	for(uint32_t i=0; i<(LUT_length_LN2-1); i++) { length*=2; }
 80052c4:	2300      	movs	r3, #0
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	e005      	b.n	80052d6 <LUT+0x2a>
 80052ca:	7ffb      	ldrb	r3, [r7, #31]
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	77fb      	strb	r3, [r7, #31]
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	3301      	adds	r3, #1
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	797b      	ldrb	r3, [r7, #5]
 80052d8:	3b01      	subs	r3, #1
 80052da:	461a      	mov	r2, r3
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	4293      	cmp	r3, r2
 80052e0:	d3f3      	bcc.n	80052ca <LUT+0x1e>

	uint8_t bound_low = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	75fb      	strb	r3, [r7, #23]
	uint8_t bound_high = length-1;
 80052e6:	7ffb      	ldrb	r3, [r7, #31]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	75bb      	strb	r3, [r7, #22]
	uint8_t mid = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	757b      	strb	r3, [r7, #21]

	if (LUT[bound_low]>input)
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	4413      	add	r3, r2
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d907      	bls.n	8005310 <LUT+0x64>
	{
		return LUT[bound_low+length];
 8005300:	7dfa      	ldrb	r2, [r7, #23]
 8005302:	7ffb      	ldrb	r3, [r7, #31]
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	4413      	add	r3, r2
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	e09b      	b.n	8005448 <LUT+0x19c>
	}
	else if (LUT[bound_high]<input)
 8005310:	7dbb      	ldrb	r3, [r7, #22]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	4413      	add	r3, r2
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	429a      	cmp	r2, r3
 800531e:	d207      	bcs.n	8005330 <LUT+0x84>
	{
		return LUT[bound_high+length];
 8005320:	7dba      	ldrb	r2, [r7, #22]
 8005322:	7ffb      	ldrb	r3, [r7, #31]
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	4413      	add	r3, r2
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	e08b      	b.n	8005448 <LUT+0x19c>
	}

	for(uint32_t i=0; i<LUT_length_LN2; i++)
 8005330:	2300      	movs	r3, #0
 8005332:	613b      	str	r3, [r7, #16]
 8005334:	e043      	b.n	80053be <LUT+0x112>
	{
		mid = ((bound_high-bound_low)/2)+bound_low;
 8005336:	7dba      	ldrb	r2, [r7, #22]
 8005338:	7dfb      	ldrb	r3, [r7, #23]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	0fda      	lsrs	r2, r3, #31
 800533e:	4413      	add	r3, r2
 8005340:	105b      	asrs	r3, r3, #1
 8005342:	b2da      	uxtb	r2, r3
 8005344:	7dfb      	ldrb	r3, [r7, #23]
 8005346:	4413      	add	r3, r2
 8005348:	757b      	strb	r3, [r7, #21]

		switch( (LUT[mid]>input) | ((LUT[mid+1]<input)<<1))
 800534a:	7d7b      	ldrb	r3, [r7, #21]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	4413      	add	r3, r2
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	88fb      	ldrh	r3, [r7, #6]
 8005356:	429a      	cmp	r2, r3
 8005358:	bf8c      	ite	hi
 800535a:	2301      	movhi	r3, #1
 800535c:	2300      	movls	r3, #0
 800535e:	b2db      	uxtb	r3, r3
 8005360:	4619      	mov	r1, r3
 8005362:	7d7b      	ldrb	r3, [r7, #21]
 8005364:	3301      	adds	r3, #1
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	4413      	add	r3, r2
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	429a      	cmp	r2, r3
 8005372:	d201      	bcs.n	8005378 <LUT+0xcc>
 8005374:	2302      	movs	r3, #2
 8005376:	e000      	b.n	800537a <LUT+0xce>
 8005378:	2300      	movs	r3, #0
 800537a:	430b      	orrs	r3, r1
 800537c:	2b03      	cmp	r3, #3
 800537e:	d818      	bhi.n	80053b2 <LUT+0x106>
 8005380:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <LUT+0xdc>)
 8005382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005386:	bf00      	nop
 8005388:	08005399 	.word	0x08005399
 800538c:	0800539f 	.word	0x0800539f
 8005390:	080053a5 	.word	0x080053a5
 8005394:	080053ad 	.word	0x080053ad
		{
		case 0: //result between mid and mid+1
			i=LUT_length_LN2; //mid is correct, so exit the loop
 8005398:	797b      	ldrb	r3, [r7, #5]
 800539a:	613b      	str	r3, [r7, #16]
			break;
 800539c:	e00c      	b.n	80053b8 <LUT+0x10c>
		case 1: //input < mid value
			bound_high = mid;
 800539e:	7d7b      	ldrb	r3, [r7, #21]
 80053a0:	75bb      	strb	r3, [r7, #22]
			break;
 80053a2:	e009      	b.n	80053b8 <LUT+0x10c>
		case 2: //input > mid+1 value
			bound_low = mid+1;
 80053a4:	7d7b      	ldrb	r3, [r7, #21]
 80053a6:	3301      	adds	r3, #1
 80053a8:	75fb      	strb	r3, [r7, #23]
			break;
 80053aa:	e005      	b.n	80053b8 <LUT+0x10c>
		case 3: //impossible case
			Error_Handler();
 80053ac:	f7ff fd82 	bl	8004eb4 <Error_Handler>
			break;
 80053b0:	e002      	b.n	80053b8 <LUT+0x10c>
		default:
			Error_Handler();
 80053b2:	f7ff fd7f 	bl	8004eb4 <Error_Handler>
			break;
 80053b6:	bf00      	nop
	for(uint32_t i=0; i<LUT_length_LN2; i++)
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	3301      	adds	r3, #1
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	797b      	ldrb	r3, [r7, #5]
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d3b7      	bcc.n	8005336 <LUT+0x8a>
		}
	}

	result = (int)((((float)(input-LUT[mid]))/((float)(LUT[mid+1]-LUT[mid])))*(LUT[mid+1+length]-LUT[mid+length]))+LUT[mid+length];
 80053c6:	88fa      	ldrh	r2, [r7, #6]
 80053c8:	7d7b      	ldrb	r3, [r7, #21]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	6839      	ldr	r1, [r7, #0]
 80053ce:	440b      	add	r3, r1
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	ee07 3a90 	vmov	s15, r3
 80053d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053dc:	7d7b      	ldrb	r3, [r7, #21]
 80053de:	3301      	adds	r3, #1
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	4413      	add	r3, r2
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	7d7b      	ldrb	r3, [r7, #21]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	440b      	add	r3, r1
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	ee07 3a90 	vmov	s15, r3
 80053f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005400:	7d7b      	ldrb	r3, [r7, #21]
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	7ffb      	ldrb	r3, [r7, #31]
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	4413      	add	r3, r2
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	7d79      	ldrb	r1, [r7, #21]
 8005412:	7ffb      	ldrb	r3, [r7, #31]
 8005414:	440b      	add	r3, r1
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	440b      	add	r3, r1
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	ee07 3a90 	vmov	s15, r3
 8005424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005430:	ee17 1a90 	vmov	r1, s15
 8005434:	7d7a      	ldrb	r2, [r7, #21]
 8005436:	7ffb      	ldrb	r3, [r7, #31]
 8005438:	4413      	add	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	4413      	add	r3, r2
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	440b      	add	r3, r1
 8005444:	60fb      	str	r3, [r7, #12]

	return result;
 8005446:	68fb      	ldr	r3, [r7, #12]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3720      	adds	r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005450:	480d      	ldr	r0, [pc, #52]	; (8005488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005452:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005454:	480d      	ldr	r0, [pc, #52]	; (800548c <LoopForever+0x6>)
  ldr r1, =_edata
 8005456:	490e      	ldr	r1, [pc, #56]	; (8005490 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005458:	4a0e      	ldr	r2, [pc, #56]	; (8005494 <LoopForever+0xe>)
  movs r3, #0
 800545a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800545c:	e002      	b.n	8005464 <LoopCopyDataInit>

0800545e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800545e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005462:	3304      	adds	r3, #4

08005464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005468:	d3f9      	bcc.n	800545e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800546a:	4a0b      	ldr	r2, [pc, #44]	; (8005498 <LoopForever+0x12>)
  ldr r4, =_ebss
 800546c:	4c0b      	ldr	r4, [pc, #44]	; (800549c <LoopForever+0x16>)
  movs r3, #0
 800546e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005470:	e001      	b.n	8005476 <LoopFillZerobss>

08005472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005474:	3204      	adds	r2, #4

08005476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005478:	d3fb      	bcc.n	8005472 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800547a:	f7ff ff01 	bl	8005280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800547e:	f000 f811 	bl	80054a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005482:	f7fe ffc5 	bl	8004410 <main>

08005486 <LoopForever>:

LoopForever:
    b LoopForever
 8005486:	e7fe      	b.n	8005486 <LoopForever>
  ldr   r0, =_estack
 8005488:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800548c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005490:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8005494:	0800553c 	.word	0x0800553c
  ldr r2, =_sbss
 8005498:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800549c:	20000f84 	.word	0x20000f84

080054a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80054a0:	e7fe      	b.n	80054a0 <ADC1_2_IRQHandler>
	...

080054a4 <__libc_init_array>:
 80054a4:	b570      	push	{r4, r5, r6, lr}
 80054a6:	4e0d      	ldr	r6, [pc, #52]	; (80054dc <__libc_init_array+0x38>)
 80054a8:	4c0d      	ldr	r4, [pc, #52]	; (80054e0 <__libc_init_array+0x3c>)
 80054aa:	1ba4      	subs	r4, r4, r6
 80054ac:	10a4      	asrs	r4, r4, #2
 80054ae:	2500      	movs	r5, #0
 80054b0:	42a5      	cmp	r5, r4
 80054b2:	d109      	bne.n	80054c8 <__libc_init_array+0x24>
 80054b4:	4e0b      	ldr	r6, [pc, #44]	; (80054e4 <__libc_init_array+0x40>)
 80054b6:	4c0c      	ldr	r4, [pc, #48]	; (80054e8 <__libc_init_array+0x44>)
 80054b8:	f000 f820 	bl	80054fc <_init>
 80054bc:	1ba4      	subs	r4, r4, r6
 80054be:	10a4      	asrs	r4, r4, #2
 80054c0:	2500      	movs	r5, #0
 80054c2:	42a5      	cmp	r5, r4
 80054c4:	d105      	bne.n	80054d2 <__libc_init_array+0x2e>
 80054c6:	bd70      	pop	{r4, r5, r6, pc}
 80054c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054cc:	4798      	blx	r3
 80054ce:	3501      	adds	r5, #1
 80054d0:	e7ee      	b.n	80054b0 <__libc_init_array+0xc>
 80054d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054d6:	4798      	blx	r3
 80054d8:	3501      	adds	r5, #1
 80054da:	e7f2      	b.n	80054c2 <__libc_init_array+0x1e>
 80054dc:	08005534 	.word	0x08005534
 80054e0:	08005534 	.word	0x08005534
 80054e4:	08005534 	.word	0x08005534
 80054e8:	08005538 	.word	0x08005538

080054ec <memset>:
 80054ec:	4402      	add	r2, r0
 80054ee:	4603      	mov	r3, r0
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d100      	bne.n	80054f6 <memset+0xa>
 80054f4:	4770      	bx	lr
 80054f6:	f803 1b01 	strb.w	r1, [r3], #1
 80054fa:	e7f9      	b.n	80054f0 <memset+0x4>

080054fc <_init>:
 80054fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fe:	bf00      	nop
 8005500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005502:	bc08      	pop	{r3}
 8005504:	469e      	mov	lr, r3
 8005506:	4770      	bx	lr

08005508 <_fini>:
 8005508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550a:	bf00      	nop
 800550c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550e:	bc08      	pop	{r3}
 8005510:	469e      	mov	lr, r3
 8005512:	4770      	bx	lr
